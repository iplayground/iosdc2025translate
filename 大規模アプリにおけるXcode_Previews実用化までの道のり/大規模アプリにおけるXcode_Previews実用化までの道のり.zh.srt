1
00:00:00,000 --> 00:00:06,000
邁向實用化之路，Ikesyo!

2
00:00:30,000 --> 00:00:40,200
我在一個以「改善開發SOP」為使命的團隊工作，主要負責iOS app的build system以及CICD的維護等事務

3
00:00:40,200 --> 00:00:51,133
我在GitHub上參與了許多活動，擁有Swift committer的權限，過去也維護過許多不同的OSS

4
00:00:51,666 --> 00:00:55,866
過去我曾在iOS DC登台過5次，但都是Lightning Talk

5
00:00:55,866 --> 00:00:58,100
Regular Talk 這次倒是第一次

6
00:00:58,133 --> 00:01:00,400
我其實有點緊張

7
00:01:00,433 --> 00:01:01,966
還請大家多多指教

8
00:01:02,000 --> 00:01:05,100
總之，就是LINE app

9
00:01:05,100 --> 00:01:08,933
標題中提到的「大規模app」指的就是LINE

10
00:01:08,966 --> 00:01:14,233
今天的議程 (agenda) 如下所示

11
00:01:14,233 --> 00:01:15,966
我們就一個一個來看吧

12
00:01:16,000 --> 00:01:23,000
首先，我想談談LINE iOS app的背景與它所面臨的課題

13
00:01:23,033 --> 00:01:28,466
LINE iOS app的特徵大致是這樣的

14
00:01:28,466 --> 00:01:32,400
如同最近許多app一樣

15
00:01:32,400 --> 00:01:36,533
我們採用了multi-module架構，由數百個module所構成

16
00:01:36,566 --> 00:01:39,200
也就是因為module非常多

17
00:01:39,200 --> 00:01:41,133
為了加快app的啟動速度

18
00:01:41,133 --> 00:01:43,733
我們大規模地活用了static framework

19
00:01:43,733 --> 00:01:47,466
雖說進行了模組化

20
00:01:47,500 --> 00:01:51,433
仍有一些legacy的部分還無法模組化，

21
00:01:51,433 --> 00:01:54,933
再加上，光是整合這數百個module這件事

22
00:01:54,933 --> 00:01:58,000
application target本身就已經相當巨大

23
00:01:58,033 --> 00:02:00,766
因此要直接preview那個application target

24
00:02:00,766 --> 00:02:02,633
我們的架構是相當不適合這麼做的

25
00:02:02,666 --> 00:02:06,766
讓我來大致介紹一下目前的開發規模

26
00:02:06,766 --> 00:02:09,533
code行數超過250萬行

27
00:02:09,566 --> 00:02:11,433
Xcode project超過600個

28
00:02:11,466 --> 00:02:15,400
target數量扣除test target後仍超過800個

29
00:02:15,400 --> 00:02:17,800
此外，pre-built framework的數量

30
00:02:17,833 --> 00:02:22,266
也就是指內部的package或外部的library

31
00:02:22,300 --> 00:02:25,500
透過 giginet san 提供的叫一個 Scipio 的工具

32
00:02:25,500 --> 00:02:28,100
將它們製作成pre-built XCFramework來使用的

33
00:02:28,133 --> 00:02:31,366
數量也超過150個，規模相當可觀

34
00:02:31,400 --> 00:02:35,066
這部分可能有點重複

35
00:02:35,066 --> 00:02:37,800
LINE iOS app有非常多的module

36
00:02:37,800 --> 00:02:39,700
如果將這些都用dynamic link來連結

37
00:02:39,733 --> 00:02:42,233
app的啟動時間就會變得非常慢

38
00:02:42,233 --> 00:02:44,666
因此我們是作為static framework 來使用

39
00:02:44,666 --> 00:02:50,266
雖然最近的iOS中DYLD有所進化

40
00:02:50,300 --> 00:02:53,233
也有了cache機制，在某些方面是變快了沒錯

41
00:02:53,233 --> 00:02:54,966
但我們目前仍是使用static framework

42
00:02:55,000 --> 00:02:58,366
不過，這在Preview方面就造成了困擾

43
00:02:58,366 --> 00:03:02,066
在Xcode 15之前，如果不是dynamic framework

44
00:03:02,066 --> 00:03:04,766
是無法preview該module的

45
00:03:04,800 --> 00:03:09,066
這算是Xcode Preview執行引擎的

46
00:03:09,066 --> 00:03:10,866
一個技術上的限制

47
00:03:10,900 --> 00:03:13,133
因此在LINE iOS app上

48
00:03:13,133 --> 00:03:16,666
實質上一直處於無法使用Preview的狀態

49
00:03:16,700 --> 00:03:20,933
這時，迎來了一個轉機

50
00:03:20,933 --> 00:03:24,400
如同方才所說，Xcode 15之前

51
00:03:24,433 --> 00:03:27,266
只有dynamic framework才能使用Preview

52
00:03:27,266 --> 00:03:29,933
到了Xcode 16，總算連static framework

53
00:03:29,933 --> 00:03:33,233
和static library的支援也加上去了

54
00:03:33,266 --> 00:03:36,066
這就是Release Note上所highlight的重點

55
00:03:36,066 --> 00:03:39,200
於是，我們便開始進行驗證

56
00:03:39,233 --> 00:03:43,966
實際要在LINE iOS的workspace中測試時

57
00:03:44,000 --> 00:03:47,300
我覺得直接拿現有的module來測試有點麻煩

58
00:03:47,300 --> 00:03:51,466
於是就試著做了一個最小需求的小型module來跑跑看

59
00:03:51,500 --> 00:03:55,433
確實確認到即便是static framework，Preview也能正常運作

60
00:03:55,433 --> 00:03:57,233
太棒了！

61
00:03:57,266 --> 00:04:00,433
雖然是這樣，但有一點注意事項

62
00:04:00,433 --> 00:04:03,366
就是必須使用新的執行引擎

63
00:04:03,400 --> 00:04:09,333
從16版開始，執行引擎本身就換成了全新的版本

64
00:04:09,366 --> 00:04:11,566
不過還是有「使用舊版執行引擎」的設定

65
00:04:11,566 --> 00:04:13,400
必須把這個選項關掉

66
00:04:13,433 --> 00:04:17,366
把 Editor > Canvas 下的 Uses Legacy Previews Execution 這個選項設為Off

67
00:04:17,366 --> 00:04:22,166
接著，我試著用現有的module來正式測試

68
00:04:22,200 --> 00:04:27,833
結果發現，只要用了availability，Preview就會crash

69
00:04:27,833 --> 00:04:33,033
這個問題在LINE app的code base中影響範圍相當大

70
00:04:33,066 --> 00:04:36,000
並不是只改掉一部分就能了事的

71
00:04:36,033 --> 00:04:38,966
嚴重到如果問題不解決，LINE app根本無法實際應用的程度

72
00:04:38,966 --> 00:04:42,033
於是，我就向Apple提交了Feedback

73
00:04:42,033 --> 00:04:43,966
開始了等待修正的日子

74
00:04:44,000 --> 00:04:47,733
我用這個FB編號和標題提交了Feedback

75
00:04:47,733 --> 00:04:50,766
內容大致是像這樣

76
00:04:50,766 --> 00:04:53,800
寫了`if available`和OS版本

77
00:04:53,833 --> 00:04:57,366
這時，如果實際project端的target的

78
00:04:57,366 --> 00:05:01,300
deployment target低於這個版本

79
00:05:01,300 --> 00:05:03,100
Preview的執行引擎

80
00:05:03,133 --> 00:05:05,833
用來判斷該執行環境的symbol

81
00:05:05,833 --> 00:05:08,600
會因為找不到而crash

82
00:05:08,600 --> 00:05:10,700
就這樣等著等著

83
00:05:10,733 --> 00:05:13,866
到了Xcode 16.3，這個bug總算被修正了

84
00:05:13,866 --> 00:05:14,933
太棒了！

85
00:05:14,933 --> 00:05:16,333
總而言之

86
00:05:16,366 --> 00:05:19,166
看到自己提交的Feedback

87
00:05:19,166 --> 00:05:22,666
出現在Xcode Release Note的修正清單裡

88
00:05:22,666 --> 00:05:24,466
真的是一次非常開心的體驗

89
00:05:24,500 --> 00:05:25,766
於是呢

90
00:05:25,766 --> 00:05:29,366
實際執行了剛才Feedback裡附上的

91
00:05:29,366 --> 00:05:31,733
Preview code，它確實能動了

92
00:05:31,733 --> 00:05:32,900
出現了「AAA」的字樣

93
00:05:32,933 --> 00:05:33,966
Preview在運作了

94
00:05:34,000 --> 00:05:35,233
太棒了！

95
00:05:35,233 --> 00:05:38,633
總之，可喜可賀、可喜可賀

96
00:05:39,533 --> 00:05:42,333
以上，本次發表到此...

97
00:05:42,333 --> 00:05:43,666
還沒結束

98
00:05:43,833 --> 00:05:45,833
事情才沒有這麼順利

99
00:05:45,900 --> 00:05:47,033
所以呢

100
00:05:47,300 --> 00:05:48,600
接下來我會分享

101
00:05:48,633 --> 00:05:50,266
為了達到實用化

102
00:05:50,300 --> 00:05:51,566
我們到底發現了

103
00:05:51,566 --> 00:05:55,066
哪些課題，以及我們是如何應對的

104
00:05:55,100 --> 00:05:58,033
我想來談談這部分

105
00:05:58,400 --> 00:06:01,366
接下來主要會談論三個點

106
00:06:01,366 --> 00:06:05,600
build scheme的管理、減少Preview對象的相依性、

107
00:06:05,633 --> 00:06:09,966
以及圖片或在地化等resource的讀取

108
00:06:10,500 --> 00:06:12,966
第一點是build scheme的管理

109
00:06:14,133 --> 00:06:17,566
當要用Xcode Preview來preview特定的component

110
00:06:17,600 --> 00:06:21,733
也就是它所在的target module時

111
00:06:21,733 --> 00:06:23,433
Xcode的build scheme

112
00:06:23,433 --> 00:06:27,266
就是最上方執行按鈕旁邊那個地方

113
00:06:27,300 --> 00:06:30,400
我們要從這裡選擇要build哪個target scheme

114
00:06:30,400 --> 00:06:32,700
然後才能執行Preview

115
00:06:32,700 --> 00:06:35,500
因此，我們需要一個專門給它用的scheme

116
00:06:35,533 --> 00:06:40,900
如果想做這件事，就要選擇實作這個component的target，是吧

117
00:06:40,900 --> 00:06:46,300
然而，LINE iOS的project有數百個module

118
00:06:46,333 --> 00:06:49,500
如果馬上幫每個不同的target都各建一個build scheme

119
00:06:49,500 --> 00:06:52,766
列表就會像後面那樣整個滿出來

120
00:06:52,800 --> 00:06:54,733
會變得很麻煩，非常不切實際

121
00:06:54,733 --> 00:06:56,433
會變得根本沒辦法用

122
00:06:56,433 --> 00:07:00,266
就算我們只鎖定有包含UI的「UI module」

123
00:07:00,300 --> 00:07:02,600
數量還是太多了

124
00:07:02,600 --> 00:07:06,733
而且，app的功能開發

125
00:07:06,733 --> 00:07:10,033
常會依照module來區分負責的團隊

126
00:07:10,033 --> 00:07:13,533
如果列表上出現了

127
00:07:13,533 --> 00:07:16,033
跟自己團隊無關的東西，也會形成干擾

128
00:07:16,066 --> 00:07:19,200
所以，在實際應用上

129
00:07:19,200 --> 00:07:22,000
我們需要一個機制，讓我們可以

130
00:07:22,033 --> 00:07:25,233
只建立和顯示自己需要的build scheme

131
00:07:25,233 --> 00:07:29,766
於是，我們決定使用XcodeGen建立scheme的機制中

132
00:07:29,800 --> 00:07:33,633
Scheme Management的「Shared」和「Is Shown」這兩個設定

133
00:07:33,633 --> 00:07:35,433
在這裡

134
00:07:35,466 --> 00:07:38,800
那600多個Xcode project

135
00:07:38,800 --> 00:07:42,800
我們是使用一個叫XcodeGen的工具，透過YAML來產生Xcode project

136
00:07:42,833 --> 00:07:43,633
來進行控制的

137
00:07:43,633 --> 00:07:46,500
我們使用的是它裡面的scheme生成設定

138
00:07:46,533 --> 00:07:50,133
我們將scheme建立為「Shared」

139
00:07:50,133 --> 00:07:52,600
讓scheme本身可以在團隊間共享

140
00:07:52,633 --> 00:07:54,700
同時設定「Is Shown」

141
00:07:54,700 --> 00:07:57,066
讓它預設是隱藏的

142
00:07:57,100 --> 00:08:01,800
只有想用的人才在自己的電腦上把它打開，透過這種方式來控制

143
00:08:01,800 --> 00:08:06,033
這個顯示/隱藏的狀態，是依據user來管理的

144
00:08:06,033 --> 00:08:08,833
它會存在Xcode project裡的`xcuserdata`

145
00:08:08,866 --> 00:08:13,166
這個user專屬目錄底下的設定檔中

146
00:08:13,166 --> 00:08:17,200
在Scheme Management這個畫面中

147
00:08:17,233 --> 00:08:19,600
建立時，「Shared」會是打勾的狀態

148
00:08:19,600 --> 00:08:25,033
一開始左邊「Show」的核取方塊是取消的

149
00:08:25,066 --> 00:08:30,033
使用者在自己的電腦上把它打勾，然後關閉視窗，就可以用了

150
00:08:30,033 --> 00:08:35,366
我們也在XcodeGen端準備了套用這項設定的template

151
00:08:35,400 --> 00:08:39,000
這樣大家就不用一個一個去寫左邊的設定

152
00:08:39,000 --> 00:08:43,666
只要在template裡寫好，就可以直接套用

153
00:08:44,366 --> 00:08:47,933
第二點，是關於減少Preview對象的相依性

154
00:08:48,866 --> 00:08:53,133
LINE的multi-module架構大致是長這個樣子

155
00:08:53,166 --> 00:09:01,366
分為Feature、Shared、Utility這幾個layer，底下還有外部library、內部package等等

156
00:09:01,366 --> 00:09:06,400
上層layer可以依賴下層layer，但下層layer禁止依賴上層

157
00:09:06,433 --> 00:09:11,933
此外，在各layer中又分離出UI module和Logic module

158
00:09:11,933 --> 00:09:14,100
UI可以依賴Logic

159
00:09:14,100 --> 00:09:17,433
但Logic禁止依賴UI

160
00:09:17,466 --> 00:09:22,466
在UI依賴Logic module的架構下

161
00:09:22,500 --> 00:09:25,666
我們想preview的UI component

162
00:09:25,666 --> 00:09:28,166
當然是放在UI module裡面，對吧

163
00:09:28,166 --> 00:09:29,366
但是

164
00:09:29,366 --> 00:09:32,300
因為想preview UI module

165
00:09:32,300 --> 00:09:35,200
所以選擇了UI module的scheme，觸發了build

166
00:09:35,233 --> 00:09:38,666
這麼一來，Logic module和它的相依項目

167
00:09:38,700 --> 00:09:40,533
當然也必須跟著一起build

168
00:09:40,533 --> 00:09:43,966
這時，如果Logic module又依賴了一大堆東西

169
00:09:43,966 --> 00:09:46,100
明明只是想preview個UI

170
00:09:46,133 --> 00:09:49,466
卻得連帶build一大堆Logic的相依項目

171
00:09:49,466 --> 00:09:51,500
導致build的時間變得很長

172
00:09:51,500 --> 00:09:57,300
更嚴重的時候，Xcode甚至無法正確build或preview

173
00:09:57,333 --> 00:10:02,000
Preview的canvas畫面會一直處於loading狀態

174
00:10:02,000 --> 00:10:06,200
既不吐error，也顯示不出preview

175
00:10:06,200 --> 00:10:09,300
關於這點該如何解決

176
00:10:09,333 --> 00:10:11,366
我們在UI module之外

177
00:10:11,366 --> 00:10:15,333
另外定義了一種「Previable UI module」

178
00:10:15,333 --> 00:10:18,733
並提案寫入了guideline

179
00:10:18,766 --> 00:10:23,233
我們規定這種module不可以依賴Logic module

180
00:10:23,233 --> 00:10:24,900
是「禁止」依賴

181
00:10:24,933 --> 00:10:28,866
那像是按下按鈕時的action該怎麼辦呢？

182
00:10:28,866 --> 00:10:30,433
關於這點

183
00:10:30,466 --> 00:10:34,133
由更上層的UI module，同時依賴Logic

184
00:10:34,133 --> 00:10:37,066
和不含Logic的Previable UI

185
00:10:37,100 --> 00:10:41,633
再透過closure或binding的方式將Logic注入

186
00:10:41,633 --> 00:10:47,233
我們把這種module命名為可Preview的狀態

187
00:10:47,266 --> 00:10:52,933
定義出「想preview的component請實作在這裡」

188
00:10:52,933 --> 00:10:56,200
透過這種方式來分離和輕量化相依性

189
00:10:56,233 --> 00:11:02,133
當新的module、或是現有相依性過多的module想使用Preview時

190
00:11:02,166 --> 00:11:04,766
我們就提倡用這種方式去分離它

191
00:11:06,266 --> 00:11:08,500
好，那麼第三點，也是最後一點

192
00:11:08,833 --> 00:11:12,966
是關於圖片或在地化等resource的讀取

193
00:11:13,200 --> 00:11:15,300
這部分是個相當困難的點

194
00:11:16,833 --> 00:11:22,266
LINE app我想也是因為過去的歷史包袱

195
00:11:22,266 --> 00:11:26,800
許多橫跨整個app、或是多個功能共通使用的

196
00:11:26,800 --> 00:11:30,100
圖片或在地化字串等resource

197
00:11:30,100 --> 00:11:33,866
都是被包在LINE app最上層的application target主體中

198
00:11:33,900 --> 00:11:36,633
是像這樣內嵌的形式

199
00:11:37,200 --> 00:11:39,100
各個被分離出去的module

200
00:11:39,133 --> 00:11:41,833
在想要取用那些共通resource的時候

201
00:11:41,833 --> 00:11:43,766
會透過`Bundle.main`

202
00:11:43,766 --> 00:11:46,066
去存取那些被包在app裡的resource

203
00:11:46,066 --> 00:11:48,166
是這樣的一個機制

204
00:11:48,833 --> 00:11:50,533
平常這樣做是沒有問題的

205
00:11:50,566 --> 00:11:55,833
不過，直接用字串去存取很麻煩

206
00:11:55,833 --> 00:11:56,933
型別上也不安全

207
00:11:56,933 --> 00:11:59,866
所以我們有透過code generation產生的accessor code

208
00:11:59,900 --> 00:12:01,633
被定義在一個共通module裡

209
00:12:01,633 --> 00:12:03,966
大家都是透過它來存取

210
00:12:04,000 --> 00:12:07,400
這在Preview的時候就麻煩了

211
00:12:07,433 --> 00:12:12,133
在Preview時，存取`Bundle.main`會出錯

212
00:12:12,133 --> 00:12:16,366
為什麼呢？因為Xcode Preview的執行環境

213
00:12:16,366 --> 00:12:23,066
它的host app，是一個叫`XCPreviewAgent.app`的、由Xcode提供的app

214
00:12:23,100 --> 00:12:29,833
是由這個app去load要preview的module並顯示出來的

215
00:12:29,833 --> 00:12:34,166
這時，如果module端去存取`Bundle.main`

216
00:12:34,166 --> 00:12:38,400
那個`Bundle.main`會指向`XCPreviewAgent.app`本身

217
00:12:38,433 --> 00:12:41,733
想當然，這個Xcode提供的app

218
00:12:41,733 --> 00:12:45,000
裡面並不會包有我們LINE app用的resource

219
00:12:45,000 --> 00:12:48,133
所以用`Bundle.main`去存取也找不到resource

220
00:12:48,166 --> 00:12:52,266
如果又用了force unwrap，自然就會crash了

221
00:12:52,266 --> 00:12:59,600
作為解決方案，我們決定使用「Development Assets」

222
00:12:59,633 --> 00:13:04,400
我們利用這個功能，在 Accessor Code 用的共用模組中

223
00:13:04,433 --> 00:13:07,866
暫時性地將resource嵌入到這裡，來代替app

224
00:13:07,866 --> 00:13:12,166
Development Assets是用來指定Preview用的圖片resource

225
00:13:12,200 --> 00:13:17,366
或Mock data等，不會包含在正式版app裡的asset或source code路徑的功能

226
00:13:17,400 --> 00:13:19,066
它在archive build時

227
00:13:19,100 --> 00:13:22,366
也就是`xcodebuild`的`archive` command action時

228
00:13:22,366 --> 00:13:24,666
會被排除在build對象之外

229
00:13:24,700 --> 00:13:27,733
這功能Swift source code能用，resource也能用

230
00:13:27,733 --> 00:13:29,533
兩者皆可

231
00:13:29,533 --> 00:13:34,800
在Xcode的設定中，像這樣在target設定的General底下

232
00:13:34,833 --> 00:13:37,166
最下面有個Development Assets欄位

233
00:13:37,166 --> 00:13:39,533
把路徑加到這裡就行了

234
00:13:39,533 --> 00:13:43,933
在build setting裡，則對應`DEVELOPMENT_ASSET_PATHS`這個設定

235
00:13:45,966 --> 00:13:48,733
我們利用這項設定，在這個名為`SharedUICommonMediaAssets`

236
00:13:48,733 --> 00:13:52,033
也就是定義了共通的 Accessor Code  的 module 中

237
00:13:52,066 --> 00:13:55,900
將平常嵌在app主程式裡的`Media.xcassets`

238
00:13:55,933 --> 00:13:58,933
改成只在Preview時嵌入到這個module裡

239
00:13:58,933 --> 00:14:05,000
並且，把平常透過`Bundle.main`存取resource的bundle指向

240
00:14:05,000 --> 00:14:08,133
替換成指向自己的module

241
00:14:08,133 --> 00:14:13,533
指向自己的 Accessor Code 所在的module

242
00:14:13,566 --> 00:14:18,866
這樣一來，就算在Preview時，也能正確找到想存取的resource了

243
00:14:18,866 --> 00:14:25,333
這張圖是替換bundle指向的code範例

244
00:14:25,366 --> 00:14:28,666
首先，Preview基本上都是Debug build

245
00:14:28,700 --> 00:14:30,733
所以先限定在Debug模式

246
00:14:30,733 --> 00:14:34,166
接著，在Preview執行時

247
00:14:34,200 --> 00:14:38,866
系統會定義一個名為`XCODE_RUNNING_FOR_PREVIEWS`的環境變數

248
00:14:38,900 --> 00:14:41,733
藉此就可以判斷是否在Preview環境下執行

249
00:14:41,733 --> 00:14:45,233
這時，雖然有點tricky

250
00:14:45,266 --> 00:14:48,900
透過`Bundle(for: Class.self)`取得的路徑

251
00:14:48,933 --> 00:14:50,366
那個路徑

252
00:14:50,366 --> 00:14:53,766
在Preview的執行環境下

253
00:14:53,766 --> 00:14:58,366
`Bundle(for:)`會回傳`Debug-iphonesimulator`的路徑

254
00:14:58,366 --> 00:14:59,133
雖然很不可思議

255
00:14:59,166 --> 00:15:01,400
但Xcode build完的

256
00:15:01,433 --> 00:15:04,466
`SharedUICommonMediaAssets`

257
00:15:04,466 --> 00:15:06,466
這個framework build完的成品

258
00:15:06,466 --> 00:15:07,100
會存在於那裡

259
00:15:07,133 --> 00:15:09,533
所以我們就把那個framework的路徑當作bundle來用

260
00:15:09,533 --> 00:15:10,933
就可以了

261
00:15:10,933 --> 00:15:12,933
這樣就能存取到這個bundle裡的

262
00:15:12,966 --> 00:15:16,300
assets了

263
00:15:16,333 --> 00:15:18,833
就是這樣一個範例

264
00:15:19,000 --> 00:15:21,300
這樣基本上就沒問題了，不過

265
00:15:21,333 --> 00:15:22,433
有一部分的module

266
00:15:22,433 --> 00:15:24,666
是直接使用`UIImage(named:)`

267
00:15:24,700 --> 00:15:26,700
沒有正確指定bundle

268
00:15:26,700 --> 00:15:30,466
這樣下去還是會存取到`Bundle.main`

269
00:15:30,500 --> 00:15:32,633
所以我們把那些地方改成

270
00:15:32,633 --> 00:15:35,366
使用下面這種code generation產生的accessor code

271
00:15:35,366 --> 00:15:38,400
這樣就能確保bundle被正確替換了

272
00:15:38,433 --> 00:15:42,333
這樣處理後，大致上就沒問題了

273
00:15:42,333 --> 00:15:46,066
接著來談談目前的狀況與未來的展望

274
00:15:47,400 --> 00:15:51,000
再次強調，我們成功驗證了static framework是可行的

275
00:15:51,033 --> 00:15:55,566
並且透過今天介紹的各種事前準備

276
00:15:55,600 --> 00:15:57,666
環境總算有了一定程度的整備

277
00:15:57,666 --> 00:16:01,233
接著我們為了讓開發者、各開發團隊能開始使用

278
00:16:01,233 --> 00:16:02,733
而製作了guideline

279
00:16:02,733 --> 00:16:05,900
並向各開發團隊進行了宣導

280
00:16:05,933 --> 00:16:10,600
從這裡開始，就進入了讓各開發團隊實際使用

281
00:16:10,633 --> 00:16:12,833
也就是導入的階段

282
00:16:12,833 --> 00:16:16,333
目前，剛剛提到的「Previwable Target」

283
00:16:16,366 --> 00:16:18,100
已經定義了大約5個

284
00:16:18,100 --> 00:16:19,900
自宣導以來增加了3個

285
00:16:19,933 --> 00:16:23,466
雖然不多，但已經漸漸開始導入了

286
00:16:23,500 --> 00:16:27,733
關於未來的展望

287
00:16:27,733 --> 00:16:29,766
如同我剛才所說

288
00:16:29,766 --> 00:16:35,500
Xcode Previews本身還有很多不穩定的地方

289
00:16:35,533 --> 00:16:43,133
我們期待Apple能持續為Xcode追加新功能並改善穩定性

290
00:16:43,133 --> 00:16:48,266
此外，當開發團隊實際開始導入時

291
00:16:48,300 --> 00:16:50,200
一定會產生各式各樣的疑問

292
00:16:50,233 --> 00:16:54,566
根據情況，可能還會發現「啊，這個case我們漏考慮了」

293
00:16:54,600 --> 00:16:56,000
我想會陸續發現很多這類問題

294
00:16:56,000 --> 00:16:58,933
我們會將這些部分持續反映到guideline中

295
00:16:58,933 --> 00:17:02,100
希望能打造出一份沒有疏漏的文件

296
00:17:02,133 --> 00:17:06,500
再來，我們也會透過內部的讀書會發表，傳達給各團隊

297
00:17:06,533 --> 00:17:10,166
或是舉辦workshop，大家實際動手做做看

298
00:17:10,200 --> 00:17:13,600
希望能藉此提高採用率

299
00:17:13,600 --> 00:17:18,233
另外，作為這些措施的成效評估

300
00:17:18,266 --> 00:17:22,000
我們也希望能確實追蹤活用狀況

301
00:17:22,033 --> 00:17:24,933
像是「實際可以preview的target」

302
00:17:24,933 --> 00:17:27,066
到底被定義了多少個

303
00:17:27,066 --> 00:17:33,300
以及「Preview本身的數量」被定義了多少個，我們希望能測量這些數據

304
00:17:33,333 --> 00:17:36,166
並為此製作測量工具

305
00:17:36,200 --> 00:17:41,533
希望能做到定期執行並持續觀測

306
00:17:42,233 --> 00:17:44,700
最後，還有一個大魔王

307
00:17:44,733 --> 00:17:48,000
就是評估導入「Mergeable Library」

308
00:17:48,600 --> 00:17:51,300
到目前為止我們看到的這些問題

309
00:17:51,333 --> 00:17:56,233
絕大多數都是因為使用static framework所引起的

310
00:17:56,233 --> 00:17:59,933
因為這樣，導致相依的module一多，link就會變得很慢

311
00:17:59,933 --> 00:18:02,400
Preview就無法正常運作

312
00:18:02,400 --> 00:18:07,266
為了避免這種情況，我們才需要把module分離成Previewable UI之類的

313
00:18:07,300 --> 00:18:09,266
非得做這些事不可

314
00:18:09,266 --> 00:18:12,766
但是，如果導入了Mergeable Library

315
00:18:12,766 --> 00:18:14,366
詳細內容我就先省略了

316
00:18:14,400 --> 00:18:19,566
它在Debug build時，會從static link變成dynamic link

317
00:18:19,566 --> 00:18:26,666
這樣一來，在Preview時link的負擔，或許就能減輕也說不定

318
00:18:26,666 --> 00:18:29,200
關於Mergeable Library的詳情

319
00:18:29,233 --> 00:18:33,733
在2023年的iOS DC，Giginet-san... 他是我的隊友

320
00:18:33,733 --> 00:18:39,133
Giginet-san有場發表「透過Mergeable Library實現高速app啟動」，也請務必參考

321
00:18:39,133 --> 00:18:40,933
結論

322
00:18:40,966 --> 00:18:45,466
我們開始在LINE iOS app這樣的大規模app開發中

323
00:18:45,500 --> 00:18:47,833
導入Xcode Preview

324
00:18:49,266 --> 00:18:51,966
我們仔細地盤點了會有哪些課題

325
00:18:51,966 --> 00:18:53,966
並一個一個地調查、解決

326
00:18:54,000 --> 00:18:56,866
也向Xcode提交Feedback，請他們修正了bug

327
00:18:56,866 --> 00:19:00,333
要在static framework上活用Xcode Preview

328
00:19:00,333 --> 00:19:01,866
依然有許多門檻

329
00:19:01,900 --> 00:19:03,966
像是Preview本身的運作穩定性

330
00:19:03,966 --> 00:19:06,433
這部分，它的引擎是JIT compile

331
00:19:06,433 --> 00:19:09,566
透過JIT在link之類的，這部分是關鍵

332
00:19:09,600 --> 00:19:11,400
也是困難點所在

333
00:19:11,400 --> 00:19:13,900
另外還有resource bundle的處理難處等等

334
00:19:13,900 --> 00:19:16,633
為了減輕這些問題

335
00:19:16,666 --> 00:19:19,466
Mergeable Library或許能成為改善方案

336
00:19:19,466 --> 00:19:22,233
未來我們會持續往這個方向調查與評估

337
00:19:22,266 --> 00:19:27,766
要讓各團隊導入，才正要開始

338
00:19:27,766 --> 00:19:31,033
抱持著「我們的戰鬥才正要開始」的心情

339
00:19:31,033 --> 00:19:33,033
我們會持續推動改善

340
00:19:33,066 --> 00:19:36,466
我貼了許多參考資料

341
00:19:36,500 --> 00:19:38,933
之後會再分享投影片

342
00:19:38,933 --> 00:19:40,633
屆時再請大家看看

343
00:19:40,633 --> 00:19:43,133
那麼，祝大家有愉快的

344
00:19:43,133 --> 00:19:44,800
Xcode Preview生活

345
00:19:44,833 --> 00:19:46,733
希望大家能享受

346
00:19:46,733 --> 00:19:48,966
我的發表到此結束，謝謝大家

347
00:19:55,066 --> 00:19:57,666
好的，謝謝Ikesyo-san的發表

348
00:19:57,966 --> 00:20:00,900
接著我們將進入Q&A環節

349
00:20:01,200 --> 00:20:03,700
有任何評論、感想或問題的朋友

350
00:20:03,700 --> 00:20:05,100
請舉手

351
00:20:11,333 --> 00:20:13,866
沒有人嗎？

352
00:20:14,200 --> 00:20:18,033
現場座無虛席，來了這麼多人，我以為一定會有人舉手的

353
00:20:18,966 --> 00:20:22,200
有沒有人願意鼓起勇氣舉手呢？

354
00:20:24,266 --> 00:20:27,100
啊，麻煩前面那位

355
00:20:30,633 --> 00:20:32,900
是，這是一場非常有收穫的發表

356
00:20:32,900 --> 00:20:33,900
非常感謝
