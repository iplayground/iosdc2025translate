1
00:00:00,000 --> 00:00:06,000
実用化までの道のり、イケーショー!

2
00:00:30,000 --> 00:00:40,200
や、開発生産性の改善というのをミッションに仕事をしているチームで、主にiOSアプリのビルドシステムだったり、CICDのメンテナンスなどをしています。

3
00:00:40,200 --> 00:00:51,140
GitHubでいろいろ活動していて、Swiftのコミッターの権限を持っていたり、過去にも様々なOSSのメンテナンスをやってきました。

4
00:00:51,679 --> 00:00:55,880
iOS DCの登壇は過去にLTEを5回しているんですが

5
00:00:55,880 --> 00:00:58,140
レギュラートークは今回が初めてなので

6
00:00:58,140 --> 00:01:00,439
ちょっと緊張していますが

7
00:01:00,439 --> 00:01:02,000
お手柔らかにお願いします

8
00:01:02,000 --> 00:01:05,120
ということでLINEアプリですね

9
00:01:05,120 --> 00:01:08,980
タイトルの大規模アプリというのはLINEのことになります

10
00:01:08,980 --> 00:01:14,260
では本日のアジェンダはこのようになっていますので

11
00:01:14,260 --> 00:01:16,019
一つずつ見ていきましょう

12
00:01:16,019 --> 00:01:23,040
まずLINE iOSアプリの背景と課題についてお話ししようと思います

13
00:01:23,040 --> 00:01:28,480
LINE iOSアプリの特徴はこのような形になっています

14
00:01:28,480 --> 00:01:32,420
最近は多くのアプリがそうなっているように

15
00:01:32,420 --> 00:01:36,579
マルチモジュール構成で数百のモジュールから成り立っています

16
00:01:36,579 --> 00:01:39,219
そのようにモジュールがたくさんあるので

17
00:01:39,219 --> 00:01:41,159
アプリの軌道を高速化するために

18
00:01:41,159 --> 00:01:43,760
スタティックフレームワークを大規模に活用しています

19
00:01:43,760 --> 00:01:47,500
モジュール化をしているとはいえ

20
00:01:47,500 --> 00:01:51,459
出がしきな部分でモジュール化できていないコードがあったり

21
00:01:51,459 --> 00:01:54,959
あとこれだけの数百のモジュールを束ねる分だけでも

22
00:01:54,959 --> 00:01:58,040
アプリケーションターゲット自体もかなり巨大なので

23
00:01:58,040 --> 00:02:00,799
そのアプリケーションターゲットを直接プレビューするというのは

24
00:02:00,799 --> 00:02:02,680
かなり不向きな構成になっています

25
00:02:02,680 --> 00:02:06,799
現在の開発規模をざっくりとご紹介します

26
00:02:06,799 --> 00:02:09,580
コード行数は250万行以上で

27
00:02:09,580 --> 00:02:11,479
Xコードプロジェクトが600以上

28
00:02:11,479 --> 00:02:15,419
ターゲット数はテストターゲットを除いても800以上あります

29
00:02:15,419 --> 00:02:17,840
またビルド済みフレームワーク数

30
00:02:17,840 --> 00:02:22,300
これは社内パッケージや外部のライブラリですね

31
00:02:22,300 --> 00:02:25,520
をスキピオというGinnet散策のツールで

32
00:02:25,520 --> 00:02:28,139
ビルド済みのXCフレームワークにして使っているものが

33
00:02:28,139 --> 00:02:31,400
150以上あるというようなかなりの規模になっています

34
00:02:31,400 --> 00:02:35,080
ちょっと繰り返しになりますが

35
00:02:35,080 --> 00:02:37,819
LINE iOSのアプリで非常に多くのモジュールがあるので

36
00:02:37,819 --> 00:02:39,740
これをダイナミックリンクで使ってしまうと

37
00:02:39,740 --> 00:02:42,259
アプリの起動時間がかなり遅くなってしまうので

38
00:02:42,259 --> 00:02:44,699
スタティックフレームワークとして使っています

39
00:02:44,699 --> 00:02:50,300
最近のiOSでDYLDが進化したり

40
00:02:50,300 --> 00:02:53,259
キャッシュができたりで早くなっている部分もあると思いますが

41
00:02:53,259 --> 00:02:55,000
まだスタティックフレームワークを使っています

42
00:02:55,000 --> 00:02:58,379
ただしここでプレビューで困ったことがあります

43
00:02:58,379 --> 00:03:02,099
Xcode 15まではダイナミックフレームワークでないと

44
00:03:02,099 --> 00:03:04,800
そのモジュールをプレビューすることができませんでした

45
00:03:04,800 --> 00:03:09,080
これはXcodeがプレビューの実行エンジンの

46
00:03:09,080 --> 00:03:10,900
技術的な制限というところですね

47
00:03:10,900 --> 00:03:13,159
なのでLINE iOSアプリでは

48
00:03:13,159 --> 00:03:16,719
事実上プレビューを使うことができない状態になっていました

49
00:03:16,719 --> 00:03:20,960
ここに一つの変化が訪れます

50
00:03:20,960 --> 00:03:24,439
Xcode 15までは今言ったように

51
00:03:24,439 --> 00:03:27,280
ダイナミックフレームワークでしかプレビューが使えませんでしたが

52
00:03:27,280 --> 00:03:29,960
Xcode 16でついにスタティックフレームワーク

53
00:03:29,960 --> 00:03:33,280
スタティックライブラリのサポートが追加されたということが分かりました

54
00:03:33,280 --> 00:03:36,099
これがリリースノートに載っているところのハイライトですね

55
00:03:36,099 --> 00:03:39,240
ということで検証を開始します

56
00:03:39,240 --> 00:03:44,000
実際にLINE iOSのワークスペースの中で試すときに

57
00:03:44,000 --> 00:03:47,319
既存のモジュールをいきなり試すのはちょっと大変かなと思ったので

58
00:03:47,319 --> 00:03:51,500
必要最小限の小さいモジュールを試しに作って動かしてみると

59
00:03:51,500 --> 00:03:55,460
スタティックフレームワークでもちゃんとプレビューが動くことを確認できました

60
00:03:55,460 --> 00:03:57,280
やったー

61
00:03:57,280 --> 00:04:00,460
ということでなんですが一つ注意事件があって

62
00:04:00,460 --> 00:04:03,419
新しい実行エンジンというのを使う必要があります

63
00:04:03,419 --> 00:04:09,379
16から実行エンジン自体が全く新しいものに切り替わっているんですが

64
00:04:09,379 --> 00:04:11,580
古い実行エンジンを使うという設定もあって

65
00:04:11,580 --> 00:04:13,439
これをオフにする必要があります

66
00:04:13,439 --> 00:04:17,399
エディターキャンバスユーズレガシープレビューズエグゼキューションというのをオフにしましょう

67
00:04:17,399 --> 00:04:22,220
次に既存のモデルでちゃんと試してみようとしたんですが

68
00:04:22,220 --> 00:04:27,860
ここでアビリラビリティを使うとプレビューがクラッシュするということを発見してしまいます

69
00:04:27,860 --> 00:04:33,079
これは実際にLINEアプリのコードベースの中でいうとかなり影響範囲が大きくて

70
00:04:33,079 --> 00:04:36,040
一部潰すだけにはいかなくてですね

71
00:04:36,040 --> 00:04:38,980
問題が直らないとLINEアプリでは実用できないレベルでした

72
00:04:38,980 --> 00:04:42,060
ということでAppleにフィードバックを出して

73
00:04:42,060 --> 00:04:44,000
修正を待つ日々が始まります

74
00:04:44,000 --> 00:04:47,740
こういったFB番号タイトルでフィードバックを出しました

75
00:04:47,740 --> 00:04:50,779
どういう内容かというとこのような

76
00:04:50,779 --> 00:04:53,839
If availableでOSバージョンが書いてあって

77
00:04:53,839 --> 00:04:57,379
この時実際のプロジェクト側のターゲットの

78
00:04:57,379 --> 00:05:01,319
デプロイメントターゲットがこのバージョンより低いと

79
00:05:01,319 --> 00:05:03,139
プレビューの実行エンジンが

80
00:05:03,139 --> 00:05:05,839
その動作環境を判定するためのシンボルを

81
00:05:05,839 --> 00:05:08,620
見つけられなくてクラッシュするというものでした

82
00:05:08,620 --> 00:05:10,740
これを待っていたら

83
00:05:10,740 --> 00:05:13,879
Xcode 16.3でやっとこのバグが修正されました

84
00:05:13,879 --> 00:05:14,959
やったー

85
00:05:14,959 --> 00:05:16,379
ということで

86
00:05:16,379 --> 00:05:19,180
自分が出したフィードバックが

87
00:05:19,180 --> 00:05:22,699
Xcodeのリリースノートで修正されたということを

88
00:05:22,699 --> 00:05:24,500
知るのは非常に嬉しい体験ですね

89
00:05:24,500 --> 00:05:25,779
ということで

90
00:05:25,779 --> 00:05:29,379
実際にさっきのフィードバックで出していた

91
00:05:29,379 --> 00:05:31,759
プレビューのコードがちゃんと動いて

92
00:05:31,759 --> 00:05:32,939
AAAって出てますね

93
00:05:32,939 --> 00:05:34,000
プレビューが動いている

94
00:05:34,000 --> 00:05:35,259
やったー

95
00:05:35,259 --> 00:05:38,660
ということでめでたしめでたし

96
00:05:38,660 --> 00:05:42,660
以上でこの発表を終わりません

97
00:05:42,660 --> 00:05:44,920
そんなにうまくいくわけはありません

98
00:05:44,920 --> 00:05:46,399
ということで

99
00:05:46,399 --> 00:05:48,660
ここからは実際に

100
00:05:48,660 --> 00:05:50,300
実用化にこぎつけるまでに

101
00:05:50,300 --> 00:05:51,579
どのような課題が

102
00:05:51,579 --> 00:05:55,100
発見してそれにどのように対処してきたか

103
00:05:55,100 --> 00:05:57,360
ということをお話ししようと思います

104
00:05:57,360 --> 00:06:01,399
ここから主に3つの点についてお話ししていきます

105
00:06:01,399 --> 00:06:05,660
ビルドスキームの管理とプレビュー対象からの依存関係の削減と

106
00:06:05,660 --> 00:06:09,279
画像やローカリゼーションなどのリソースの読み込みについてです

107
00:06:09,279 --> 00:06:12,699
1つ目はビルドスキーム管理です

108
00:06:12,699 --> 00:06:17,600
Xcodeプレビューで特定のコンポーネント

109
00:06:17,600 --> 00:06:21,740
それが入っているターゲットモジュールをプレビューするとなると

110
00:06:21,740 --> 00:06:23,459
Xcodeのビルドスキーム

111
00:06:23,459 --> 00:06:27,300
一番上の実行ボタンの隣に出ているところですね

112
00:06:27,300 --> 00:06:30,420
ここからどのターゲットスキームをビルドするかというのを選んで

113
00:06:30,420 --> 00:06:32,720
それでプリピを実行するわけですが

114
00:06:32,720 --> 00:06:35,540
そういうふうにそれ用のスキームが必要になります

115
00:06:35,540 --> 00:06:40,920
こういうものをやりたければこのコンポーネント実装が入っているターゲットを選ぼうということですね

116
00:06:40,920 --> 00:06:46,339
なんですがLINE iOSのプロジェクトはモジュールが数百個あるので

117
00:06:46,339 --> 00:06:49,519
すぐ別のターゲットに一つ一つビルドスキームを作ると

118
00:06:49,519 --> 00:06:52,800
リストが後ろみたいにめっちゃ溢れてしまって

119
00:06:52,800 --> 00:06:54,740
大変なので非現実的です

120
00:06:54,740 --> 00:06:56,459
使い物にならなくなってしまいます

121
00:06:56,459 --> 00:07:00,300
もしUIが入っているようなUIモジュールというものに

122
00:07:00,300 --> 00:07:02,600
絞ったとしてもまだまだ数が多いです

123
00:07:02,600 --> 00:07:06,740
さらにアプリの機能開発というのが

124
00:07:06,740 --> 00:07:10,060
結構モジュールごとに担当チームが分かれていて

125
00:07:10,060 --> 00:07:13,560
自分たちのチームに関係のないものが

126
00:07:13,560 --> 00:07:16,079
リストに出ていてもノイズになってしまいます

127
00:07:16,079 --> 00:07:19,220
なのでここの実用としては

128
00:07:19,220 --> 00:07:22,040
自分たちに必要なビルドスキームだけを

129
00:07:22,040 --> 00:07:25,240
作成表示できるような仕組みが必要だと考えました

130
00:07:25,240 --> 00:07:29,800
そこでXcodeGENのスキームを作るための仕組みの中の

131
00:07:29,800 --> 00:07:33,660
スキームマネジメントのシェアドとイズショーンという設定を使うことにしました

132
00:07:33,660 --> 00:07:35,480
ここではですね

133
00:07:35,480 --> 00:07:38,819
600RといったXcodeプロジェクトとかは

134
00:07:38,819 --> 00:07:42,839
我々はXcodeGENというYAMLからXcodeプロジェクトを作る仕組みを使って

135
00:07:42,839 --> 00:07:43,660
制御しているんですが

136
00:07:43,660 --> 00:07:46,540
この中でのスキーム生成の設定を使っています

137
00:07:46,540 --> 00:07:50,160
シェアドなスキームとして作って

138
00:07:50,160 --> 00:07:52,639
スキームの存在体をチームで共有しつつ

139
00:07:52,639 --> 00:07:54,720
イズショーンという設定をしておくと

140
00:07:54,720 --> 00:07:57,100
デフォルトでは非表示にしておいて

141
00:07:57,100 --> 00:08:01,800
使いたい人だけが手元で表示をオンにするというような制御ができるようになります

142
00:08:01,800 --> 00:08:06,060
この表示非表示の状態っていうのはユーザー単位で管理されるものになっていて

143
00:08:06,060 --> 00:08:08,879
Xcodeプロジェクトの中のXCユーザーデータっていう

144
00:08:08,879 --> 00:08:13,199
ユーザー単位のディレクトリの中の設定ファイルに保存されます

145
00:08:13,199 --> 00:08:17,240
こういうスキームマネジメントの画面で

146
00:08:17,240 --> 00:08:19,620
シェアードでチェックが入った状態で作られていて

147
00:08:19,620 --> 00:08:25,079
最初は左側のショーのチェックボックスがオフなんですが

148
00:08:25,079 --> 00:08:30,060
これを手元でオンにしてクローズして使いましょうという形ですね

149
00:08:30,060 --> 00:08:35,419
この設定を行うためのテンプレートっていうのをXcodeジェンガーでも用意して

150
00:08:35,419 --> 00:08:39,019
この一つ一つ左側の設定を書くんじゃなくて

151
00:08:39,019 --> 00:08:43,200
テンプレートにこれを書けば使えるようにするという形にしました

152
00:08:43,200 --> 00:08:47,299
二つ目はプレビュー対象から依存環境を減らすという話です

153
00:08:47,299 --> 00:08:53,179
LINEのマルチモジュール構成はざっくりこのような構成になっていまして

154
00:08:53,179 --> 00:09:01,379
Feature Shared Utilityというレイヤーとその下に外部ライブラリー 社内パッケージみたいな形になっていて

155
00:09:01,379 --> 00:09:06,440
上位のレイヤーは下位のレイヤーに依存しておりが 下位のレイヤーは上位に依存してはいけない

156
00:09:06,440 --> 00:09:11,940
また各レイヤーの中でUIモジュールとロジックモジュールという分離があるんですが

157
00:09:11,940 --> 00:09:14,120
UIからLogicに依存していが

158
00:09:14,120 --> 00:09:17,480
LogicはUIに依存してはいけないという感じになっています

159
00:09:17,480 --> 00:09:22,500
ここでUIがLogicモジュールに依存する構成なんですが

160
00:09:22,500 --> 00:09:25,679
当然プレビューしたいUIコンポーネントというのは

161
00:09:25,679 --> 00:09:28,179
UIモジュールの中に入っていますよね

162
00:09:28,179 --> 00:09:29,379
なんですが

163
00:09:29,379 --> 00:09:32,320
UIモジュールをプレビューしたいから

164
00:09:32,320 --> 00:09:35,240
UIモジュールのスキームを選択してビルドが走る

165
00:09:35,240 --> 00:09:38,700
そうするとLogicモジュールとその依存も

166
00:09:38,700 --> 00:09:40,539
当然一緒にビルドしなければなりません

167
00:09:40,539 --> 00:09:43,980
この時ロジックモジュールがたくさんの依存を持っていると

168
00:09:43,980 --> 00:09:46,139
ただUIをプレビューしたいだけなのに

169
00:09:46,139 --> 00:09:49,480
たくさんのロジックの依存をビルドしないといけないという形で

170
00:09:49,480 --> 00:09:51,519
結構ビルド時間が長くなってしまったり

171
00:09:51,519 --> 00:09:57,340
ひどい時にはXコード側が正しくビルドやプレビューが動かなくなって

172
00:09:57,340 --> 00:10:02,019
プレビューのキャンバスの画面でずっとローディングの状態が続いて

173
00:10:02,019 --> 00:10:06,220
何のエラーも吐かないしプレビューも表示されないという状態になってしまいます

174
00:10:06,220 --> 00:10:09,340
これをどう解決するかというところで

175
00:10:09,340 --> 00:10:11,379
少しUIモジュールの足として

176
00:10:11,379 --> 00:10:15,360
Previable UIモジュールというものを定義することを

177
00:10:15,360 --> 00:10:18,779
提案をしてガイドラインに書いたりしています

178
00:10:18,779 --> 00:10:23,259
このモジュールはロジックモジュールに依存しないという形にしています

179
00:10:23,259 --> 00:10:24,940
してはいけないという形です

180
00:10:24,940 --> 00:10:28,899
実際にボタンを押したときのアクションとかはどうするのか

181
00:10:28,899 --> 00:10:30,480
というところに関しては

182
00:10:30,480 --> 00:10:34,159
この上位のUIモジュールがロジックと

183
00:10:34,159 --> 00:10:37,100
ロジックを持たないPreviable UI両方に依存して

184
00:10:37,100 --> 00:10:41,659
そこからクロージャーだったりバインディングでロジックを注入するという形ですね

185
00:10:41,659 --> 00:10:47,279
こっちはこういう名前でプレビューできるような状態にしておこう

186
00:10:47,279 --> 00:10:52,960
プレビューしたいコンポーネントはこっちに実装しましょうという形で定義をしています

187
00:10:52,960 --> 00:10:56,259
こういう形で依存性を分離したり軽量化をして

188
00:10:56,259 --> 00:11:02,179
新規のモジュールだったりとか既存の依存が多いモジュールでプレビューしたいときは

189
00:11:02,179 --> 00:11:04,799
こういう風に分離していきましょうという話をしています

190
00:11:04,799 --> 00:11:08,080
じゃあ3つ目最後ですね

191
00:11:08,080 --> 00:11:12,120
画像やローカリゼーションなどのリソースの読み込みの話です

192
00:11:12,120 --> 00:11:14,679
結構ここが難しいポイントですね

193
00:11:14,679 --> 00:11:22,279
LINEアプリは過去の歴史もあってだと思うんですが

194
00:11:22,279 --> 00:11:26,820
アプリ全体的にだったり複数の機能で共通して使うような

195
00:11:26,820 --> 00:11:30,120
画像やローカリゼーションの文字列というものを

196
00:11:30,120 --> 00:11:33,919
LINEアプリの一番上のアプリケーションターゲット本体に

197
00:11:33,919 --> 00:11:36,399
埋め込むような形になっています

198
00:11:36,399 --> 00:11:39,139
分離された各モジュールっていうのは

199
00:11:39,139 --> 00:11:41,840
その共通系のリソースを扱いたいときには

200
00:11:41,840 --> 00:11:43,779
バンドルメインを通じて

201
00:11:43,779 --> 00:11:46,080
アプリ側に埋め込まれているであろうものに

202
00:11:46,080 --> 00:11:47,720
アクセスするって形になっています

203
00:11:47,720 --> 00:11:50,580
普段はこれで問題ないですね

204
00:11:50,580 --> 00:11:55,860
ただし直接的に文字列とかでアクセスするのは大変ですし

205
00:11:55,860 --> 00:11:56,960
過大安全ではないので

206
00:11:56,960 --> 00:11:59,919
コード生成したアクセサーコードっていうのが

207
00:11:59,919 --> 00:12:01,659
共通モジュールとして定義されて

208
00:12:01,659 --> 00:12:04,019
それを使ってアクセスするようになっています

209
00:12:04,019 --> 00:12:07,440
これプレビューの時に困るんですね

210
00:12:07,440 --> 00:12:12,159
プレビューの時はこのバンドルメインのアクセスがうまくいきません

211
00:12:12,159 --> 00:12:16,399
なぜかというとXcodeプレビューの実行環境っていうのは

212
00:12:16,399 --> 00:12:23,100
XCpreviewAgent.appっていうXcode側が用意しているアプリがホストになっていて

213
00:12:23,100 --> 00:12:29,840
そのアプリがプレビュー対象のモジュールをロードして表示するっていう形になっているんですね

214
00:12:29,840 --> 00:12:34,179
この時そのモジュール側からはバンドルメインにアクセスすると

215
00:12:34,179 --> 00:12:38,440
そのバンドルメインはこのXCプレビューエージェントドットアップを指してしまうんですね

216
00:12:38,440 --> 00:12:41,740
当然このXcode側が用意しているアプリに

217
00:12:41,740 --> 00:12:45,019
我々のLINEアプリ用のリソースというのは埋め込まれていないので

218
00:12:45,019 --> 00:12:48,179
バンドルメインでアクセスしてもリソースが見つからなくて

219
00:12:48,179 --> 00:12:52,299
当然フォースロードがしているとクラッシュしてしまいます

220
00:12:52,299 --> 00:12:59,659
ここでの解決策として我々はディベロップメントアセットというものを使うことにしました

221
00:12:59,659 --> 00:13:04,440
これを使ってアクセサーコードの用の共通モジュールに

222
00:13:04,440 --> 00:13:07,899
一時的にアプリの代わりにこっちにリソースを埋め込むということにしました

223
00:13:07,899 --> 00:13:12,220
Development Assetsというのはプレビュー用の画像リソースや

224
00:13:12,220 --> 00:13:17,419
Mockデータなどの製品版のアプリには含めないアセットやソースコードのパスを指定するという機能で

225
00:13:17,419 --> 00:13:19,100
これはアーカイブビルド

226
00:13:19,100 --> 00:13:22,399
Xコードビルドのアーカイブコマンドのアクションの時には

227
00:13:22,399 --> 00:13:24,700
ビルド対象から除外されるようになっています

228
00:13:24,700 --> 00:13:27,759
これはSwiftのソースコードもいけるしリソースもいけるし

229
00:13:27,759 --> 00:13:29,559
どちらも使えます

230
00:13:29,559 --> 00:13:34,840
Xコードの設定的にはこういったターゲットの設定のジェネラルの中に

231
00:13:34,840 --> 00:13:37,179
一番下にDevelopment Assetsという欄があって

232
00:13:37,179 --> 00:13:39,559
ここにパスを追加していくようになっていますし

233
00:13:39,559 --> 00:13:43,980
ビルド設定でいうとDevelopment Assets Passesという設定があります

234
00:13:43,980 --> 00:13:48,759
これを使ってこのShared UI Common Media Assetsという

235
00:13:48,759 --> 00:13:52,080
シェアードのアクセサーコードを定義しているモジュールの中に

236
00:13:52,080 --> 00:13:55,940
MediaX Assets 普段はアプリ本体に埋め込んでいるものを

237
00:13:55,940 --> 00:13:58,940
プレビューの時だけここに埋め込むということをしました

238
00:13:58,940 --> 00:14:05,019
さらに普段バンドルメインを使ってアクセスしている部分のバンドルの向き先を

239
00:14:05,019 --> 00:14:08,159
この自分のモジュールの中に

240
00:14:08,159 --> 00:14:13,580
自分のアクセサーコードのところのモジュールに差し替えるということをしています

241
00:14:13,580 --> 00:14:18,899
こうすることでプレビューの時でもアクセスしたいリソースを正しく見つけられるようになりました

242
00:14:18,899 --> 00:14:25,379
これがバンドルの向き先を変えるコードのイメージですね

243
00:14:25,379 --> 00:14:28,700
まずプレビューは基本デバッグでビルドになるので

244
00:14:28,700 --> 00:14:30,759
デバッグの時だけに絞り

245
00:14:30,759 --> 00:14:34,220
さらにプレビューの実行時にはですね

246
00:14:34,220 --> 00:14:38,919
Xcode running for previewsという環境変数が定義されているので

247
00:14:38,919 --> 00:14:41,759
これでプレビューで動いているかどうかというのが判断できます

248
00:14:41,759 --> 00:14:45,279
この時にちょっとトリッキーなんですが

249
00:14:45,279 --> 00:14:48,940
バンドル4クラスを使って得たパスに

250
00:14:48,940 --> 00:14:50,399
そこがですね

251
00:14:50,399 --> 00:14:53,799
プレビューの実行環境下だと

252
00:14:53,799 --> 00:14:58,399
このバンドル4クラスがデバッグiPhoneシミュレーターのパスを返すようになっていて

253
00:14:58,399 --> 00:14:59,179
不思議なんですが

254
00:14:59,179 --> 00:15:01,440
その中にはXcodeがビルドした

255
00:15:01,440 --> 00:15:04,480
このシェアドのコモンメディアセッツの

256
00:15:04,480 --> 00:15:06,480
フレームワークがビルドされた状態で

257
00:15:06,480 --> 00:15:07,139
存在しているので

258
00:15:07,139 --> 00:15:09,539
そのフレームワークのパスをバンドルとして使う

259
00:15:09,539 --> 00:15:10,960
というようになります

260
00:15:10,960 --> 00:15:12,980
そうするとこのバンドルの中にある

261
00:15:12,980 --> 00:15:16,340
アセッツにアクセスできるという

262
00:15:16,340 --> 00:15:17,299
寸法ですね

263
00:15:17,299 --> 00:15:21,340
これ基本的には問題なかったんですが

264
00:15:21,340 --> 00:15:22,460
一部のモジュールで

265
00:15:22,460 --> 00:15:24,720
直接このイメージネームドを使っていて

266
00:15:24,720 --> 00:15:26,720
バンドルの指定がちゃんとできていないので

267
00:15:26,720 --> 00:15:30,500
そのままだとバンドルメインにアクセスしてしまうものがあったりしたので

268
00:15:30,500 --> 00:15:32,659
そこをこの下に書いているような

269
00:15:32,659 --> 00:15:35,399
コード生成したアクセサを使うように書いて

270
00:15:35,399 --> 00:15:38,440
そうすることでちゃんとバンドルが差し替わるようになりました

271
00:15:38,440 --> 00:15:42,340
これでだいたいいい感じになったので

272
00:15:42,340 --> 00:15:45,360
現在の状況と今後の展望というのをお話しします

273
00:15:45,360 --> 00:15:51,039
改めてスタジオがスタジオクレームワークでの動作検証がうまくいきました

274
00:15:51,039 --> 00:15:55,600
そして本日紹介したような様々な下準備をすることで

275
00:15:55,600 --> 00:15:57,679
ある程度環境が整備できたので

276
00:15:57,679 --> 00:16:01,259
これを開発者 各開発チームに使ってもらうための

277
00:16:01,259 --> 00:16:02,759
ガイドラインを作成し

278
00:16:02,759 --> 00:16:05,940
それを各開発チームにアナウンスしました

279
00:16:05,940 --> 00:16:10,639
ここからは各開発チームに実際に使ってもらう

280
00:16:10,639 --> 00:16:12,860
導入をしてもらうというフェーズが始まっていて

281
00:16:12,860 --> 00:16:16,379
現時点で先ほど話したプレビュアブルターゲットというのが

282
00:16:16,379 --> 00:16:18,120
5件ほど定義されていて

283
00:16:18,120 --> 00:16:19,940
アナウンスから3件ほど増加

284
00:16:19,940 --> 00:16:23,500
ちょっとずつですが導入が始まっています

285
00:16:23,500 --> 00:16:27,740
今後の展望ですが

286
00:16:27,740 --> 00:16:29,799
今お話ししてきたように

287
00:16:29,799 --> 00:16:35,539
Xcode Previews自体がまだまだ安定していない部分というのも多いので

288
00:16:35,539 --> 00:16:43,159
Apple側でXcodeへの機能追加や安定性の改善がなされていくということを期待したいと思います

289
00:16:43,159 --> 00:16:48,320
また開発チームで実際にこれを導入していってもらうときに

290
00:16:48,320 --> 00:16:50,240
いろんな疑問や質問が生まれて

291
00:16:50,240 --> 00:16:54,600
場合によってはそのケース考慮が漏れていたねっていうことが

292
00:16:54,600 --> 00:16:56,019
いろいろ見つかってくると思うので

293
00:16:56,019 --> 00:16:58,960
そういった部分をどんどんガイドラインに反映して

294
00:16:58,960 --> 00:17:02,159
漏れがないドキュメントを作っていきたいと思っています

295
00:17:02,159 --> 00:17:06,539
さらに社内勉強会で発表して各チームに伝えたり

296
00:17:06,539 --> 00:17:10,200
ワークショップを実施して実際に一緒にやってみるなどして

297
00:17:10,200 --> 00:17:13,619
採用率を高めていければなというのもありますね

298
00:17:13,619 --> 00:17:18,279
またこれらの施策の効果測定として

299
00:17:18,279 --> 00:17:22,039
ちゃんと活用状況をトラッキングできるようにもしていきたいと考えています

300
00:17:22,039 --> 00:17:24,940
実際にプレビューをできるターゲットっていうのが

301
00:17:24,940 --> 00:17:27,099
どれだけ定義されているかっていうところであったり

302
00:17:27,099 --> 00:17:33,339
実際にプレビュー自体の数がどれだけ定義されているかっていうところを計測して

303
00:17:33,339 --> 00:17:36,200
その計測のためのツールを作ったり

304
00:17:36,200 --> 00:17:40,799
定期実行してモニタリングしていくってことができるようにしていきたいと考えています

305
00:17:40,799 --> 00:17:44,759
最後にもう一つ大きな玉があるんですが

306
00:17:44,759 --> 00:17:47,319
Mergeable Libraryの検討というものがあります

307
00:17:47,319 --> 00:17:51,339
ここまで見切った問題というのはですね

308
00:17:51,339 --> 00:17:56,240
大体がほとんどがスタティックフレームワークを使っているがゆえの問題でした

309
00:17:56,240 --> 00:17:59,940
そのために依存モジュールが多いとリンクが重くなって

310
00:17:59,940 --> 00:18:02,420
プレビューがちゃんと動かなくなったり

311
00:18:02,420 --> 00:18:07,319
それを避けるためにモジュールをプレビューアブルUIみたいな形で分離したり

312
00:18:07,319 --> 00:18:09,299
ということをしないといけなくなっていました

313
00:18:09,299 --> 00:18:12,799
なんですがマージャブルライブラリというものを導入するとですね

314
00:18:12,799 --> 00:18:14,400
詳細はちょっと省くんですが

315
00:18:14,400 --> 00:18:19,579
デバッグビルドではスタティックじゃなくてダイナミックリンクになるという挙動があるので

316
00:18:19,579 --> 00:18:26,680
そうするとこのプレビューをするときのリンクの重さというのが軽減できるんじゃないかなということを考えています

317
00:18:26,680 --> 00:18:29,240
マージャブライブラについて詳しくは

318
00:18:29,240 --> 00:18:33,759
2023年のiOS DCのGIGINETさんチームメイトなんですが

319
00:18:33,759 --> 00:18:39,160
GIGINETさんの発表マージャブライブラで高速なアプリ起動を実現しようもぜひ参照してください

320
00:18:39,160 --> 00:18:40,980
まとめです

321
00:18:40,980 --> 00:18:45,500
LINE iOSアプリという大規模なアプリの開発に

322
00:18:45,500 --> 00:18:47,839
Xcodeプレビューを導入し始めました

323
00:18:47,839 --> 00:18:51,980
どのような課題があるのかを丁寧に洗い出して

324
00:18:51,980 --> 00:18:54,000
それらを一つ一つ調査解決し

325
00:18:54,000 --> 00:18:56,880
Xcodeにもフィードバックしてバグを修正してもらいました

326
00:18:56,880 --> 00:19:00,359
スタディックレームワークでXcodeプレビューを活用するには

327
00:19:00,359 --> 00:19:01,900
まだまだハードルがいろいろあります

328
00:19:01,900 --> 00:19:03,980
プレビュー自体の動作安定性で

329
00:19:03,980 --> 00:19:06,460
これは私のエンジンがじっとコンパイル

330
00:19:06,460 --> 00:19:09,619
じっとでリンクしているとかっていうところは結構肝で

331
00:19:09,619 --> 00:19:11,420
そこが難しいところですね

332
00:19:11,420 --> 00:19:13,920
あとリソースバンドの扱いの難しさとかもありました

333
00:19:13,920 --> 00:19:16,680
その辺を軽減するために

334
00:19:16,680 --> 00:19:19,480
Mergeable Libraryが改善策になり得るので

335
00:19:19,480 --> 00:19:22,279
今後調査検討を進めていきたいと思っています

336
00:19:22,279 --> 00:19:27,779
まだまだ各チームに導入してもらうのがこれからなので

337
00:19:27,779 --> 00:19:31,059
俺たちの戦いはこれからだという気持ちで

338
00:19:31,059 --> 00:19:33,079
改善を進めていきたいと思います

339
00:19:33,079 --> 00:19:36,500
参考資料をいろいろと貼っていますが

340
00:19:36,500 --> 00:19:38,940
またスライドを共有するので

341
00:19:38,940 --> 00:19:40,640
見てみてください

342
00:19:40,640 --> 00:19:43,140
ということで皆さん楽しい

343
00:19:43,140 --> 00:19:44,839
X-Codeプレビュー生活を

344
00:19:44,839 --> 00:19:46,740
お過ごしいただければと思います

345
00:19:46,740 --> 00:19:49,000
発表は以上ですありがとうございました

346
00:19:49,000 --> 00:19:57,059
はい化粧さん発表ありがとうございました

347
00:19:57,059 --> 00:20:00,259
それではQ&Aに入りたいと思います

348
00:20:00,259 --> 00:20:03,079
コメントご感想やご質問のある方は

349
00:20:03,079 --> 00:20:04,500
挙手をお願いいたします

350
00:20:08,940 --> 00:20:11,859
いらっしゃらないですか

351
00:20:11,859 --> 00:20:18,079
満員でね人がいっぱいいらっしゃるんできっと手が上がると思ってるんですけど

352
00:20:18,079 --> 00:20:21,539
皆さん勇気を持って手を上げてくださる方はいませんか

353
00:20:21,539 --> 00:20:25,980
じゃあ前方の方お願いします

354
00:20:25,980 --> 00:20:32,920
はいすごく共有会発表でした

355
00:20:32,920 --> 00:20:33,920
ありがとうございます

