1
00:00:02,733 --> 00:00:03,720
大家好

2
00:00:03,720 --> 00:00:08,019
直接說吧，最近我以副業的身份

3
00:00:08,019 --> 00:00:10,900
參與了一款叫做 Calico 的 App 開發

4
00:00:10,900 --> 00:00:16,960
Calico 是一個以 Apple 平台上「最佳行事曆體驗」為目標的原生應用程式

5
00:00:16,960 --> 00:00:20,179
目前還在開發中，尚未發布

6
00:00:20,179 --> 00:00:24,260
我們每天都在為 iOS、macOS 等多個平台持續開發

7
00:00:26,233 --> 00:00:28,160
比較有特色的是我們的開發成員組合

8
00:00:28,160 --> 00:00:33,100
TimeLab 株式会社 CEO 保積先生擔任產品經理

9
00:00:33,100 --> 00:00:35,200
另外，有些人可能已經認識他

10
00:00:35,200 --> 00:00:40,859
在「Mac OS Native」讀書會的核心成員貫井先生擔任設計師

11
00:00:40,859 --> 00:00:46,759
同樣是「Mac OS Native」的核心成員 usagimaru 先生負責 macOS App 的開發

12
00:00:46,759 --> 00:00:50,859
而我負責 iOS App 的開發，像這樣的陣容在進行開發

13
00:00:50,859 --> 00:00:56,320
今天就以這個 Calico 為題，來談談客製化 UI

14
00:00:56,320 --> 00:01:00,280
在這場分享裡，我把客製化 UI 定義為

15
00:01:00,280 --> 00:01:04,579
以 Apple 提供的 API 所沒有的表現手法實作出來的 UI

16
00:01:04,579 --> 00:01:06,579
就稱作客製化 UI

17
00:01:07,133 --> 00:01:10,739
實際上 Calico 裡也用了很多這樣的客製化 UI

18
00:01:10,739 --> 00:01:13,319
這裡的細節不用特別看

19
00:01:13,319 --> 00:01:15,180
例如上面的導覽列

20
00:01:15,180 --> 00:01:19,060
以及下面的工具列等，都全部是客製化 UI

21
00:01:20,633 --> 00:01:23,859
做這些客製化 UI

22
00:01:23,859 --> 00:01:25,439
若只是把外觀做出來還好

23
00:01:25,439 --> 00:01:29,140
但要在真正意義上把客製化 UI做好，其實很難

24
00:01:29,140 --> 00:01:30,620
這就是我今天想談的重點

25
00:01:32,000 --> 00:01:34,739
接下來我會用 Calico 裡實際有實作的例子

26
00:01:34,739 --> 00:01:36,760
以及沒有實作的例子

27
00:01:36,760 --> 00:01:39,859
來介紹關於客製化 UI 的幾個面向

28
00:01:41,500 --> 00:01:43,540
第一個客製化 UI 的例子

29
00:01:43,540 --> 00:01:45,219
是導覽列的標題

30
00:01:45,219 --> 00:01:47,760
這個導覽列標題

31
00:01:47,760 --> 00:01:50,480
採用 Large 樣式的標題視覺

32
00:01:50,480 --> 00:01:52,859
往下捲動時會被往下拉動

33
00:01:52,859 --> 00:01:59,519
反過來往上捲時，會有點像 UITableView 或 UICollectionView 的 Section Header那樣的動作

34
00:02:00,666 --> 00:02:02,819
我從這裡開始詳細說明

35
00:02:02,819 --> 00:02:09,360
客製化 UI 的一個重點，是標題在動畫上的過場轉場

36
00:02:09,360 --> 00:02:13,780
請看看我現在標示的這個位置

37
00:02:13,780 --> 00:02:19,759
我把動畫稍微放慢了，可以看出有做轉場效果

38
00:02:19,759 --> 00:02:24,180
你會看到標題透過淡入淡出慢慢出現與消失

39
00:02:24,180 --> 00:02:27,099
標準的導覽列標題也是如此

40
00:02:27,099 --> 00:02:30,219
iOS 標準的導覽列標題同樣會套用淡入淡出

41
00:02:30,219 --> 00:02:32,800
讓熟悉標準 UI 的使用者

42
00:02:32,800 --> 00:02:35,919
面對我們這邊的 UI 不會覺得突兀或不自然

43
00:02:35,919 --> 00:02:38,620
所以特別加上了這個淡入淡出的轉場

44
00:02:38,620 --> 00:02:41,539
我們也很重視無障礙

45
00:02:41,539 --> 00:02:43,939
在這裡指的是降低透明度

46
00:02:43,939 --> 00:02:46,560
時就停用模糊效果這件事，來說明一下

47
00:02:46,560 --> 00:02:50,919
請注意看導覽列的背景

48
00:02:50,919 --> 00:02:53,280
在標準的導覽列裡

49
00:02:53,280 --> 00:02:55,240
背景會套上模糊

50
00:02:55,240 --> 00:02:58,719
後面的捲動視圖會隱約透出來

51
00:02:58,719 --> 00:03:01,939
因此在 Calico 裡，雖然這一切都是客製化 UI

52
00:03:01,939 --> 00:03:05,520
我們也刻意模仿標準行為加上模糊效果

53
00:03:05,520 --> 00:03:08,539
不過一般情況這樣就好

54
00:03:08,539 --> 00:03:10,560
但在無障礙設定中

55
00:03:10,560 --> 00:03:13,419
有一項「顯示與文字大小」

56
00:03:13,419 --> 00:03:15,060
就是這個

57
00:03:15,060 --> 00:03:16,620
開啟其中的降低透明度之後

58
00:03:16,620 --> 00:03:19,360
標準導覽列的背景

59
00:03:19,360 --> 00:03:20,479
原本會套用模糊的部分

60
00:03:20,479 --> 00:03:23,159
會改成不模糊的行為

61
00:03:23,159 --> 00:03:25,139
既然標準是這樣做

62
00:03:25,139 --> 00:03:26,740
Calico 作為客製化 UI

63
00:03:26,740 --> 00:03:28,780
也會去模仿導覽列的這個行為

64
00:03:28,780 --> 00:03:31,599
剛剛還有模糊的地方

65
00:03:31,599 --> 00:03:33,699
現在則完全沒有套用

66
00:03:33,699 --> 00:03:35,259
變成了純白背景

67
00:03:35,259 --> 00:03:36,379
應該看得出來

68
00:03:36,379 --> 00:03:38,680
左右一比較

69
00:03:38,680 --> 00:03:40,659
應該會更明顯

70
00:03:40,659 --> 00:03:43,159
透過這種作法，配合降低透明度的

71
00:03:43,159 --> 00:03:45,560
開關，就能讓導覽列是否模糊的差異

72
00:03:45,560 --> 00:03:46,659
更清楚

73
00:03:46,659 --> 00:03:50,360
這些在標準 API 下當然都會自動處理

74
00:03:50,360 --> 00:03:52,060
但如果是自己做客製化 UI

75
00:03:52,060 --> 00:03:54,539
就必須連這些細節都自己照顧好

76
00:03:54,539 --> 00:03:55,599
我們也是做到這個程度

77
00:03:55,599 --> 00:03:58,819
下一個例子是 Sheet

78
00:03:58,819 --> 00:04:02,259
在 Calico 裡為了探索與新建

79
00:04:02,259 --> 00:04:03,740
我們做了自訂的 Sheet

80
00:04:03,740 --> 00:04:06,900
乍看之下可能跟一般 Sheet 沒兩樣

81
00:04:06,900 --> 00:04:08,639
但當你往下滑時

82
00:04:08,639 --> 00:04:11,639
它會像郵件 App 那樣往下堆疊起來

83
00:04:11,639 --> 00:04:15,379
這種行為當然無法用標準 API 直接做到

84
00:04:15,379 --> 00:04:17,480
所以全都是客製化 UI

85
00:04:17,480 --> 00:04:21,540
後面的原始視圖會微微往後退並帶上陰影

86
00:04:21,540 --> 00:04:26,540
事件處理等這些細節也都是我們自行實作

87
00:04:26,540 --> 00:04:31,600
以這個 Sheet 的互動與無障礙來看

88
00:04:31,600 --> 00:04:33,300
我要介紹一下所謂的「把手」

89
00:04:33,300 --> 00:04:38,920
把手指的是這裡這個灰色膠囊狀的 UI 元件

90
00:04:38,920 --> 00:04:42,620
在 Human Interface Guidelines 的 Sheet 章節裡

91
00:04:42,620 --> 00:04:43,959
對把手是這樣說明的：

92
00:04:43,959 --> 00:04:46,860
點一下把手

93
00:04:46,860 --> 00:04:48,779
可以依序切換各個停駐位置

94
00:04:48,779 --> 00:04:51,220
把手也支援 VoiceOver

95
00:04:51,220 --> 00:04:54,079
使用者不用看畫面也能改變 Sheet 的大小

96
00:04:54,079 --> 00:04:57,259
既然 Human Interface Guidelines 這樣規定

97
00:04:57,259 --> 00:04:59,120
Calico 也就這麼實作

98
00:04:59,120 --> 00:05:01,259
剛剛點一下把手

99
00:05:01,259 --> 00:05:02,759
就會往下縮成較小的堆疊

100
00:05:02,759 --> 00:05:04,920
你應該能看出大小變化

101
00:05:04,920 --> 00:05:06,439
會有像這樣的切換

102
00:05:06,439 --> 00:05:11,379
很多 App 都會自己仿做一套自訂的 Sheet

103
00:05:11,379 --> 00:05:14,060
也因此各家都有自己的 Sheet 行為

104
00:05:14,060 --> 00:05:16,459
把手這種元件也很常見

105
00:05:16,459 --> 00:05:18,620
但很多情況下你點把手

106
00:05:18,620 --> 00:05:20,160
卻不會切換停駐位置

107
00:05:20,160 --> 00:05:24,939
從 Human Interface Guidelines 的角度看，這是不恰當的

108
00:05:24,939 --> 00:05:29,420
接著我再以 Calico 本來想做自訂 Sheet 的一個例子

109
00:05:29,420 --> 00:05:31,240
來介紹日期選擇器

110
00:05:31,240 --> 00:05:35,120
就是我們常見的日期時間挑選器

111
00:05:36,439 --> 00:05:40,399
在 Calico 裡，我們原本想把 Compact 模式下的文字字體

112
00:05:40,399 --> 00:05:43,860
改成更符合本 App 風格的樣式

113
00:05:43,860 --> 00:05:48,259
但其實要改這個字體的 API

114
00:05:48,259 --> 00:05:49,519
Apple 並沒有提供

115
00:05:49,519 --> 00:05:51,079
若我們硬要自己實作

116
00:05:51,079 --> 00:05:54,279
就得把前面那些會跳出選擇器的行為

117
00:05:54,279 --> 00:05:56,540
全部仿做成客製化 UI

118
00:05:56,540 --> 00:05:59,439
也許用 Popover 之類的能辦到

119
00:05:59,439 --> 00:06:02,839
但實際行為細節很難完全掌握

120
00:06:02,839 --> 00:06:04,839
所以我們先把這個日期選擇器到底怎麼運作

121
00:06:04,839 --> 00:06:05,980
仔細地看了一遍

122
00:06:05,980 --> 00:06:11,160
先看最常見的：用手指點一下

123
00:06:11,160 --> 00:06:16,199
它會彈出來，讓你選擇時間

124
00:06:16,199 --> 00:06:22,339
再看在 iPadOS 上用觸控板與鍵盤的情況

125
00:06:22,339 --> 00:06:25,160
你可以用觸控板移動選取

126
00:06:25,160 --> 00:06:29,540
也能用鍵盤輸入文字直接指定時間

127
00:06:29,540 --> 00:06:34,839
你也能分別選擇「時」與「分」，點一下就會跳出對應的選擇器

128
00:06:34,839 --> 00:06:38,579
或只輸入分鐘，這些都支援

129
00:06:38,579 --> 00:06:42,839
更麻煩的是，地區設定為美國時

130
00:06:42,839 --> 00:06:45,639
在時間前面會有

131
00:06:45,639 --> 00:06:46,480
抱歉我說錯了

132
00:06:46,480 --> 00:06:49,639
會多出上午與下午的資訊

133
00:06:49,639 --> 00:06:52,420
這個也可以被選取

134
00:06:52,420 --> 00:06:54,540
用鍵盤上下方向鍵等

135
00:06:54,540 --> 00:06:58,079
在上午與下午之間切換，並只輸入時間

136
00:06:58,079 --> 00:07:00,920
再把語言切成英文看看

137
00:07:00,920 --> 00:07:05,120
剛剛的 AM/PM 會改顯示在時間的後面

138
00:07:05,120 --> 00:07:10,579
也就是說，還得依語言改變 UI 的顯示順序

139
00:07:10,579 --> 00:07:13,819
最後看 Apple Pencil 的情境

140
00:07:13,819 --> 00:07:18,319
Apple Pencil 透過 Scribble 功能，可以直接手寫輸入時間、切換 AM/PM

141
00:07:18,319 --> 00:07:20,439
也就是能用手寫來輸入

142
00:07:20,439 --> 00:07:24,879
標準的日期選擇器把這些全都支援好了

143
00:07:24,879 --> 00:07:29,379
如果要自己做，就得把以上全部行為都包辦

144
00:07:29,379 --> 00:07:32,819
標準 API 會自動處理這一切

145
00:07:32,819 --> 00:07:34,220
使用者的期待值

146
00:07:34,220 --> 00:07:35,740
也就是這個等級

147
00:07:35,740 --> 00:07:38,759
以上是我目前掌握到的範圍

148
00:07:38,759 --> 00:07:41,579
手動輸入這塊應該還有不少複雜行為

149
00:07:41,579 --> 00:07:44,000
尤其某些地區與語言的組合時

150
00:07:44,000 --> 00:07:46,040
邊界情況應該很多

151
00:07:46,040 --> 00:07:48,620
要把這些全部顧到成本太高

152
00:07:48,620 --> 00:07:49,720
我們其實不想這麼做

153
00:07:49,720 --> 00:07:52,100
但如果只是想把字體稍微換一下

154
00:07:52,100 --> 00:07:54,000
為了這點小需求

155
00:07:54,000 --> 00:07:56,600
卻反而讓使用者體驗打折

156
00:07:56,600 --> 00:07:58,720
這顯然不理想

157
00:07:58,720 --> 00:08:00,879
我們在 Calico 雖然試做過自訂的 picker

158
00:08:00,879 --> 00:08:02,639
但未解問題還有很多、修起來成本過高

159
00:08:02,639 --> 00:08:04,800
因此最後決定直接使用標準 API

160
00:08:04,800 --> 00:08:06,120
以這種方式來滿足需求

161
00:08:06,120 --> 00:08:08,639
也就是放棄把這部分做成客製化 UI

162
00:08:08,639 --> 00:08:12,920
接下來談談在製作客製化 UI 時

163
00:08:12,920 --> 00:08:15,540
雖然剛剛舉了幾個具體例子

164
00:08:15,540 --> 00:08:17,959
但到底該檢查哪些重點

165
00:08:17,959 --> 00:08:19,139
我來說明一下

166
00:08:19,139 --> 00:08:22,199
粗略列一下有無障礙、

167
00:08:22,199 --> 00:08:24,240
動畫、

168
00:08:24,240 --> 00:08:25,660
手勢、互動、效能

169
00:08:25,660 --> 00:08:27,100
等等很多面向

170
00:08:27,100 --> 00:08:29,819
先從無障礙看起

171
00:08:29,819 --> 00:08:33,980
無障礙裡的設定選項其實很多

172
00:08:33,980 --> 00:08:36,460
我覺得開發者特別要注意的有：

173
00:08:36,460 --> 00:08:40,279
VoiceOver、Dynamic Type、顯示按鈕形狀、開關標籤、降低透明度

174
00:08:40,279 --> 00:08:42,539
還有減少視差效果等等

175
00:08:42,539 --> 00:08:44,259
當然除了這些還有很多

176
00:08:44,259 --> 00:08:48,399
請逐項檢查 iPadOS 的對應與各種無障礙設定

177
00:08:48,399 --> 00:08:51,500
而且隨著 OS 升級會持續新增

178
00:08:51,500 --> 00:08:53,379
不要只看一次就覺得夠了

179
00:08:53,379 --> 00:08:56,440
建議每次 OS 版本更新都再檢查一遍

180
00:08:56,440 --> 00:09:01,639
在這些當中，我想稍微深入談一下 Dynamic Type

181
00:09:01,639 --> 00:09:06,600
Dynamic Type 算是近年比較受到重視的功能

182
00:09:06,600 --> 00:09:11,299
它是讓使用者自行調整字體大小的 OS 功能

183
00:09:11,299 --> 00:09:15,480
例如預設的 UI 字級大概是這樣

184
00:09:15,480 --> 00:09:19,000
喜歡小字的人可以調得更小

185
00:09:19,000 --> 00:09:21,840
視力不好或想要更大字的人

186
00:09:21,840 --> 00:09:23,980
也能把字放大

187
00:09:23,980 --> 00:09:26,159
要支援這個功能

188
00:09:26,159 --> 00:09:27,879
不要把字體大小硬編碼

189
00:09:27,879 --> 00:09:29,340
這點近年來應該有逐步改善

190
00:09:29,340 --> 00:09:32,240
而是要依據 Dynamic Type 的

191
00:09:32,240 --> 00:09:34,720
設定去讀取並調整

192
00:09:34,720 --> 00:09:37,679
或直接使用 OS 的標準文字樣式

193
00:09:37,679 --> 00:09:39,159
都需要做對應

194
00:09:39,159 --> 00:09:42,120
不過

195
00:09:42,120 --> 00:09:44,460
能自動跟著字級變更就夠了嗎？

196
00:09:44,460 --> 00:09:45,919
其實不然

197
00:09:45,919 --> 00:09:48,179
以這樣的 UI 為例

198
00:09:48,179 --> 00:09:50,700
如果只是單純把字級放大

199
00:09:50,700 --> 00:09:52,919
而沒有像 OS 一樣做完整的處理

200
00:09:52,919 --> 00:09:56,200
像這裡標題被截斷

201
00:09:56,200 --> 00:09:57,899
關鍵資訊就讀不到

202
00:09:57,899 --> 00:10:01,200
左邊也出現莫名的空白

203
00:10:01,200 --> 00:10:03,659
整體看起來都有問題

204
00:10:03,659 --> 00:10:08,620
遇到字級非常大的情況時

205
00:10:08,620 --> 00:10:11,519
就必須按需要調整版面配置

206
00:10:11,519 --> 00:10:12,879
往往是必要的

207
00:10:12,879 --> 00:10:17,139
為了對應，先處理開頭那塊空白

208
00:10:17,139 --> 00:10:19,179
把說明文字

209
00:10:19,179 --> 00:10:21,139
往左移來填補，等等

210
00:10:21,139 --> 00:10:25,620
再來是右上角的日期文字

211
00:10:25,620 --> 00:10:27,539
把它移到下方

212
00:10:27,539 --> 00:10:30,559
日期標籤往下之後

213
00:10:30,559 --> 00:10:32,480
標題右側就會騰出空間

214
00:10:32,480 --> 00:10:34,279
標題內容也更容易被完整顯示

215
00:10:34,279 --> 00:10:37,960
像這樣依字級大小

216
00:10:37,960 --> 00:10:40,000
彈性調整版面

217
00:10:40,000 --> 00:10:42,799
才能確保使用者讀得到需要的資訊

218
00:10:42,799 --> 00:10:44,799
以 Apple 的內建 App 來說

219
00:10:44,799 --> 00:10:47,279
像 Music、Mail、Messages 等

220
00:10:47,279 --> 00:10:49,039
都會針對不同字級

221
00:10:49,139 --> 00:10:50,259
大幅調整版面配置

222
00:10:50,259 --> 00:10:52,720
大家可以在會後去觀察看看

223
00:10:52,720 --> 00:10:57,220
但也不是每個元件都會配合放大顯示所有文字；

224
00:10:57,220 --> 00:10:58,059
有些是固定不變的

225
00:10:58,059 --> 00:11:01,820
例如分頁列上的文字大小

226
00:11:01,820 --> 00:11:05,240
即使調整 Dynamic Type 也不會變大

227
00:11:05,240 --> 00:11:08,720
那使用者就沒辦法讀到這些文字嗎？

228
00:11:08,720 --> 00:11:10,120
其實還有別的方法

229
00:11:10,120 --> 00:11:13,980
長按想看的那個分頁項目

230
00:11:13,980 --> 00:11:16,759
畫面中央就會出現

231
00:11:16,759 --> 00:11:18,879
該分頁的標籤與圖示的放大預覽

232
00:11:18,879 --> 00:11:19,500
讓你清楚看見

233
00:11:19,500 --> 00:11:23,919
這就是 iOS 的「大型內容檢視器（Large Content Viewer）」功能

234
00:11:23,919 --> 00:11:26,620
當受到 UI 限制無法把文字放大時

235
00:11:26,620 --> 00:11:28,720
透過長按

236
00:11:28,720 --> 00:11:34,679
可以把標籤和圖片在畫面中央放大顯示

237
00:11:34,679 --> 00:11:35,940
是一項無障礙功能

238
00:11:35,940 --> 00:11:38,220
在標準 UI 裡，像分頁列、

239
00:11:38,220 --> 00:11:41,360
導覽列的文字與圖像都支援這功能；

240
00:11:41,360 --> 00:11:44,059
如果你要做客製化 UI

241
00:11:44,059 --> 00:11:47,460
也要考慮是否要把這部分一併支援

242
00:11:47,460 --> 00:11:52,320
順帶一提一個小技巧

243
00:11:52,320 --> 00:11:56,019
把「文字大小」加到控制中心

244
00:11:56,019 --> 00:11:59,220
就能隨時快速調整 Dynamic Type 設定

245
00:11:59,220 --> 00:12:02,940
很推薦這樣設定，標準 UI 也會自動支援這些項目

246
00:12:02,940 --> 00:12:05,740
把字級調得超大或超小

247
00:12:05,740 --> 00:12:07,620
去檢查各個 App 的行為

248
00:12:07,620 --> 00:12:12,000
WWDC 的場次「Get Started with Dynamic Type」

249
00:12:12,000 --> 00:12:14,820
也有更深入的說明

250
00:12:14,820 --> 00:12:17,740
建議大家之後找來看看

251
00:12:17,740 --> 00:12:22,200
接下來看看 iPadOS 需要檢查哪些重點

252
00:12:22,200 --> 00:12:24,600
我習慣隨時把這些放在心上：

253
00:12:24,600 --> 00:12:26,059
視窗大小調整、

254
00:12:26,059 --> 00:12:29,320
以及鍵盤、滑鼠、觸控板、Apple Pencil 等

255
00:12:29,320 --> 00:12:31,399
先說視窗調整大小

256
00:12:31,399 --> 00:12:34,580
無論視窗多大多小，都能彈性排出合適的版面嗎？

257
00:12:34,580 --> 00:12:36,120
請務必仔細檢查

258
00:12:36,120 --> 00:12:38,080
常見的情況是

259
00:12:38,080 --> 00:12:39,019
錯誤的作法會

260
00:12:39,019 --> 00:12:40,879
把某次的 view 尺寸快取起來

261
00:12:40,879 --> 00:12:44,019
結果和當前視窗大小不一致

262
00:12:44,019 --> 00:12:49,240
這是在 iPadOS 特別需要注意的

263
00:12:49,240 --> 00:12:57,980
再來是鍵盤操作：僅用鍵盤是否也能相當順暢地操作你的 App？請確認

264
00:12:57,980 --> 00:13:05,279
尤其鍵盤快捷鍵在 iPadOS 26 之後更受重視，能支援就盡量支援

265
00:13:05,279 --> 00:13:08,460
我偶爾會看到有 App 版面在這裡就崩掉

266
00:13:08,460 --> 00:13:11,980
也請檢查一下 hover 效果是否適當

267
00:13:12,279 --> 00:13:22,820
所謂 hover 效果，是指滑鼠游標靠近按鈕時，按鈕會微微浮起或產生回饋的那種互動；也請確認是否設定得當

268
00:13:22,820 --> 00:13:30,799
這些都處理好的話，未來要移植到 visionOS 時，關於滑鼠、觸控板、Apple Pencil 的部分也能派上用場

269
00:13:30,799 --> 00:13:33,639
最後是 Apple Pencil

270
00:13:33,639 --> 00:13:39,080
Apple Pencil 有前面提到的 Scribble 手寫輸入功能

271
00:13:39,440 --> 00:13:43,580
請確認 Scribble 是否能正常運作

272
00:13:43,580 --> 00:13:48,399
特別要注意「看起來像文字欄位、其實是按鈕」這種元件

273
00:13:48,399 --> 00:13:52,460
很多 App 都會放，因為看起來更容易操作

274
00:13:52,460 --> 00:13:56,379
但在 iPadOS 上拿著 Apple Pencil 的使用者，直覺就會想在上面直接寫字

275
00:13:56,379 --> 00:13:59,379
可那其實是按鈕，不是文字欄位

276
00:13:59,379 --> 00:14:01,779
結果寫不進去

277
00:14:01,779 --> 00:14:04,519
造成預期與實際行為不一致

278
00:14:04,519 --> 00:14:07,500
這種情況最好調整設計會比較好

279
00:14:08,919 --> 00:14:14,820
其他項目也都同樣重要；凡是乍看像文字欄位的元件，都要特別留意

280
00:14:14,820 --> 00:14:28,820
我不是說一定得把上述全部都做到；而是要清楚地意識到，若基於商業判斷選擇不支援，或是因為資源不足暫時無法支援，也要有這樣的認知

281
00:14:29,220 --> 00:14:42,039
要面對這些取捨背後可能會讓某些使用者受挫這件事；今天時間有限無法細講，但若能在空檔逐步補上，持續改善會更好

282
00:14:42,039 --> 00:14:46,519
最糟的是沒發現問題就直接上線，之後還放著不管

283
00:14:46,519 --> 00:14:52,980
身為工程師，必須清楚掌握哪些已支援、哪些尚未支援

284
00:14:52,980 --> 00:14:56,460
接下來，談談該不該做客製化 UI

285
00:14:57,299 --> 00:15:01,860
也就是在充分認識前提下，什麼情況該做、什麼情況不該做

286
00:15:01,860 --> 00:15:07,340
首先，像導覽相關的控制元件難度非常高，應盡量避免自製

287
00:15:07,340 --> 00:15:12,100
所謂導覽，包含 Tab Bar、Split View、Navigation Controller 等

288
00:15:12,100 --> 00:15:17,460
另外，像剛才提到的日期選擇器或文字欄位這類控制項，難度也非常高

289
00:15:17,460 --> 00:15:23,480
相對地，把現成控制項組合起來做出客製化 UI，在多數情況下比較不容易出問題

290
00:15:23,480 --> 00:15:25,899
這部分就可以考慮去做

291
00:15:25,899 --> 00:15:30,039
其次，若只是為了和 Android 統一

292
00:15:30,039 --> 00:15:33,220
去做那種高難度的自製導覽或控制項

293
00:15:33,220 --> 00:15:34,399
尤其應該避免

294
00:15:34,399 --> 00:15:37,500
那只會增加設計維運成本

295
00:15:37,500 --> 00:15:40,139
對工程師與使用者而言，基本上都不值得

296
00:15:40,139 --> 00:15:44,799
至於僅為了「統一元件外觀」而做的客製化 UI，也不建議

297
00:15:44,799 --> 00:15:46,039
應該優先用標準 UI

298
00:15:46,039 --> 00:15:51,500
最後，還要綜合評估團隊的技術力、協作成熟度、對平台的理解

299
00:15:51,500 --> 00:15:55,779
再決定要不要做

300
00:15:55,779 --> 00:15:59,960
我特別想聚焦在「協作成熟度」

301
00:15:59,960 --> 00:16:05,799
一般來說，靜態設計由設計師負責

302
00:16:05,799 --> 00:16:09,220
工程師則多半負責實作

303
00:16:09,220 --> 00:16:13,700
但靜態設計與實作之間存在落差

304
00:16:13,700 --> 00:16:18,539
包含動畫、輸入裝置、互動、效能、無障礙、本地化

305
00:16:18,539 --> 00:16:22,720
這些都需要充分考量後落到實作

306
00:16:22,720 --> 00:16:28,580
但在多數團隊裡，UI 設計師未必會明確指定，例如動畫該多長、

307
00:16:28,580 --> 00:16:30,940
要不要有彈性、初速怎麼定

308
00:16:30,940 --> 00:16:33,600
動畫曲線用哪一種

309
00:16:33,600 --> 00:16:38,659
甚至動畫進行時要不要接受互動，等等細節很多

310
00:16:38,659 --> 00:16:41,399
多數看起來應該由設計師決定

311
00:16:41,399 --> 00:16:43,899
但像「動畫期間是否可互動」這類

312
00:16:43,899 --> 00:16:46,779
往往會落到工程師自己拍板，容易被遺漏

313
00:16:46,779 --> 00:16:50,240
以剛才的 Dynamic Type 為例

314
00:16:50,240 --> 00:16:51,960
樣式要怎麼定？

315
00:16:51,960 --> 00:16:53,799
字級變大時要不要換版面？

316
00:16:53,799 --> 00:16:55,500
Large Content Viewer 要不要支援？

317
00:16:55,500 --> 00:16:57,139
這些都需要一一確認

318
00:16:57,139 --> 00:17:00,980
設計端可能會覺得「你們就把體驗弄好吧」

319
00:17:00,980 --> 00:17:04,859
工程端則會希望這些設計規範能事先定清楚

320
00:17:04,859 --> 00:17:08,460
因此這些資訊最好主動補齊、彼此照應

321
00:17:08,460 --> 00:17:10,440
像無障礙這塊應該由誰負責

322
00:17:10,440 --> 00:17:12,420
是工程師還是設計師，界線其實很模糊

323
00:17:12,420 --> 00:17:15,759
遇到這種情況，我覺得不要把界線劃得太死

324
00:17:15,759 --> 00:17:17,539
我個人認為這點很重要

325
00:17:17,539 --> 00:17:20,059
在 UI 設計師與工程師之間

326
00:17:20,059 --> 00:17:22,039
靜態設計以外的那些資訊

327
00:17:22,039 --> 00:17:23,819
就像剛才說的很容易被遺漏

328
00:17:23,819 --> 00:17:25,839
我個人認為，像 Figma 這類

329
00:17:25,839 --> 00:17:27,519
以「畫面」為基礎在溝通的做法

330
00:17:27,519 --> 00:17:28,759
帶來了一些副作用

331
00:17:28,759 --> 00:17:30,819
例如責任歸屬就容易變得模糊

332
00:17:30,819 --> 00:17:36,680
因此工程師與設計師需要主動、互相把這些落地並補齊

333
00:17:36,680 --> 00:17:41,140
另外，對於剛才提到難度很高的各種控制項與導覽元件

334
00:17:41,140 --> 00:17:43,579
一旦決定要做客製化 UI 的時候

335
00:17:43,579 --> 00:17:46,940
就更需要緊密協作與彼此理解

336
00:17:46,940 --> 00:17:49,940
也就是說，工程師要理解設計師的觀點，設計師也要理解工程師的觀點

337
00:17:49,940 --> 00:17:52,700
那些被遺漏、懸在那裡的資訊

338
00:17:52,700 --> 00:17:55,779
在著手做客製化 UI 的時候

339
00:17:55,779 --> 00:17:59,920
不要用 UI 設計師、工程師這類角色去劃清界線

340
00:17:59,920 --> 00:18:05,559
而是以同樣的創作者身分，不斷協作把設計落實到實作上，這點很重要

341
00:18:05,559 --> 00:18:08,740
當然，最後在設計上的責任還是由設計師負擔

342
00:18:08,740 --> 00:18:10,720
工程實作上的責任則是工程師

343
00:18:10,720 --> 00:18:13,900
但彼此都需要對對方的領域有明確的理解

344
00:18:13,900 --> 00:18:17,799
因此我認為積極投入、一起面對非常重要

345
00:18:17,799 --> 00:18:23,119
話說回來，現在我們在 UI 上正處於一個時代轉折點

346
00:18:23,119 --> 00:18:25,440
沒錯，就是所謂的 Liquid Glass

347
00:18:25,440 --> 00:18:28,599
在 Calico 裡，就像剛才提到的

348
00:18:28,599 --> 00:18:30,480
有自訂的導覽列

349
00:18:30,480 --> 00:18:33,680
也有自訂工具列等，存在大量的客製化 UI

350
00:18:33,680 --> 00:18:37,259
與其硬生生劃清界線，不如以「漸層」的心態、站在同樣的創作者立場

351
00:18:37,259 --> 00:18:41,839
當從 iOS 18 升到 iOS 26 的時候

352
00:18:41,839 --> 00:18:43,980
它們並不會自動跟上變化

353
00:18:43,980 --> 00:18:47,740
就算像剛才講的那些我們苦心打造的客製化 UI

354
00:18:47,740 --> 00:18:50,599
在設計上看起來也不太符合 iOS 26 的風格

355
00:18:50,599 --> 00:18:54,440
因此，Calico 決定把那一整套先全部放掉

356
00:18:54,440 --> 00:18:55,599
從零開始重新設計 UI

357
00:18:55,599 --> 00:18:59,160
當然，這些依舊是客製化 UI

358
00:18:59,160 --> 00:19:00,960
要是你問「不會很辛苦嗎？」

359
00:19:00,960 --> 00:19:01,740
對，真的很辛苦

360
00:19:01,740 --> 00:19:03,440
但我認為，做客製化 UI

361
00:19:03,440 --> 00:19:05,119
本來就是要承擔這樣的代價

362
00:19:05,119 --> 00:19:07,259
實作客製化 UI 很辛苦

363
00:19:07,259 --> 00:19:08,539
維護也很辛苦

364
00:19:08,539 --> 00:19:10,599
而且還可能哪天突然就得終止

365
00:19:10,599 --> 00:19:14,099
幾乎沒有哪一刻會是輕鬆的

366
00:19:14,099 --> 00:19:16,839
所以在決定要做客製化 UI 的時候

367
00:19:16,839 --> 00:19:19,700
就必須做好相應的覺悟與投入

368
00:19:19,700 --> 00:19:22,579
回到標題，做個總結

369
00:19:22,579 --> 00:19:24,539
關於做客製化 UI 所需要的覺悟

370
00:19:24,539 --> 00:19:27,740
當你選擇做客製化 UI 時，原本標準 UI 會幫你處理的

371
00:19:27,740 --> 00:19:31,500
無障礙、動畫、跨平台支援等各種事項

372
00:19:31,500 --> 00:19:36,420
從頭到尾都得自己承擔，你需要有全盤照顧的覺悟

373
00:19:36,420 --> 00:19:41,619
UI 設計師與工程師之間，也需要比以往更強的覺悟與承擔

374
00:19:41,619 --> 00:19:46,980
此外，即便做出來後也會很辛苦，而且可能會突然走到終點，這點也得接受

375
00:19:46,980 --> 00:19:48,660
需要有這樣的心理準備

376
00:19:49,660 --> 00:19:58,019
這場分享沒有刻意談技術細節，是希望能成為工程師與設計師討論客製化 UI 的一個起點

377
00:19:58,019 --> 00:20:03,539
也希望大家把這些帶回團隊，並做好為客製化 UI 進行密切協作的覺悟

378
00:20:03,539 --> 00:20:06,839
以上，謝謝各位聆聽

379
00:20:06,839 --> 00:20:10,200
在結束前，抱歉讓我插播一則宣傳

380
00:20:10,200 --> 00:20:15,480
剛才提到的 Calico，目前正全力朝 TestFlight 準備中

381
00:20:15,740 --> 00:20:19,920
在 https://calicocat.app 有一個表單

382
00:20:19,920 --> 00:20:23,960
填寫後，等 TestFlight 準備就緒，我們會通知大家

383
00:20:23,960 --> 00:20:26,740
也希望能藉此成為大家參與的契機

384
00:20:26,740 --> 00:20:29,900
如果你對我們把 UI 做得多細有興趣

385
00:20:29,900 --> 00:20:31,640
請務必去登記一下

386
00:20:31,640 --> 00:20:35,200
另外，追蹤我們的 X 的朋友，我們會發送 Calico 貼紙

387
00:20:35,200 --> 00:20:37,519
歡迎追蹤並跟我們打聲招呼

388
00:20:37,519 --> 00:20:41,500
我今天有帶貼紙，隨時可以來找我拿

389
00:20:41,500 --> 00:20:43,460
這次真的到此結束，謝謝各位

390
00:20:48,668 --> 00:20:53,599
謝謝精彩的分享，那接下來進入 Q&A

391
00:20:53,599 --> 00:20:56,839
有意見或提問的朋友，請舉手示意

392
00:21:13,460 --> 00:21:25,180
謝謝精彩的分享。我有個問題：您剛才提到 UI 設計師與工程師需要協力推進

393
00:21:25,180 --> 00:21:41,359
那在向設計師說明 Apple 平台特有的事情（例如 Dynamic Type 等）時

394
00:21:41,359 --> 00:21:45,740
有沒有什麼好用的參考資料可以提供呢？

395
00:21:45,740 --> 00:21:50,619
我認為最重要的，還是閱讀 Human Interface Guidelines

396
00:21:50,619 --> 00:21:52,660
裡面會說明這個平台有哪些規範

397
00:21:52,660 --> 00:21:53,700
例如 Dynamic Type

398
00:21:53,700 --> 00:21:56,900
或 Apple 發布的各種指南與規範

399
00:21:56,900 --> 00:21:58,660
沒錯，像 Human Interface Guidelines

400
00:21:58,660 --> 00:22:02,019
還有針對設計的 WWDC 場次影片

401
00:22:02,019 --> 00:22:04,619
設計師平常未必會主動關注

402
00:22:04,619 --> 00:22:06,359
並即時追蹤這些內容

403
00:22:06,359 --> 00:22:07,559
這種情況並不多見

404
00:22:07,559 --> 00:22:12,380
所以挑一些設計師也容易消化理解的內容

405
00:22:12,380 --> 00:22:14,059
大概就是這樣的方向吧

406
00:22:14,059 --> 00:22:16,440
是，先從 Human Interface...

407
00:22:16,440 --> 00:22:19,480
至於更具體、涵蓋更廣的內容

408
00:22:19,480 --> 00:22:24,200
我覺得未必有太多通用的整理資料

409
00:22:24,200 --> 00:22:28,180
仍然需要在製作過程中不斷對話

410
00:22:28,180 --> 00:22:33,420
主動說明哪些地方需要哪些考量或對應

411
00:22:33,420 --> 00:22:37,500
並積極分享，這樣比較實際

412
00:22:37,500 --> 00:22:39,980
此外，既然我們正在做這類設計

413
00:22:39,980 --> 00:22:44,059
就應該一起摸索出最合適的折衷點

414
00:22:44,059 --> 00:22:49,099
讓整個團隊在過程中成長

415
00:22:49,099 --> 00:22:50,500
謝謝

416
00:22:50,500 --> 00:22:54,640
謝謝

417
00:22:54,640 --> 00:22:57,940
還有沒有其他問題？

418
00:23:05,612 --> 00:23:08,339
沒有嗎？

419
00:23:11,260 --> 00:23:14,059
中間那位，麻煩您

420
00:23:17,147 --> 00:23:20,059
謝謝您的分享，非常有趣

421
00:23:20,059 --> 00:23:24,740
關於文字的 Dynamic Type

422
00:23:24,740 --> 00:23:28,500
剛才提到會依字級大小改變設計

423
00:23:28,500 --> 00:23:31,019
雖說 Apple 也這麼做

424
00:23:31,019 --> 00:23:34,779
但一般 App 要做到其實成本不低

425
00:23:34,779 --> 00:23:39,180
我想知道你們內部是如何討論、最後決定要做的

426
00:23:39,180 --> 00:23:41,079
第二個是，我覺得這點很有意思

427
00:23:41,079 --> 00:23:45,160
我想問的是，剛才提到的設計系統

428
00:23:45,160 --> 00:23:47,779
是否有由設計師事先準備？

429
00:23:47,779 --> 00:23:51,559
先就這點跟大家說聲抱歉

430
00:23:51,559 --> 00:23:54,059
正如我先前提到的

431
00:23:54,059 --> 00:23:57,660
Calico 其實也還沒有把這一切做到完美

432
00:23:57,660 --> 00:23:58,960
並非如此

433
00:23:58,960 --> 00:24:00,900
還有不少地方尚未對應到位

434
00:24:00,900 --> 00:24:01,940
像剛才舉的那些

435
00:24:01,940 --> 00:24:03,460
例如 Dynamic Type

436
00:24:03,460 --> 00:24:05,859
會依不同字級去調整設計

437
00:24:05,859 --> 00:24:07,079
我們把它當作一個持續推進的主題

438
00:24:07,079 --> 00:24:09,099
至於大家問的這部分

439
00:24:09,099 --> 00:24:12,339
是否有一套完整的設計系統？

440
00:24:12,339 --> 00:24:13,640
我理解你的問題是這樣

441
00:24:13,640 --> 00:24:15,119
如果我沒記錯

442
00:24:15,119 --> 00:24:16,740
在 Human Interface Guidelines 的

443
00:24:16,740 --> 00:24:18,839
Typography 或相關章節裡

444
00:24:18,839 --> 00:24:21,920
都有針對不同字級

445
00:24:21,920 --> 00:24:23,599
對應到大約哪些字體大小等

446
00:24:23,599 --> 00:24:25,319
我們還有一些地方沒做到

447
00:24:25,319 --> 00:24:27,380
但我們很清楚必須補齊

448
00:24:27,380 --> 00:24:30,099
我沒有細看 Sketch 或 Figma 的檔案

449
00:24:30,099 --> 00:24:32,460
推測那邊應該也有一定程度的覆蓋

450
00:24:32,460 --> 00:24:34,359
大致是這樣的預期

451
00:24:34,359 --> 00:24:35,259
謝謝

452
00:24:35,259 --> 00:24:38,799
謝謝

453
00:24:38,799 --> 00:24:40,579
還有其他意見或提問嗎？

454
00:24:49,180 --> 00:24:54,940
用 SwiftUI 來做自訂的 View

455
00:24:54,940 --> 00:24:57,519
給人的印象是限制相當多

456
00:24:57,519 --> 00:25:02,819
所以你們實際是用 UIKit 來實作嗎？

457
00:25:02,819 --> 00:25:03,720
是的，沒錯

458
00:25:03,720 --> 00:25:05,279
用 SwiftUI 要偏離標準

459
00:25:05,279 --> 00:25:07,519
只要稍微偏離標準做法

460
00:25:07,519 --> 00:25:12,220
就會變得相當難做

461
00:25:12,220 --> 00:25:13,299
謝謝

462
00:25:13,299 --> 00:25:18,279
謝謝

463
00:25:18,279 --> 00:25:20,619
還有其他意見或問題的嗎？

464
00:25:20,619 --> 00:25:21,720
請舉手

465
00:25:21,720 --> 00:25:25,299
那就先到這裡可以嗎？

466
00:25:25,299 --> 00:25:29,380
好，那我們就結束 Q&A，並告一段落

467
00:25:33,380 --> 00:25:34,759
接下來是回饋時間

468
00:25:34,759 --> 00:25:40,359
請在接下來的一分鐘提供回饋

469
00:25:40,359 --> 00:25:43,339
掃描投影幕上的 QR Code

470
00:25:43,339 --> 00:25:45,380
請給我們回饋

471
00:26:35,861 --> 00:26:44,640
接下來還有問題的話請到 Ask the Speaker 區域

472
00:26:45,380 --> 00:26:48,619
那就先這樣，謝謝松木先生

473
00:26:48,619 --> 00:26:49,180
謝謝

474
00:26:49,180 --> 00:26:49,539
謝謝

