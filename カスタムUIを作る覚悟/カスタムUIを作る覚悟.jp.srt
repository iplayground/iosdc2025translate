1
00:00:00,000 --> 00:00:03,720
はい皆さんこんにちは

2
00:00:03,720 --> 00:00:08,019
いきなりですが最近僕は副業として

3
00:00:08,019 --> 00:00:10,900
キャリコというアプリの開発に携わっています

4
00:00:10,900 --> 00:00:16,960
キャリコはAppleプラットフォームでの最高のカレンダー体験を目指したネイティブのアプリケーションです

5
00:00:16,960 --> 00:00:20,179
まだ開発中でリリースできていないんですが

6
00:00:20,179 --> 00:00:24,260
iOS、MacOS、複数のプラットフォーム向けに日々開発しています

7
00:00:24,260 --> 00:00:28,160
特徴的なのがその開発メンバーです

8
00:00:28,160 --> 00:00:33,100
タイムラボ株式会社 CEOの穂積さんという方がプロダクトマネージャーをしていて

9
00:00:33,100 --> 00:00:35,200
そして知っている人もいるかもしれません

10
00:00:35,200 --> 00:00:40,859
Mac OS Nativeという勉強会のコアメンバーであるぬくいさんがデザイナーとして関わっています

11
00:00:40,859 --> 00:00:46,759
そして同じくMac OS Nativeコアメンバーの草木丸さんがMac OSアプリ開発を担当していて

12
00:00:46,759 --> 00:00:50,859
僕がiOSアプリの開発を担当している こういう座組で開発をしています

13
00:00:50,859 --> 00:00:56,320
今日はこのキャリコを題材にカスタムUIについて話をしていきたいと思っています

14
00:00:56,320 --> 00:01:00,280
この発表ではカスタムUIの定義として

15
00:01:00,280 --> 00:01:04,579
Appleが提供するAPIにはない表現で実現されたUIのことを

16
00:01:04,579 --> 00:01:06,579
カスタムUIというふうに呼びます

17
00:01:06,579 --> 00:01:10,739
実際キャリコにもこのカスタムUIはたくさん使われています

18
00:01:10,739 --> 00:01:13,319
ここの詳細は見なくて結構なんですが

19
00:01:13,319 --> 00:01:15,180
例えばこの上のナビゲーションバーとか

20
00:01:15,180 --> 00:01:19,060
下のツールバーといったものは全てカスタムUIになっています

21
00:01:19,060 --> 00:01:23,859
このカスタムUI単純に見た目を実現する

22
00:01:23,859 --> 00:01:25,439
実装するだけならまだしも

23
00:01:25,439 --> 00:01:29,140
本当の意味でカスタムUIを作るというのが難しいというのが

24
00:01:29,140 --> 00:01:30,620
今日の話の内容です

25
00:01:30,620 --> 00:01:34,739
ではここから実際にキャリコの中で実装した例

26
00:01:34,739 --> 00:01:36,760
実装しなかった例を使って

27
00:01:36,760 --> 00:01:39,859
カスタムUIについて紹介をしていきたいというふうに思います

28
00:01:39,859 --> 00:01:43,540
まず最初のカスタムUIの例として

29
00:01:43,540 --> 00:01:45,219
ナビゲーションバーのタイトルです

30
00:01:45,219 --> 00:01:47,760
このナビゲーションバーのタイトルは

31
00:01:47,760 --> 00:01:50,480
ラージスタイルのタイトルを切り切る見た目をしていて

32
00:01:50,480 --> 00:01:52,859
下にスクロールすると引っ張られていきます

33
00:01:52,859 --> 00:01:59,519
そして逆に上にスクロールするとテーブルビューやコレクションビューのようなセクションヘッダーのような動きをします

34
00:01:59,519 --> 00:02:02,819
ここから詳しく説明していきます

35
00:02:02,819 --> 00:02:09,360
カスタムUIならではの点として一つ目にこのアニメーションとしてのナビゲーションバーのタイトルのトランジションです

36
00:02:09,360 --> 00:02:13,780
今ここに注目のような印書いている場所にちょっと注目してみてください

37
00:02:13,780 --> 00:02:19,759
このアニメーションは少しゆっくりにしているんですがトランジションがかかっていることがわかります

38
00:02:19,759 --> 00:02:24,180
ディソルブでタイトルがじんわり出たり消えたりしていることが分かると思います

39
00:02:24,180 --> 00:02:27,099
標準のナビゲーションバータイトルも同様に

40
00:02:27,099 --> 00:02:30,219
iOS標準のナビゲーションバータイトルも同様にディソルバーがかかっているので

41
00:02:30,219 --> 00:02:32,800
標準UIに慣れ親しんでいるユーザーが

42
00:02:32,800 --> 00:02:35,919
コクティアジアのUIに対して不自然に感じないようにということで

43
00:02:35,919 --> 00:02:38,620
ここにわざとトランジションのディソルブを入れています

44
00:02:38,620 --> 00:02:41,539
アクセシビリティにもこだわっています

45
00:02:41,539 --> 00:02:43,939
ここでは透明度を下げる

46
00:02:43,939 --> 00:02:46,560
ブラをやめたことについて説明をします

47
00:02:46,560 --> 00:02:50,919
ナビゲーションバーの背景に注目してみてください

48
00:02:50,919 --> 00:02:53,280
標準のナビゲーションバータイトルでは

49
00:02:53,280 --> 00:02:55,240
このバーの背景にブラーのカスタム

50
00:02:55,240 --> 00:02:58,719
裏のスクロールビューがうっすら透けて見えるようになっています

51
00:02:58,719 --> 00:03:01,939
ということでキャリコでもこれ全部カスタムUIなんですけど

52
00:03:01,939 --> 00:03:05,520
わざとそこを模倣してブラーをかけています

53
00:03:05,520 --> 00:03:08,539
ただ通常ではそれでいいんですけど

54
00:03:08,539 --> 00:03:10,560
アクセシビリティの設定として

55
00:03:10,560 --> 00:03:13,419
画面表示とテキストサイズというものがあります

56
00:03:13,419 --> 00:03:15,060
ここですね

57
00:03:15,060 --> 00:03:16,620
これを有効にすると

58
00:03:16,620 --> 00:03:19,360
標準のナビゲーションバーの背景が

59
00:03:19,360 --> 00:03:20,479
ブラーがかかっていたものが

60
00:03:20,479 --> 00:03:23,159
ブラーが取れるというような挙動をするんですね

61
00:03:23,159 --> 00:03:25,139
なので当然標準がやっているので

62
00:03:25,139 --> 00:03:26,740
カスタムUIであるキャリコも

63
00:03:26,740 --> 00:03:28,780
そのナビゲーションバーの挙動を模倣します

64
00:03:28,780 --> 00:03:31,599
さっきまではブラーがかかっていたところが

65
00:03:31,599 --> 00:03:33,699
今回は今は何もかかっていなくて

66
00:03:33,699 --> 00:03:35,259
白い背景になっていることが

67
00:03:35,259 --> 00:03:36,379
わかると思います

68
00:03:36,379 --> 00:03:38,680
左右に見比べると

69
00:03:38,680 --> 00:03:40,659
きりわかるんじゃないかなと思います

70
00:03:40,659 --> 00:03:43,159
こうすることを透明度を下げるの

71
00:03:43,159 --> 00:03:45,560
オンオフでナビゲーションバーのブラの違いというのが

72
00:03:45,560 --> 00:03:46,659
分かりやすくなります

73
00:03:46,659 --> 00:03:50,360
このあたり標準APIだったらもちろん勝手にやってくれるんですけど

74
00:03:50,360 --> 00:03:52,060
カスタムUIでやるんだったら

75
00:03:52,060 --> 00:03:54,539
自分らでこのあたりまでちゃんとケアしようということで

76
00:03:54,539 --> 00:03:55,599
ここまでやっています

77
00:03:55,599 --> 00:03:58,819
次の例としてシートも紹介します

78
00:03:58,819 --> 00:04:02,259
キャリコより発見と新規作成のために

79
00:04:02,259 --> 00:04:03,740
カスタムのシートを作っています

80
00:04:03,740 --> 00:04:06,900
これ一見普通のシートにもしかしたら見えるかもしれませんが

81
00:04:06,900 --> 00:04:08,639
下にスワイプしたときに

82
00:04:08,639 --> 00:04:11,639
メールアプリのようにスタックする仕組みになっています

83
00:04:11,639 --> 00:04:15,379
当然標準のAPIではこのようなことは実現できないので

84
00:04:15,379 --> 00:04:17,480
これは全てカスタムUIです

85
00:04:17,480 --> 00:04:21,540
元々のビューが若干後ろに下がって黒い影がついたり

86
00:04:21,540 --> 00:04:26,540
ここではイベントリとかこの辺り全て自前で実装しています

87
00:04:26,540 --> 00:04:31,600
このシートについてのインタラクションとアクセシビリティという観点で

88
00:04:31,600 --> 00:04:33,300
グラバーというものを紹介します

89
00:04:33,300 --> 00:04:38,920
グラバーというのはここの灰色のカプセル型のUIコンポーネントのことを指します

90
00:04:38,920 --> 00:04:42,620
Human Interface Guidelinesのシートのセクションで

91
00:04:42,620 --> 00:04:43,959
グラバーについてこのように説明

92
00:04:43,959 --> 00:04:46,860
グラバーをタップすると

93
00:04:46,860 --> 00:04:48,779
ディテントを順番に選択できます

94
00:04:48,779 --> 00:04:51,220
グラバーはボイスオーバーにも対応しており

95
00:04:51,220 --> 00:04:54,079
ユーザーは画面を見ずにシートのサイズを変更できます

96
00:04:54,079 --> 00:04:57,259
Human Interface Guidelinesがそう言っているので

97
00:04:57,259 --> 00:04:59,120
キャリコでもそのように実装しています

98
00:04:59,120 --> 00:05:01,259
さっきのグラバーをタップすると

99
00:05:01,259 --> 00:05:02,759
下に小さくスタックするように

100
00:05:02,759 --> 00:05:04,920
サイズが変わっていることが分かると思います

101
00:05:04,920 --> 00:05:06,439
このように変更があります

102
00:05:06,439 --> 00:05:11,379
シートっていうのは色んなアプリがそれぞれカスタムの模倣して作っている

103
00:05:11,379 --> 00:05:14,060
それぞれの独自のシートを作っていると思っていて

104
00:05:14,060 --> 00:05:16,459
グラバーみたいなものもよく見かけるんですけど

105
00:05:16,459 --> 00:05:18,620
多くの場合そのグラバーをタップしても

106
00:05:18,620 --> 00:05:20,160
ディテントが変わったりはしてくれません

107
00:05:20,160 --> 00:05:24,939
これはHuman Interface Guidelineの観点から言うと不適切という風に言えます

108
00:05:24,939 --> 00:05:29,420
ここからはキャリコでカスタムのシートを買った例として

109
00:05:29,420 --> 00:05:31,240
日付ピッカーというところも紹介します

110
00:05:31,240 --> 00:05:35,120
このよくある日付や時間を選択するピッカーのことです

111
00:05:36,439 --> 00:05:40,399
キャリコではこのコンパクト時の文字のフォントっていうのを

112
00:05:40,399 --> 00:05:43,860
そのアプリの世界観に合ったものに変えたいという話がありました

113
00:05:43,860 --> 00:05:48,259
ただ実はこのフォントを変更するというAPIが

114
00:05:48,259 --> 00:05:49,519
Appleから提供されておられ

115
00:05:49,519 --> 00:05:51,079
逆に実装しなくてもいいんだったら

116
00:05:51,079 --> 00:05:54,279
ここをカスタムUIとしてさっきのピッカーが出るものとかを

117
00:05:54,279 --> 00:05:56,540
模倣して実装する必要がありました

118
00:05:56,540 --> 00:05:59,439
ポップオーバーとかを使えば実現できる気もします

119
00:05:59,439 --> 00:06:02,839
ただちょっとどういう挙動をするのかわからないので

120
00:06:02,839 --> 00:06:04,839
この日付ピッカーがどうなっているのかっていうのを

121
00:06:04,839 --> 00:06:05,980
詳しく見てみます

122
00:06:05,980 --> 00:06:11,160
まず最初に一番身近な例として指でタップした場合です

123
00:06:11,160 --> 00:06:16,199
もしアルファが出てきて時間を選ぶというようなことができるようになっています

124
00:06:16,199 --> 00:06:22,339
iPadOSでトラックパッドとキーボードを使った場合も見てみます

125
00:06:22,339 --> 00:06:25,160
このようにトラックパッドで選択することができて

126
00:06:25,160 --> 00:06:29,540
キーボードで文字を入力することで時間を直接指定することができます

127
00:06:29,540 --> 00:06:34,839
さらに時間と分を分けて選択してタップするとピッカーが出たり

128
00:06:34,839 --> 00:06:38,579
分だけ入力したいといったようなこともできるようになっています

129
00:06:38,579 --> 00:06:42,839
さらに厄介なのが地域がアメリカの場合です

130
00:06:42,839 --> 00:06:45,639
時間の前に午前と午後という情報が

131
00:06:45,639 --> 00:06:46,480
間違えました

132
00:06:46,480 --> 00:06:49,639
午前と午後という情報が追加されています

133
00:06:49,639 --> 00:06:52,420
これ自体も選択することができて

134
00:06:52,420 --> 00:06:54,540
キーボードの上下ボタンなどを使って

135
00:06:54,540 --> 00:06:58,079
午前と午後で時間だけ入力するようなインタラクションになっています

136
00:06:58,079 --> 00:07:00,920
さらに言語を英語にしてみます

137
00:07:00,920 --> 00:07:05,120
するとさっきの午前と午後という情報は時間の後ろに表示されるようになります

138
00:07:05,120 --> 00:07:10,579
このように言語に応じてUIを出す順番とかも出し分ける必要があります

139
00:07:10,579 --> 00:07:13,819
最後にApple Pencilの場合を見てみます

140
00:07:13,819 --> 00:07:18,319
Apple Pencilはスクリブルという機能で時間を直接午後を切り替えるというような

141
00:07:18,319 --> 00:07:20,439
手書きで入力することができるようになっています

142
00:07:20,439 --> 00:07:24,879
標準の日付ピッカーはこの辺りまで全てサポートしています

143
00:07:24,879 --> 00:07:29,379
ここまでの内容を踏まえてこれ全部やるっていう話です

144
00:07:29,379 --> 00:07:32,819
標準APIでこれらは全て自動で対応していて

145
00:07:32,819 --> 00:07:34,220
ユーザーはこの期待値

146
00:07:34,220 --> 00:07:35,740
ユーザーの期待値もこのレベルです

147
00:07:35,740 --> 00:07:38,759
今僕が把握している範囲を紹介します

148
00:07:38,759 --> 00:07:41,579
手入力 複二の挙動はあると思っていて

149
00:07:41,579 --> 00:07:44,000
特定の地域 特定の言語で組み合わせる時の

150
00:07:44,000 --> 00:07:46,040
エッジケースみたいなものも多そうです

151
00:07:46,040 --> 00:07:48,620
これら全てを対応するのはコストが高すぎるので

152
00:07:48,620 --> 00:07:49,720
やりたくないんですけど

153
00:07:49,720 --> 00:07:52,100
じゃあ我々のフォントを少し変えたいという

154
00:07:52,100 --> 00:07:54,000
ちょっとした要求のためだけに

155
00:07:54,000 --> 00:07:56,600
ユーザー体験を下げてしまうということになってしまいます

156
00:07:56,600 --> 00:07:58,720
これは良くないだろうということで

157
00:07:58,720 --> 00:08:00,879
キャリコではカスタムピッカーをしたが

158
00:08:00,879 --> 00:08:02,639
おそらくまだまだ未確認を修正し

159
00:08:02,639 --> 00:08:04,800
標準APIをそのまま使用することで

160
00:08:04,800 --> 00:08:06,120
対応するというふうになりました

161
00:08:06,120 --> 00:08:08,639
つまりカスタムUIにすることを断念しました

162
00:08:08,639 --> 00:08:12,920
ではここからカスタムUIを作るときに

163
00:08:12,920 --> 00:08:15,540
今具体的にいくつか例を見せましたが

164
00:08:15,540 --> 00:08:17,959
どういう点を確認するべきかということについて

165
00:08:17,959 --> 00:08:19,139
説明をしていきます

166
00:08:19,139 --> 00:08:22,199
ざっくり挙げるとアクセシビリティであったり

167
00:08:22,199 --> 00:08:24,240
やるのをやめてデザインのイメーション

168
00:08:24,240 --> 00:08:25,660
ジェスチャー インタラクション パフォーマンス

169
00:08:25,660 --> 00:08:27,100
いろいろな観点があります

170
00:08:27,100 --> 00:08:29,819
まずはアクセシビリティから見ていきます

171
00:08:29,819 --> 00:08:33,980
アクセシビリティの中でも設定項目ってすごい多いんですけど

172
00:08:33,980 --> 00:08:36,460
開発者が特に気をつけた方がいいなと思うのが

173
00:08:36,460 --> 00:08:40,279
ボイスオーバー、ダイナミックタイプ、ボタンの形、オンオフラベル、透明度を下げる

174
00:08:40,279 --> 00:08:42,539
視差効果を減らすなどが挙げられます

175
00:08:42,539 --> 00:08:44,259
もちろんこれら以外にもたくさんある

176
00:08:44,259 --> 00:08:48,399
パッドOSの対応とかアニメアクセシビリティの項目を一つ一つ見てみてください

177
00:08:48,399 --> 00:08:51,500
これはOSのバージョンが上がることに追加されていくので

178
00:08:51,500 --> 00:08:53,379
一回見て満足するのではなくて

179
00:08:53,379 --> 00:08:56,440
OSのバージョンが上がるごとにチェックすることをお勧めします

180
00:08:56,440 --> 00:09:01,639
この中でもダイナミックタイプについて少し深掘ってみようと思います

181
00:09:01,639 --> 00:09:06,600
ダイナミックタイプは比較的最近認知度があると思うので

182
00:09:06,600 --> 00:09:11,299
ぜひ皆さん自身で文字のフォントサイズを変更することができるOSの機能です

183
00:09:11,299 --> 00:09:15,480
例えばデフォルトでこれくらいの文字サイズのUIがあったときに

184
00:09:15,480 --> 00:09:19,000
もっと小さい文字がいいよっていう人はもっと文字を小さくできますし

185
00:09:19,000 --> 00:09:21,840
視力が悪い人などもっと文字が大きいよって人は

186
00:09:21,840 --> 00:09:23,980
持って文字を大きくすることができる機能です

187
00:09:23,980 --> 00:09:26,159
この機能に対応するためには

188
00:09:26,159 --> 00:09:27,879
文字サイズをハードコーディング

189
00:09:27,879 --> 00:09:29,340
上がってきているとは思うんですけど

190
00:09:29,340 --> 00:09:32,240
フォントのサイズダイナミックタイプの

191
00:09:32,240 --> 00:09:34,720
設定を確認して変えるなど

192
00:09:34,720 --> 00:09:37,679
もしくはOSが標準で使っているスタイルを使うなど

193
00:09:37,679 --> 00:09:39,159
対応が必要です

194
00:09:39,159 --> 00:09:42,120
ただ文字サイズの変更に

195
00:09:42,120 --> 00:09:44,460
自動で追従できていればそれでいいのかというと

196
00:09:44,460 --> 00:09:45,919
実はそういうわけではありません

197
00:09:45,919 --> 00:09:48,179
例えばこういうUIで

198
00:09:48,179 --> 00:09:50,700
文字サイズを単純に上げするのではなくて

199
00:09:50,700 --> 00:09:52,919
ちゃんとOSのようになってしまいます

200
00:09:52,919 --> 00:09:56,200
これはタイトルが省略されていて

201
00:09:56,200 --> 00:09:57,899
タイトルの情報が読み取れませんよね

202
00:09:57,899 --> 00:10:01,200
さらに左の方には変な余白があったりと

203
00:10:01,200 --> 00:10:03,659
ちょっとUIとしても問題がありそうです

204
00:10:03,659 --> 00:10:08,620
このように文字サイズが極端に大きい時っていうのは

205
00:10:08,620 --> 00:10:11,519
必要に応じてレイアウトを変更するということが

206
00:10:11,519 --> 00:10:12,879
出てしまうと

207
00:10:12,879 --> 00:10:17,139
これに対応するにはまず先頭の余白部分ですね

208
00:10:17,139 --> 00:10:19,179
ここを埋めるために説明のテキストを

209
00:10:19,179 --> 00:10:21,139
左にずらすなど工夫ができそうです

210
00:10:21,139 --> 00:10:25,620
さらに次に右上の日付のテキストですね

211
00:10:25,620 --> 00:10:27,539
これを下の方にずらします

212
00:10:27,539 --> 00:10:30,559
日付のラベルが下に来ることで、

213
00:10:30,559 --> 00:10:32,480
タイトルの右に余白ができるので、

214
00:10:32,480 --> 00:10:34,279
タイトルの内容が大事になってきます

215
00:10:34,279 --> 00:10:37,960
このように文字サイズに応じて、

216
00:10:37,960 --> 00:10:40,000
レイアウトを柔軟に変更することで、

217
00:10:40,000 --> 00:10:42,799
必要な情報をユーザーがちゃんと読み取れるようになります

218
00:10:42,799 --> 00:10:44,799
Appleのアプリの場合だと、

219
00:10:44,799 --> 00:10:47,279
ミュージックアプリ、メールアプリ、メッセージアプリなどは、

220
00:10:47,279 --> 00:10:49,039
この辺をがっつり文字サイズに応じて、

221
00:10:49,139 --> 00:10:50,259
デイアウトを変えてきているので

222
00:10:50,259 --> 00:10:52,720
この発表の後にぜひ皆さん見てみてください

223
00:10:52,720 --> 00:10:57,220
全てのものが文字全て表示することができるようになります

224
00:10:57,220 --> 00:10:58,059
変わらないものもあります

225
00:10:58,059 --> 00:11:01,820
タブバーの文字のフォントサイズというのは

226
00:11:01,820 --> 00:11:05,240
ダイナミックタイプでフォントサイズを変えても大きくなりません

227
00:11:05,240 --> 00:11:08,720
じゃあユーザーはここの文字を読み取る方法がないのかというと

228
00:11:08,720 --> 00:11:10,120
別の方法があります

229
00:11:10,120 --> 00:11:13,980
このタブバーの読みたい項目を長押しします

230
00:11:13,980 --> 00:11:16,759
するとこのように画面の真ん中に

231
00:11:16,759 --> 00:11:18,879
そのタブサイズがAppleのもので変わるかというと

232
00:11:18,879 --> 00:11:19,500
変わられます

233
00:11:19,500 --> 00:11:23,919
これはiOSのラージコンテンツビューアと呼ばれる機能でして

234
00:11:23,919 --> 00:11:26,620
UIの都合で文字サイズを大きくできないとき

235
00:11:26,620 --> 00:11:28,720
そういうときに長押しすることで

236
00:11:28,720 --> 00:11:34,679
その説明と画像を画面の真ん中に大きく表示することができるという

237
00:11:34,679 --> 00:11:35,940
アクセシビリティの機能です

238
00:11:35,940 --> 00:11:38,220
標準のUIだとタブバー

239
00:11:38,220 --> 00:11:41,360
ナビゲーションバーに関するテキストとイメージが表示されますが

240
00:11:41,360 --> 00:11:44,059
もし皆さんがカスタムUIを作りたいということであれば

241
00:11:44,059 --> 00:11:47,460
この辺をちゃんと対応するかどうかというのを考える必要があります

242
00:11:47,460 --> 00:11:52,320
せっかくちょっとしたチップスというか便利な話もしておくと

243
00:11:52,320 --> 00:11:56,019
コントロールセンターにテキストサイズというコントロールを置くことで

244
00:11:56,019 --> 00:11:59,220
いつでも簡単にダイナミックタイプの設定を変えられるようになるので

245
00:11:59,220 --> 00:12:02,940
これを置いておくことをおすすめは自動的にこの辺りをサポートしています

246
00:12:02,940 --> 00:12:05,740
文字サイズをめっちゃ大きくしたりめっちゃ小さくしたりして

247
00:12:05,740 --> 00:12:07,620
いろんなアプリの挙動を確認しています

248
00:12:07,620 --> 00:12:12,000
WWDCのセッション動画Get Started with Dynamic Typeでは

249
00:12:12,000 --> 00:12:14,820
この辺りについてさらに掘り下げた内容とかもしゃべられているので

250
00:12:14,820 --> 00:12:17,740
ぜひこのセッション動画の後にチェックしてみてください

251
00:12:17,740 --> 00:12:22,200
次にiPadOSについてもどういう点を確認するか見ていきます

252
00:12:22,200 --> 00:12:24,600
僕はこれを常に置いておいて

253
00:12:24,600 --> 00:12:26,059
Windowのリサイズであったり

254
00:12:26,059 --> 00:12:29,320
キーボード、マウス、トラックパッド、Apple Pencilといったものがあります

255
00:12:29,320 --> 00:12:31,399
まずWindowのリサイズです

256
00:12:31,399 --> 00:12:34,580
どんなWindowサイズにしても柔軟に適切なレイアウトになるか

257
00:12:34,580 --> 00:12:36,120
というのをちゃんとチェックしてみてください

258
00:12:36,120 --> 00:12:38,080
よくある例として

259
00:12:38,080 --> 00:12:39,019
間違った例として

260
00:12:39,019 --> 00:12:40,879
ビューのサイズとかをキャッシュしていて

261
00:12:40,879 --> 00:12:44,019
それがWindowのサイズとキャッシュのサイズが噛み合わなくて

262
00:12:44,019 --> 00:12:49,240
iPadOSならではの点としてこのあたりは注意が必要そうです

263
00:12:49,240 --> 00:12:57,980
次にキーボードに関してはキーボードだけである程度快適にアプリケーションが操作できるかというのも確認してみてください

264
00:12:57,980 --> 00:13:05,279
特にキーボードショートカットはiPadOS 26から存在感が増しているので対応できるならした方がいいです

265
00:13:05,279 --> 00:13:08,460
崩れるというアプリを時々見かけるので

266
00:13:08,460 --> 00:13:11,980
ホバーエフェクトが適切かどうかというところもチェックしてみてください

267
00:13:12,279 --> 00:13:22,820
ホバーエフェクトというのはマウスのカーソルをボタンに近づけたときにボタンがちょっと浮き上がったり反応したりするというインタラクションでして、それが適切かどうかというのも確認してみてください

268
00:13:22,820 --> 00:13:30,799
このあたりがちゃんと対応できていると、Vision OSにもし移植しますよとなったときには、マウス、トラックパッド、Apple Pencilに関してはあります

269
00:13:30,799 --> 00:13:33,639
最後にApple Pencilです

270
00:13:33,639 --> 00:13:39,080
Apple Pencilでは先ほど説明したようにスクリブルという文字を手書きで入力できる機能があります

271
00:13:39,440 --> 00:13:43,580
このスクリブルがちゃんと適切に動作するかどうかというのを確認してみてください

272
00:13:43,580 --> 00:13:48,399
特に注意する項目としてテキストフィールドに見せかけたボタンというものを

273
00:13:48,399 --> 00:13:52,460
いろんなアプリが置いているしやすさが上がると思う

274
00:13:52,460 --> 00:13:56,379
iPadOSでApple Pencil持っているとそこに直接書こうとしちゃうんですよね

275
00:13:56,379 --> 00:13:59,379
ただそれはボタンなのでテキストフィールドじゃなくてボタンなので

276
00:13:59,379 --> 00:14:01,779
文字が書けないということが起きてしまい

277
00:14:01,779 --> 00:14:04,519
ユーザーの期待と実際に挙動が違ってしまいます

278
00:14:04,519 --> 00:14:07,500
こういった場合には修正をした方がより良いです

279
00:14:08,919 --> 00:14:14,820
残りの項目に関しても全て重要で等しく説明しているんですが、一見テキストフィールドに見えるので思います

280
00:14:14,820 --> 00:14:28,820
これら全てに対応して、対応しなければならないという話をしたいわけではないんですけど、ビジネス的に対応しないという判断をしたとか、自分たちはリソースが足りなくて対応できていないといった認識を持つことが必要だということを伝えたいです

281
00:14:29,220 --> 00:14:42,039
その判断、状況の裏では悲しんでいる人がいるかもしれないということにちゃんと向き合う、向き合いたいんですけど、今日は時間の都合を省略したいと思えば、空き時間にちょっと対応してみるとか、そういったことをして改善していく必要があります

282
00:14:42,039 --> 00:14:46,519
一番ダメなのは気づかずにそのままリリースしてしまい放置してしまうことです

283
00:14:46,519 --> 00:14:52,980
エンジニアとしてどこまで対応できていて、どこまで対応できていないのかということについてはちゃんと把握しておく必要があります

284
00:14:52,980 --> 00:14:56,460
ここからは、何かを見つけよう必要があります

285
00:14:57,299 --> 00:15:01,860
認識できていればについても作らないべきかということについても話をしていきたいです

286
00:15:01,860 --> 00:15:07,340
まず最初にナビゲーションコントロールといったものは難易度が非常に高いので避けるべきです

287
00:15:07,340 --> 00:15:12,100
ナビゲーションというのはタブバーとかスプリットビューとかナビゲーションコントローラーとかそういったものです

288
00:15:12,100 --> 00:15:17,460
コントローラーはさっき言ったような日付ピッカーであったりテキストフィールドそういったものは難易度がめちゃくちゃ高いので

289
00:15:17,460 --> 00:15:23,480
どういう場合にそのカスタムUIを作るべきかということに当時のコントロールをいくつか組み合わせたものというのは問題になりにくいので

290
00:15:23,480 --> 00:15:25,899
この辺りはやってもいいんじゃないかなと思います

291
00:15:25,899 --> 00:15:30,039
次にAndroidの統一だけを目的にした

292
00:15:30,039 --> 00:15:33,220
さっき難易度が高いといったカスタムナビゲーションやコントロールというのは

293
00:15:33,220 --> 00:15:34,399
特に避けた方がいいです

294
00:15:34,399 --> 00:15:37,500
デザインの管理コストが少し増しになるだけで

295
00:15:37,500 --> 00:15:40,139
エンジニアやユーザーにとっては基本的に避けるべきです

296
00:15:40,139 --> 00:15:44,799
一方でコンポーネント表目的にしたカスタムUIというのはやめた方がいいです

297
00:15:44,799 --> 00:15:46,039
標準UIを使うべきです

298
00:15:46,039 --> 00:15:51,500
最後にチームの技術力 協業度 プラットフォームへの理解度というのを

299
00:15:51,500 --> 00:15:55,779
総合的に判断して作るか作らないかというのを考えていく必要があります

300
00:15:55,779 --> 00:15:59,960
特にここでは協業度というところに少しフォーカスを当てたいと思います

301
00:15:59,960 --> 00:16:05,799
不利益になることが多いので統一だけは静的なデザインに責任があり

302
00:16:05,799 --> 00:16:09,220
エンジニアはその実装に責任があるということが多いと思います

303
00:16:09,220 --> 00:16:13,700
ただその静的なデザインと実装との間にはギャップがあって

304
00:16:13,700 --> 00:16:18,539
アニメーション入力デバイスインタラクションパフォーマンスアクセシビリティローカライゼーション

305
00:16:18,539 --> 00:16:22,720
こういった情報っていうのが結構考慮して実装に落とし込む必要があるんですけど

306
00:16:22,720 --> 00:16:28,580
多くの開発現場の場合UIデザイナーが例えばアニメーションにしてもその長さはどうするのとか

307
00:16:28,580 --> 00:16:30,940
バウンスはどうしますか 初速はどうしますかとか

308
00:16:30,940 --> 00:16:33,600
アニメーションカーブはどのようなカーブにしますかとか

309
00:16:33,600 --> 00:16:38,659
他にもアニメーション中にインタラクションを受け付けますか受け付けませんかなどを考えることがたくさんあります

310
00:16:38,659 --> 00:16:41,399
この多くはデザイナーが決める必要がありそうですが

311
00:16:41,399 --> 00:16:43,899
アニメーション中にインタラクションを受け付けるかどうかとかは

312
00:16:43,899 --> 00:16:46,779
もしかしたらエンジニアのこの辺が結構浮きがちです

313
00:16:46,779 --> 00:16:50,240
例えばさっき説明したダイナミックタイプを例にすると

314
00:16:50,240 --> 00:16:51,960
じゃあそのスタイルはどうしますかとか

315
00:16:51,960 --> 00:16:53,799
フォントサイズに応じてレイアウト変えますか

316
00:16:53,799 --> 00:16:55,500
ラージコンデンズビューは使えますかといった

317
00:16:55,500 --> 00:16:57,139
いろんなことを気にする必要があります

318
00:16:57,139 --> 00:17:00,980
デザイナーからするとこの辺はいい感じにやってくれよって感じもありますが

319
00:17:00,980 --> 00:17:04,859
エンジニアからするとこの辺のデザインもしっかり用意してほしいというような気持ちもあります

320
00:17:04,859 --> 00:17:08,460
なのでこの辺の情報っていうのがケアした方がいいかもしれません

321
00:17:08,460 --> 00:17:10,440
アクセシビリティにしてが見るべきなのか

322
00:17:10,440 --> 00:17:12,420
デザイナーが見るべきなのかっていうのは曖昧です

323
00:17:12,420 --> 00:17:15,759
こういう場合にしっかり境界を引きすぎないということが

324
00:17:15,759 --> 00:17:17,539
大事だと個人的には思います

325
00:17:17,539 --> 00:17:20,059
UIデザイナーとエンジニアの間で

326
00:17:20,059 --> 00:17:22,039
静的なデザイン以外の情報っていうのは

327
00:17:22,039 --> 00:17:23,819
さっきも言った通り浮きがちです

328
00:17:23,819 --> 00:17:25,839
これは個人的にはフィグマなど

329
00:17:25,839 --> 00:17:27,519
絵をベースにコミュニケーションしていることの

330
00:17:27,519 --> 00:17:28,759
弊害なんじゃないかなというのが

331
00:17:28,759 --> 00:17:30,819
基本的に責任が曖昧になりがちです

332
00:17:30,819 --> 00:17:36,680
エンジニアやデザイナー相互に積極的に拾っていくという必要があります

333
00:17:36,680 --> 00:17:41,140
さらにさっき難易度が高いといったコントロールやナビゲーションに関して

334
00:17:41,140 --> 00:17:43,579
カスタムUIを作るよってなった時には

335
00:17:43,579 --> 00:17:46,940
特に密な協業と相互の理解

336
00:17:46,940 --> 00:17:49,940
つまりエンジニアならデザイナーのデザイナーならエンジニアの

337
00:17:49,940 --> 00:17:52,700
この浮いた情報っていうのは

338
00:17:52,700 --> 00:17:55,779
エンジニアやカスタムUIに対して取り組む時には

339
00:17:55,779 --> 00:17:59,920
UIデザイナーとかエンジニアとかそういったロールで線を引くのではなくて

340
00:17:59,920 --> 00:18:05,559
同じクリエイターとして対応を重ねてデザインを実装していくというのが大事なんじゃないかなというふうに思います

341
00:18:05,559 --> 00:18:08,740
最終的に責任があるのはもちろんデザインに関してはデザイナーだし

342
00:18:08,740 --> 00:18:10,720
エンジニアリングに関してはエンジニアなんですが

343
00:18:10,720 --> 00:18:13,900
そこに対して明確に理解が必要になります

344
00:18:13,900 --> 00:18:17,799
なので取り組むことが大事だと思っています

345
00:18:17,799 --> 00:18:23,119
ところで今我々はUIに関して一つの時代の変わり目にいます

346
00:18:23,119 --> 00:18:25,440
そうですリキッドグラスです

347
00:18:25,440 --> 00:18:28,599
キャリコでも先ほど説明したように

348
00:18:28,599 --> 00:18:30,480
カスタムのナビゲーションバーであったり

349
00:18:30,480 --> 00:18:33,680
カスタムのツールバーといったカスタムUIがたくさんあります

350
00:18:33,680 --> 00:18:37,259
線を引くのでなくグラデーションで同じ立場のクリエイターとして

351
00:18:37,259 --> 00:18:41,839
iOS18からiOS26にアップデートしたタイミングで

352
00:18:41,839 --> 00:18:43,980
自動的に追従してくれたりはしません

353
00:18:43,980 --> 00:18:47,740
先ほど説明したようにめちゃくちゃ作り込んできたカスタムUIなんですが

354
00:18:47,740 --> 00:18:50,599
デザイン的にもiOS26には合わなさそうです

355
00:18:50,599 --> 00:18:54,440
ということでキャリコではそれらすべてを一旦捨てて

356
00:18:54,440 --> 00:18:55,599
ゼロベースでUIを

357
00:18:55,599 --> 00:18:59,160
ただこれはもちろんカスタムUIですので

358
00:18:59,160 --> 00:19:00,960
それ大変じゃないですかって聞かれたら

359
00:19:00,960 --> 00:19:01,740
はい大変です

360
00:19:01,740 --> 00:19:03,440
ただカスタムUIを作るっていうのは

361
00:19:03,440 --> 00:19:05,119
そういうことだというふうに思います

362
00:19:05,119 --> 00:19:07,259
カスタムUIを実装するのも大変

363
00:19:07,259 --> 00:19:08,539
メンテナンスをするのも大変

364
00:19:08,539 --> 00:19:10,599
なのに終了が突然来るということで

365
00:19:10,599 --> 00:19:14,099
楽な時っていうのは一瞬たりでもないんじゃないかなと思います

366
00:19:14,099 --> 00:19:16,839
なのでカスタムUIを作る時というのは

367
00:19:16,839 --> 00:19:19,700
それ相応の回路デザインすることを決断しました

368
00:19:19,700 --> 00:19:22,579
タイトル回収のまとめです

369
00:19:22,579 --> 00:19:24,539
カスタムUIを作る覚悟として

370
00:19:24,539 --> 00:19:27,740
カスタムUIを作るとき標準UIがサポートしてくれていた

371
00:19:27,740 --> 00:19:31,500
アクセシビリティやアニメーションとか複数プラットフォームの対応とか

372
00:19:31,500 --> 00:19:36,420
いろんなものを始めそれら全てを自分で面倒を見るという覚悟が必要です

373
00:19:36,420 --> 00:19:41,619
UIデザイナーとエンジニア間で今まで以上の覚悟というものが求められると思います

374
00:19:41,619 --> 00:19:46,980
ということで作ってからも大変その終わりが突然来るということを受け入れなければいけない

375
00:19:46,980 --> 00:19:48,660
その覚悟も求められます

376
00:19:49,660 --> 00:19:58,019
この発表ではエンジニアの人とデザイナーの人がカスタムUIについて議論する一つのきっかけになればなと思ってあえて技術的な話は一つも入れていません

377
00:19:58,019 --> 00:20:03,539
ぜひ皆さんチームにも持ち帰っていただいてカスタムUIに密な協業する覚悟も必要です

378
00:20:03,539 --> 00:20:06,839
そして作るのご清聴ありがとうございました

379
00:20:06,839 --> 00:20:10,200
ということでごめんなさい最後に宣伝だけ一つ入れさせてください

380
00:20:10,200 --> 00:20:15,480
今先ほど言ったキャリコというものはテストフライトに向けて今必死に作っています

381
00:20:15,740 --> 00:20:19,920
https.calico.cat.appというところでフォームがあって

382
00:20:19,920 --> 00:20:23,960
このフォームを入力すると皆さんにテストフライトの準備ができたと議論する

383
00:20:23,960 --> 00:20:26,740
いいきっかけにしてもらえたらなというふうに思っています

384
00:20:26,740 --> 00:20:29,900
どんだけUI作り込んでるんだって興味があるよって人は

385
00:20:29,900 --> 00:20:31,640
ぜひこれ登録してみてください

386
00:20:31,640 --> 00:20:35,200
あとXをフォローしてくれた方にCalicoステッカーを配っていますので

387
00:20:35,200 --> 00:20:37,519
ぜひフォローしていただいて声かけてくれたら

388
00:20:37,519 --> 00:20:41,500
今日ステッカー持ってきてるので気軽に声かけてください

389
00:20:41,500 --> 00:20:43,460
これで本当に終わりですご清聴ありがとうございました

390
00:20:43,460 --> 00:20:47,539
この時にアナウンスのメールを飛ばさせていただきますので

391
00:20:47,539 --> 00:20:50,119
もし興味があるよと発表ありがとうございました

392
00:20:50,119 --> 00:20:53,599
それではQ&Aに入りたいと思います

393
00:20:53,599 --> 00:20:56,839
コメントや質問のある方は手を挙げてお知らせください

394
00:21:13,460 --> 00:21:25,180
発表ありがとうございます。質問なんですけれども、UIデザイナーとエンジニアが協力して取り組んでいく必要があるとおっしゃっていたと思うんですけれども、

395
00:21:25,180 --> 00:21:41,359
デザイナーに対してAppleプラットフォームのダイナミックタイプがあるとか、そういったAppleプラットフォームならではの事情を説明する必要があると思うんですけれども、

396
00:21:41,359 --> 00:21:45,740
そういった時に使いやすい資料とかってありますかね

397
00:21:45,740 --> 00:21:50,619
やっぱりHuman Interface Guidelineを読むっていうのが大事だ

398
00:21:50,619 --> 00:21:52,660
プラットフォームにはこういうのがある

399
00:21:52,660 --> 00:21:53,700
例えばDynamic

400
00:21:53,700 --> 00:21:56,900
Dynamic GuidelineとかそういったAppleが出しているもの

401
00:21:56,900 --> 00:21:58,660
そうですねHuman Interface Guideline

402
00:21:58,660 --> 00:22:02,019
あとデザインに特化したWWDCのセッション動画とかもあるので

403
00:22:02,019 --> 00:22:04,619
デザイナーの人がそういうところを

404
00:22:04,619 --> 00:22:06,359
アンテナ張ってキャッチアップしていることっていうのは

405
00:22:06,359 --> 00:22:07,559
そんなに多くないと思うので

406
00:22:07,559 --> 00:22:12,380
この内容であればデザイナーの方が理解できるんじゃないかなというものは

407
00:22:12,380 --> 00:22:14,059
一人っていう感じでしょうか

408
00:22:14,059 --> 00:22:16,440
そうですねまずはヒューマンインターン

409
00:22:16,440 --> 00:22:19,480
具体的な幅広いものについて

410
00:22:19,480 --> 00:22:24,200
一般化された資料っていうのはあんまりないんじゃないかなというふうに思っているので

411
00:22:24,200 --> 00:22:28,180
やはりそれは作っていく過程で対話をちゃんと重ねて

412
00:22:28,180 --> 00:22:33,420
ここに関してはこういう対応とか考慮が必要です

413
00:22:33,420 --> 00:22:37,500
といったようなことを積極的に共有していくということが必要かなと思います

414
00:22:37,500 --> 00:22:39,980
あとはあってそういったデザインを作っているので

415
00:22:39,980 --> 00:22:44,059
そこに対して一番いい落とし所っていうのを探っていくことで

416
00:22:44,059 --> 00:22:49,099
チームとして成長できていったらいいんじゃないかなというふうに思います

417
00:22:49,099 --> 00:22:50,500
ありがとうございます

418
00:22:50,500 --> 00:22:54,640
ありがとうございました

419
00:22:54,640 --> 00:22:57,940
他にコメントやご伝えていって相互理解

420
00:22:57,940 --> 00:23:00,200
多分デザイナーの人はデザイナーの人でいろいろ事情が

421
00:23:00,200 --> 00:23:08,339
いらっしゃいませんかね

422
00:23:08,339 --> 00:23:14,059
真ん中の方お願いいたします

423
00:23:14,059 --> 00:23:17,960
発表ありがとうございました

424
00:23:17,960 --> 00:23:20,059
ご質問のある方は挙手をお願いします

425
00:23:20,059 --> 00:23:24,740
文字のダイナミックタイプの話で

426
00:23:24,740 --> 00:23:28,500
サイズによってデザインを変えるっていうのがあったと思ったんですけど

427
00:23:28,500 --> 00:23:31,019
Appleがやっているとはいえ

428
00:23:31,019 --> 00:23:34,779
普通のアプリがこれをやるのは結構コストかなと思っていて

429
00:23:34,779 --> 00:23:39,180
どういった話し合いがあってこれをやるに至ったのかが気になったのと

430
00:23:39,180 --> 00:23:41,079
2つ目に面白かったです

431
00:23:41,079 --> 00:23:45,160
質問としてはさっきのデザインシステムが

432
00:23:45,160 --> 00:23:47,779
デザイナーとして用意されているのかが気になりました

433
00:23:47,779 --> 00:23:51,559
まずここに関して言うとごめんなさい

434
00:23:51,559 --> 00:23:54,059
さっき言った通りなんですけど

435
00:23:54,059 --> 00:23:57,660
実はキャリコもこれら全てが完璧にできているかというと

436
00:23:57,660 --> 00:23:58,960
そういうわけではなくて

437
00:23:58,960 --> 00:24:00,900
まだまだ対応できていないところがあるので

438
00:24:00,900 --> 00:24:01,940
さっきみたいなところに

439
00:24:01,940 --> 00:24:03,460
ダイナミックタイプ

440
00:24:03,460 --> 00:24:05,859
どのサイズによってデザインを変えるみたいな

441
00:24:05,859 --> 00:24:07,079
テーマとして持っています

442
00:24:07,079 --> 00:24:09,099
これに対して

443
00:24:09,099 --> 00:24:12,339
まとまったデザインシステムみたいなものがあるか

444
00:24:12,339 --> 00:24:13,640
ってことだったと思うんですけど

445
00:24:13,640 --> 00:24:15,119
確か僕の記憶があってれば

446
00:24:15,119 --> 00:24:16,740
ちゃんとHuman Interface GuideLineの

447
00:24:16,740 --> 00:24:18,839
タイポグラフィーかどこかのセクションで

448
00:24:18,839 --> 00:24:21,920
ちゃんとこれらのサイズに応じて

449
00:24:21,920 --> 00:24:23,599
どれくらいの本当サイズになっているかとか

450
00:24:23,599 --> 00:24:25,319
まだできていないところもあるんですけど

451
00:24:25,319 --> 00:24:27,380
ちゃんとやっていかなければいけないという認識は

452
00:24:27,380 --> 00:24:30,099
スケッチとかフィグマの中までは見れてないんですけど

453
00:24:30,099 --> 00:24:32,460
多分そのあたりでもある程度カバーされてるんじゃないかな

454
00:24:32,460 --> 00:24:34,359
という風に予想しています

455
00:24:34,359 --> 00:24:35,259
ありがとうございます

456
00:24:35,259 --> 00:24:38,799
ありがとうございました

457
00:24:38,799 --> 00:24:40,579
他にコメントやご質問

458
00:24:40,579 --> 00:24:46,579
そういったことについては

459
00:24:46,579 --> 00:24:49,180
ちゃんと資料としてまとまっていたはずですし

460
00:24:49,180 --> 00:24:54,940
Swift UIでカスタムのビューを作るのって

461
00:24:54,940 --> 00:24:57,519
結構制限が多いイメージで

462
00:24:57,519 --> 00:25:02,819
実際にやられているのはUIキットの世界で作られている

463
00:25:02,819 --> 00:25:03,720
はいそうです

464
00:25:03,720 --> 00:25:05,279
SwiftUIだと外れること

465
00:25:05,279 --> 00:25:07,519
ちょっと標準から外れるというのはかなり

466
00:25:07,519 --> 00:25:12,220
作っています

467
00:25:12,220 --> 00:25:13,299
ありがとうございます

468
00:25:13,299 --> 00:25:18,279
ありがとうございました

469
00:25:18,279 --> 00:25:20,619
他にコメントやご質問のある方

470
00:25:20,619 --> 00:25:21,720
挙手をお願いいたします

471
00:25:21,720 --> 00:25:25,299
よろしいでしょうか

472
00:25:25,299 --> 00:25:29,380
はいではQ&Aを終わらせて終了とさせたり

473
00:25:29,380 --> 00:25:32,319
一気に難易度があるので先ほど見ていただいたものは

474
00:25:32,319 --> 00:25:33,380
すべてUIキットで

475
00:25:33,380 --> 00:25:34,759
フィードバックのお時間になります

476
00:25:34,759 --> 00:25:40,359
1分間フィードバックのお時間です

477
00:25:40,359 --> 00:25:43,339
スクリーンのQRコードを読み取って

478
00:25:43,339 --> 00:25:45,380
フィードバックを送ってください

479
00:25:45,380 --> 00:25:51,720
いただきます

480
00:25:51,720 --> 00:25:55,319
続いて1分間

481
00:26:15,380 --> 00:26:42,119
質問がある方や感想をいただき

482
00:26:42,119 --> 00:26:44,640
お伝えしたい方はぜひご参加ください

483
00:26:45,380 --> 00:26:48,619
それでは松木さんありがとうございました

484
00:26:48,619 --> 00:26:49,180
ありがとうございました

485
00:26:49,180 --> 00:26:49,539
ありがとうございました

