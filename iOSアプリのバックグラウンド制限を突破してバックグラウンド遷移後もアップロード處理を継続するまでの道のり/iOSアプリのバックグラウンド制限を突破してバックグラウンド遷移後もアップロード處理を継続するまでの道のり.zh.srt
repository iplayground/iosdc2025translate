1
00:00:00,000 --> 00:00:05,900
那麼，今天要來跟大家分享我們在「みてね」iOS應用中，關於持續進行背景上傳的挑戰

2
00:00:06,200 --> 00:00:09,000
請容我為各位做個簡報

3
00:00:12,900 --> 00:00:15,200
首先自我介紹

4
00:00:15,300 --> 00:00:17,633
我叫佐藤光

5
00:00:18,433 --> 00:00:21,966
目前在株式会社ミクシー(mixi, Inc.) 的「みてね(Mitene)」事業本部裡

6
00:00:22,033 --> 00:00:25,266
負責開發家族相簿APP「みてね」的 iOS 工程師

7
00:00:28,300 --> 00:00:31,566
今天的分享內容會從「什麼是みてね」開始，

8
00:00:31,600 --> 00:00:35,800
接著會談到去年我們在「みてね」實作的背景上傳功能，

9
00:00:35,800 --> 00:00:44,033
還有去年我們所解決的課題，以及當時採用的解法，最後會談談未來想做的事，

10
00:00:44,033 --> 00:00:47,033
以及如何活用 iOS 26 的新功能

11
00:00:51,233 --> 00:00:55,066
首先，什麼是「みてね」呢？

12
00:00:55,233 --> 00:00:58,300
啊，您有在用Mitene，謝謝

13
00:00:59,666 --> 00:01:05,000
這是一款將孩子的照片和影片分享給家人、享受交流樂趣的智慧型手機應用程式

14
00:01:07,600 --> 00:01:10,566
可以免費、無限制地分享照片和影片

15
00:01:13,466 --> 00:01:15,666
在這裡我想問大家一個問題，

16
00:01:17,300 --> 00:01:21,700
現在在場的各位中，有多少人正在使用Mitene呢？

17
00:01:21,700 --> 00:01:22,666
麻煩請舉個手

18
00:01:31,200 --> 00:01:32,966
大概20%左右嗎？

19
00:01:32,966 --> 00:01:36,233
不好意思，等一下希望能再聽聽各位的意見

20
00:01:36,233 --> 00:01:37,866
謝謝大家

21
00:01:39,900 --> 00:01:43,066
接下來要談的是......

22
00:01:43,066 --> 00:01:45,200
在Mitene這款App中，

23
00:01:45,233 --> 00:01:47,933
因為是分享照片和影片的應用程式，

24
00:01:47,933 --> 00:01:50,000
「上傳」這件事就非常重要

25
00:01:50,000 --> 00:01:53,966
改善上傳體驗，就是我們這次的主題

26
00:01:54,000 --> 00:02:02,566
關於去年我們在「上傳」方面所解決的課題......

27
00:02:02,566 --> 00:02:06,633
首先，課題究竟是什麼呢？

28
00:02:06,666 --> 00:02:10,733
那就是在照片影片上傳過程中，如果切換到背景模式，

29
00:02:10,733 --> 00:02:15,133
上傳會在30分鐘後被中斷，我們遇到了這樣的課題

30
00:02:15,800 --> 00:02:20,166
這就是在 iOS 中被稱為 beginBackbgroundTask

31
00:02:20,166 --> 00:02:21,966
我想很多人可能都知道這個，

32
00:02:22,000 --> 00:02:24,200
這就是它的限制

33
00:02:24,233 --> 00:02:28,700
所以在Mitene上傳就會被中斷

34
00:02:28,700 --> 00:02:33,333
導致在上傳過程中，必須一直開著App才行

35
00:02:34,533 --> 00:02:39,333
在Mitene，一次上傳大量的照片和影片，

36
00:02:39,333 --> 00:02:40,733
是用戶的一種使用傾向，

37
00:02:40,733 --> 00:02:44,933
所以很容易因為這個限制而導致上傳中斷

38
00:02:49,900 --> 00:02:51,266
當上傳被中斷的時候，

39
00:02:51,333 --> 00:02:53,366
雖然現在這個畫面出現的......

40
00:02:53,400 --> 00:02:56,000
出現的條件已經少很多了，

41
00:02:56,033 --> 00:02:58,366
就會像這樣，上傳到一半

42
00:02:58,366 --> 00:03:00,166
上傳被中斷了，

43
00:03:00,166 --> 00:03:03,966
然後你就得『啊～』一聲，重新打開App，

44
00:03:03,966 --> 00:03:05,900
雖然上傳會從中斷的地方繼續，

45
00:03:05,933 --> 00:03:08,033
但就變成得這樣才能繼續

46
00:03:12,066 --> 00:03:17,666
首先，針對這個課題，我們探討了哪些解決方案呢？

47
00:03:17,666 --> 00:03:24,133
第一個方案，在去年算是相當主流的做法，

48
00:03:24,166 --> 00:03:29,800
就是考慮使用 `BGProcessingTask` 作為解決方案

49
00:03:29,833 --> 00:03:34,266
我們也在公司內部舉辦了功能性審查會議，

50
00:03:34,300 --> 00:03:38,533
但結論是這個規格和Mitene的上傳需求不太適合

51
00:03:38,533 --> 00:03:42,866
不適合的地方，大致就是寫在這裡的這幾點，

52
00:03:42,900 --> 00:03:47,433
它會在深夜、充電時，每次大概可以處理約5分鐘，

53
00:03:47,466 --> 00:03:49,566
每30分鐘

54
00:03:49,566 --> 00:03:52,066
雖然是訂在大概每30分鐘，

55
00:03:52,066 --> 00:03:54,700
差不多是這樣運作的

56
00:03:54,700 --> 00:03:56,933
首先，如果在深夜運作的話，

57
00:03:56,966 --> 00:03:59,100
當上傳完成時，

58
00:03:59,133 --> 00:04:01,866
Mitene會發送一個完成通知，

59
00:04:01,866 --> 00:04:03,166
那個通知就會在深夜被發送出去，

60
00:04:03,166 --> 00:04:07,800
這樣家人可能就會以為你『怎麼這麼晚還沒睡』之類的，

61
00:04:07,833 --> 00:04:09,566
我們有這樣的顧慮，

62
00:04:09,566 --> 00:04:13,033
所以最後沒有採用這個方案

63
00:04:13,900 --> 00:04:17,566
ok

64
00:04:17,833 --> 00:04:20,000
解決方案二

65
00:04:20,000 --> 00:04:21,800
我們也姑且評估了「LiveArctivity」，

66
00:04:21,833 --> 00:04:25,833
想說『這個說不定也行』，

67
00:04:26,200 --> 00:04:28,733
但因為它也是 Extension 的一種，

68
00:04:28,733 --> 00:04:33,300
所以沒辦法讓App端的處理程序繼續執行

69
00:04:37,300 --> 00:04:40,266
第三個解決方案

70
00:04:40,266 --> 00:04:42,466
我們最後採用了這個，

71
00:04:42,466 --> 00:04:46,733
就是用「Picture In Picture」製作了原型，

72
00:04:46,766 --> 00:04:49,500
原型大概是做成這個樣子，

73
00:04:49,500 --> 00:04:52,033
在這個UI上，Picture In Pictuire 的

74
00:04:52,033 --> 00:04:55,100
會跑出像這樣影片的操作按鈕，

75
00:04:55,133 --> 00:04:58,633
但透過這個方式，背景上傳

76
00:04:58,633 --> 00:05:03,766
就能不受剛才提到的30秒限制，得以繼續執行，

77
00:05:03,800 --> 00:05:05,133
所以我們採用了這個方案

78
00:05:10,300 --> 00:05:13,833
接下來是我們實際發布的功能

79
00:05:15,100 --> 00:05:17,133
這個有在動嗎?

80
00:05:17,166 --> 00:05:21,766
有在動嗎？咦？沒在動？

81
00:05:27,500 --> 00:05:29,600
哎呀，影片完全不會動

82
00:05:29,633 --> 00:05:31,666
我之後會再上傳簡報資料，

83
00:05:31,666 --> 00:05:34,800
到時候再請大家觀看

84
00:05:36,600 --> 00:05:39,233
實際上開始上傳時，

85
00:05:40,033 --> 00:05:42,000
這個...會動...看來真的不會動呢，抱歉。

86
00:05:43,933 --> 00:05:48,500
會像這樣顯示 Picture In Picture 的畫面，

87
00:05:48,600 --> 00:05:53,733
在上傳過程中切換到背景時，

88
00:05:53,733 --> 00:05:57,900
藉由將 `UIView` 以 Picture In Pictuire 顯示，

89
00:05:57,933 --> 00:06:02,766
我們發布了這個能讓上傳繼續進行的功能

90
00:06:02,800 --> 00:06:09,533
這個功能是 `Mitene Premium Pro` 的限定功能

91
00:06:09,533 --> 00:06:13,600
我們 mixi 也已經提出了專利申請

92
00:06:13,600 --> 00:06:17,533
這裡我還想再問一個問題

93
00:06:17,533 --> 00:06:22,433
在Mitene上傳過程中切換到背景時，

94
00:06:22,466 --> 00:06:26,000
這裡會用 Picture In Picture 顯示一個畫面，

95
00:06:26,000 --> 00:06:29,633
有多少人注意到這件事了呢？

96
00:06:29,666 --> 00:06:32,266
可以的話請舉個手

97
00:06:33,800 --> 00:06:36,566
看來是沒有人呢

98
00:06:38,100 --> 00:06:42,466
順帶一提，剛剛使用Mitene的用戶，

99
00:06:42,466 --> 00:06:45,133
我記得有幾位，

100
00:06:45,133 --> 00:06:47,700
請問有加入 Mitene Premium 的用戶

101
00:06:47,733 --> 00:06:50,566
大概有多少位呢？

102
00:06:53,066 --> 00:06:54,566
2位

103
00:06:54,600 --> 00:06:56,400
謝謝

104
00:06:56,566 --> 00:06:58,933
我們還有一個更進階的方案叫 Premium Pro，

105
00:06:58,933 --> 00:07:00,233
有加入那個方案的......

106
00:07:00,233 --> 00:07:04,566
您是 Premium 方案是嗎？

107
00:07:04,600 --> 00:07:06,733
原來如此，不好意思，謝謝您

108
00:07:07,900 --> 00:07:11,000
Premium Pro 是比較高階的方案，一個月大概1000日圓，

109
00:07:11,033 --> 00:07:13,866
如果有加入那個方案，就會出現

110
00:07:16,666 --> 00:07:21,800
接下來談談這個解決方案誕生的背景

111
00:07:23,033 --> 00:07:25,266
當時在討論 `BGProcessingTask` 方案時，

112
00:07:25,266 --> 00:07:29,566
我們決定要在公司內部進行功能性審查，

113
00:07:29,600 --> 00:07:34,500
在那之前，大家在討論要怎麼請大家協助審查，

114
00:07:34,500 --> 00:07:39,166
大概4個人左右，在討論時冒出的一個點子

115
00:07:39,166 --> 00:07:42,800
那時候聊到 Pictuire In Picture，

116
00:07:42,833 --> 00:07:45,466
『那個是不是能讓App的程序繼續執行啊？』

117
00:07:45,500 --> 00:07:48,066
『好像可以耶』，就聊了這樣的話題

118
00:07:48,066 --> 00:07:52,733
於是我們就試著做了一下，把它加進去，

119
00:07:52,733 --> 00:07:55,266
結果發現『喔！這突破背景限制了耶！』

120
00:07:55,300 --> 00:07:56,333
就變成了那種感覺，

121
00:07:56,333 --> 00:07:59,166
就是這樣

122
00:07:59,166 --> 00:08:00,400
在討論的過程中，

123
00:08:00,433 --> 00:08:04,733
我們也聊到，如果 Picture In PIcture 能維持App程序，

124
00:08:04,733 --> 00:08:08,466
那我們是不是可以播放一個適合的、像樣的本地影片，

125
00:08:08,500 --> 00:08:12,800
一邊播放一邊繼續上傳，『這樣是不是也行得通啊？』

126
00:08:12,800 --> 00:08:16,633
當時也聊了這樣的話題，還滿熱烈的

127
00:08:19,233 --> 00:08:24,166
關於它的機制，大致上是像這個樣子，

128
00:08:24,166 --> 00:08:28,500
我們將 `UIView` 轉換成影片影格，

129
00:08:28,500 --> 00:08:31,633
然後用 Picture In Picture 顯示出來

130
00:08:31,633 --> 00:08:33,766
我們做的就是這樣的事情

131
00:08:33,766 --> 00:08:40,300
之所以要轉換成影片影格，

132
00:08:40,333 --> 00:08:43,333
是因為 Picture In Picture 能夠顯示的

133
00:08:43,333 --> 00:08:47,000
就是影片影格，所以才需要轉換

134
00:08:49,633 --> 00:08:56,566
這個方案，我們大量參考了像這樣的參考資料

135
00:08:58,933 --> 00:09:01,500
我腦中原本就有印象，

136
00:09:01,500 --> 00:09:03,200
『啊，本來就有這種東西』，

137
00:09:03,200 --> 00:09:05,766
大概就是那樣才做出來的

138
00:09:08,966 --> 00:09:14,133
接下來，要談談困難的地方

139
00:09:17,500 --> 00:09:19,466
大致上有三個

140
00:09:20,966 --> 00:09:23,433
要讓 `UIView` 顯示在 PIcture In PIcture

141
00:09:23,433 --> 00:09:25,933
實作本身就很困難；

142
00:09:25,966 --> 00:09:27,766
再來是

143
00:09:27,766 --> 00:09:31,100
切換到背景時自動啟動 PIP；

144
00:09:31,300 --> 00:09:34,933
還有 Picture In Picture 的 UI 顯示和限制，

145
00:09:34,933 --> 00:09:37,500
這些地方都相當困難

146
00:09:42,200 --> 00:09:47,500
我會來稍微深入探討一下這些困難的地方，

147
00:09:47,500 --> 00:09:53,233
首先，是關於將 `UIView` 顯示在 Picture In Picture 的實作，

148
00:09:53,266 --> 00:09:59,033
這個嘛，首先是實作本身就很困難

149
00:09:59,500 --> 00:10:01,133
這個「轉換成影片影格」的部分，

150
00:10:01,133 --> 00:10:02,733
雖然有很多參考資料，

151
00:10:02,766 --> 00:10:06,000
但實際做起來還是有很多困難點

152
00:10:06,033 --> 00:10:11,633
另外，要啟用 Picture In Picture 是有條件的，

153
00:10:11,633 --> 00:10:15,400
像是這些背景模式的條件，

154
00:10:16,000 --> 00:10:16,900
是背景模式的設定才對，

155
00:10:16,933 --> 00:10:18,833
的確認

156
00:10:18,833 --> 00:10:26,033
或是需要設定 `AVAudioSession` 的 category 為 playback 之類的，

157
00:10:26,066 --> 00:10:28,200
這些都很不容易注意到，

158
00:10:28,233 --> 00:10:30,666
雖然參考資料上好像有寫，

159
00:10:30,666 --> 00:10:33,000
但那些地方都很困難

160
00:10:33,033 --> 00:10:36,100
還有，即使 Pictuire In Picture 沒有啟動，

161
00:10:36,100 --> 00:10:38,466
也經常不會回傳錯誤，

162
00:10:38,500 --> 00:10:40,600
導致『怎麼沒有啟動』的狀況。

163
00:10:40,600 --> 00:10:43,400
就變成了那種感覺

164
00:10:45,466 --> 00:10:48,966
為了幫自己回想一下實作方式，

165
00:10:48,966 --> 00:10:52,966
我用最精簡的程式碼公開了範例，

166
00:10:53,000 --> 00:10:58,266
有興趣的人之後可以看看

167
00:11:01,600 --> 00:11:05,400
接下來是實作困難點的一個例子

168
00:11:06,733 --> 00:11:08,266
這個紅框的附近

169
00:11:08,433 --> 00:11:09,566
像是「in Picture in Picture」

170
00:11:09,600 --> 00:11:10,733
這個字串

171
00:11:11,666 --> 00:11:13,066
並不是我們用 Label 顯示的，

172
00:11:13,100 --> 00:11:15,233
它是會自動跑出來的，

173
00:11:15,233 --> 00:11:16,900
有像這樣的狀況，

174
00:11:16,900 --> 00:11:19,633
所以我們得把它設成透明讓它看不見，

175
00:11:19,666 --> 00:11:21,566
我們下了一些這樣的工夫

176
00:11:24,766 --> 00:11:27,300
困難點的第二個

177
00:11:29,433 --> 00:11:30,866
自動...切換到背景時自動...

178
00:11:30,866 --> 00:11:32,700
啟動 Pictuire In Picture

179
00:11:34,833 --> 00:11:36,600
這個就是

180
00:11:37,300 --> 00:11:41,266
可以自動開始PiP的屬性

181
00:11:41,633 --> 00:11:43,100
雖然有這樣的屬性，

182
00:11:43,100 --> 00:11:45,833
但它運作的條件，

183
00:11:45,833 --> 00:11:48,666
並沒有特別寫在文件上，

184
00:11:48,700 --> 00:11:50,300
也許仔細看的話有寫吧，

185
00:11:50,300 --> 00:11:54,566
但我們找不到，所以很困難

186
00:11:55,333 --> 00:11:56,433
條件就是...

187
00:11:56,866 --> 00:11:58,800
照著念的話

188
00:11:58,866 --> 00:12:01,166
像是 `AVSampleBufferDisplayLayer`

189
00:12:01,200 --> 00:12:03,700
就是剛才的影片影格，

190
00:12:03,700 --> 00:12:05,533
它必須已經被繪製出來，

191
00:12:05,533 --> 00:12:07,333
必須事先被繪製出來，

192
00:12:07,333 --> 00:12:09,666
或是在切換到背景之前，

193
00:12:09,700 --> 00:12:12,366
`PictuireInPictureController` 必須已被初始化，

194
00:12:13,000 --> 00:12:13,466
之類的，

195
00:12:13,466 --> 00:12:15,100
還有 delegate 的

196
00:12:15,133 --> 00:12:17,066
這個 method 的布林值

197
00:12:17,100 --> 00:12:18,133
必須是 false 之類的

198
00:12:18,966 --> 00:12:21,266
就是有很多這種看不見的條件，

199
00:12:21,266 --> 00:12:22,866
就是這樣

200
00:12:28,666 --> 00:12:31,266
Delegate 的程式碼大概是長這樣，

201
00:12:31,266 --> 00:12:34,166
大家現在看到的是我們正在用的版本

202
00:12:34,200 --> 00:12:36,500
大概就是像這個樣子

203
00:12:39,733 --> 00:12:41,133
還有，為了在切換到背景時自動

204
00:12:41,133 --> 00:12:43,466
啟動 Picture In PIcture

205
00:12:43,466 --> 00:12:45,333
我們的做法是，

206
00:12:45,366 --> 00:12:49,366
在 root window 上將 Picture In Picture 的 UIView

207
00:12:49,366 --> 00:12:52,866
用這種方式，以看不見的形式加上去，

208
00:12:52,866 --> 00:12:58,800
會這麼做，是為了讓App在上傳過程中，無論從哪個畫面

209
00:12:59,400 --> 00:13:02,600
切換到背景時，都能啟動 ピクチャーインピクチャー，

210
00:13:02,600 --> 00:13:06,866
為了做到這點，我們才用了這樣的架構

211
00:13:10,866 --> 00:13:12,500
第三點

212
00:13:12,566 --> 00:13:16,266
關於 Pictuire In Picture 的 UI 顯示與限制

213
00:13:18,800 --> 00:13:20,466
那個...我突然覺得好緊張，

214
00:13:20,500 --> 00:13:23,133
可以讓我深呼吸一下嗎？

215
00:13:29,400 --> 00:13:31,633
不好意思

216
00:13:31,833 --> 00:13:33,666
還剩幾分鐘...12分鐘

217
00:13:37,200 --> 00:13:38,400
好，我沒問題了

218
00:13:40,833 --> 00:13:42,900
謝謝

219
00:13:42,966 --> 00:13:46,533
然後，Pictuire In Picutre 的 UI 是這樣

220
00:13:47,033 --> 00:13:50,433
會慢慢地顯示出來

221
00:13:52,400 --> 00:13:54,600
會顯示像這樣的 UI

222
00:13:54,600 --> 00:14:00,300
然後，那個...

223
00:14:00,866 --> 00:14:02,566
對。

224
00:14:09,166 --> 00:14:13,866
這個 Picture In Picture 畢竟是為影片設計的模組，

225
00:14:13,900 --> 00:14:17,400
所以會跑出像是播放按鈕或暫停按鈕，

226
00:14:17,433 --> 00:14:20,600
結果是現在也還是會顯示，

227
00:14:20,600 --> 00:14:22,866
現在真的就是這個樣子

228
00:14:22,866 --> 00:14:24,600
左邊有關閉按鈕，

229
00:14:24,633 --> 00:14:27,066
右邊有返回App的按鈕，

230
00:14:27,100 --> 00:14:29,333
中間有暫停按鈕，

231
00:14:29,333 --> 00:14:32,200
還有一個進度條

232
00:14:34,566 --> 00:14:36,566
這部分我們基本上就是維持預設的樣子，

233
00:14:36,600 --> 00:14:38,766
雖然可以為暫停按鈕編寫處理邏輯，

234
00:14:38,766 --> 00:14:40,966
但我們都沒處理

235
00:14:42,433 --> 00:14:47,000
關於這個行為，我們公司內部也討論過

236
00:14:47,000 --> 00:14:49,666
是否要採取什麼對策，

237
00:14:49,700 --> 00:14:52,500
但結論是「這應該沒什麼關係吧？」

238
00:14:52,500 --> 00:14:54,133
「畢竟也不是一直都顯示著」

239
00:14:54,133 --> 00:14:55,566
因為這樣，

240
00:14:55,600 --> 00:15:00,800
我們發布時就真的什麼處理都沒寫，

241
00:15:00,800 --> 00:15:04,633
到目前為止，也沒收到用戶反應說「這個很難懂」

242
00:15:04,666 --> 00:15:08,866
之類的回饋

243
00:15:12,466 --> 00:15:15,166
接下來還是關於限制的部分，

244
00:15:15,200 --> 00:15:18,933
有一個會變全黑的問題

245
00:15:19,400 --> 00:15:23,300
就是從裝置鎖定狀態解除時，

246
00:15:23,300 --> 00:15:28,100
PIP 的畫面有時會變全黑

247
00:15:29,500 --> 00:15:34,833
為了盡可能避免這個現象，

248
00:15:34,866 --> 00:15:39,566
我們對 PIP 的畫面更新，

249
00:15:39,600 --> 00:15:48,100
下了一點工夫，讓它最長、最長也是 1 分鐘就更新一次顯示

250
00:15:51,733 --> 00:15:54,133
還是關於限制的部分

251
00:15:55,000 --> 00:15:56,800
對，這是一段影片，

252
00:15:56,800 --> 00:15:59,233
但看來影片是播不出來了

253
00:15:59,233 --> 00:16:03,433
等我之後上傳簡報資料時

254
00:16:03,466 --> 00:16:05,166
會再放進去

255
00:16:06,233 --> 00:16:07,633
就如同這裡寫的，

256
00:16:07,633 --> 00:16:10,733
如果在其他App啟動了 Picture In Picture，

257
00:16:10,766 --> 00:16:12,266
因為  Picture In Picture，

258
00:16:12,266 --> 00:16:16,100
在一台裝置上只能播放一個，

259
00:16:17,266 --> 00:16:19,133
就會被其他App覆蓋過去，

260
00:16:19,133 --> 00:16:21,133
導致上傳停止，

261
00:16:21,133 --> 00:16:22,900
這是一個限制

262
00:16:23,433 --> 00:16:25,966
例如，Mitene 正在上傳時，

263
00:16:26,000 --> 00:16:28,833
你跑去看了 YouTube，

264
00:16:28,833 --> 00:16:31,566
看 YouTube 是沒問題的，

265
00:16:31,566 --> 00:16:35,466
但看完後，YouTube 如果有加入 Premium 方案，

266
00:16:35,466 --> 00:16:37,200
我記得好像是 Premium 方案沒錯，

267
00:16:37,200 --> 00:16:38,300
切到背景時

268
00:16:38,333 --> 00:16:41,366
它會啟動 Picture In Picture，

269
00:16:42,633 --> 00:16:45,466
一旦它啟動了，我們的就會被「搶走」，

270
00:16:45,900 --> 00:16:47,900
上傳就會因此結束。

271
00:16:51,033 --> 00:16:53,066
啊，出來了

272
00:16:54,400 --> 00:16:56,800
但還是沒辦法播放

273
00:16:58,233 --> 00:17:03,566
接著，是  Picture In Picture 背景上傳 *無法* 解決的問題

274
00:17:06,433 --> 00:17:09,600
無法解決的問題是，

275
00:17:10,933 --> 00:17:13,766
在裝置鎖定時的上傳

276
00:17:16,300 --> 00:17:19,266
Picture In Picture 本身在裝置鎖定時，

277
00:17:19,300 --> 00:17:21,700
並不會被強制終止…

278
00:17:22,433 --> 00:17:26,966
但在那個時間點...應該說，這依裝置而定，

279
00:17:27,000 --> 00:17:33,100
鎖定後，可能過一段時間，也可能馬上，

280
00:17:33,100 --> 00:17:36,133
程序會暫時停止

281
00:17:36,133 --> 00:17:39,433
記憶體的狀態會被保留，

282
00:17:39,466 --> 00:17:44,966
所以解除鎖定時，程序會恢復執行，

283
00:17:45,000 --> 00:17:49,066
但上傳（的連線）會因為逾時而中斷

284
00:17:53,633 --> 00:17:56,200
接下來是關於 Apple 審查的對策。

285
00:17:56,233 --> 00:17:59,000
在審查對策方面，

286
00:17:59,033 --> 00:18:05,533
其實結果是很普通地、沒什麼問題就通過了

287
00:18:06,033 --> 00:18:09,466
那為什麼我們還要特地準備審查對策呢？

288
00:18:09,500 --> 00:18:11,700
是因為  Picture In Picture 的啟動，

289
00:18:11,733 --> 00:18:14,766
必須由用戶操作來啟動，

290
00:18:14,766 --> 00:18:17,800
文件上有這樣的記載

291
00:18:18,333 --> 00:18:20,633
我們不太確定，

292
00:18:20,633 --> 00:18:23,733
「切換到背景」這個動作，

293
00:18:23,766 --> 00:18:26,666
到底算不算是（用戶操作），

294
00:18:26,666 --> 00:18:28,600
因為覺得可能不太好說，

295
00:18:28,633 --> 00:18:33,633
所以想說保險起見，問問看這樣可不可以，

296
00:18:33,633 --> 00:18:35,666
就送審了

297
00:18:36,966 --> 00:18:38,400
結果沒什麼問題就通過了

298
00:18:40,233 --> 00:18:44,333
送審的方式，我想這大家應該很常用

299
00:18:45,633 --> 00:18:48,733
就是在 App Store Connect 的「App Review 相關資訊」

300
00:18:48,733 --> 00:18:49,366
這裡，

301
00:18:49,400 --> 00:18:52,966
在這個紅框的地方，作為備註

302
00:18:52,966 --> 00:18:54,800
寫下功能的詳細說明，

303
00:18:54,800 --> 00:19:00,000
然後附上影片送出

304
00:19:02,266 --> 00:19:03,600
Apple 也沒有對這個功能回覆什麼感想，

305
00:19:03,633 --> 00:19:07,633
就很普通地被核准了

306
00:19:10,733 --> 00:19:11,533
範例程式碼

307
00:19:11,733 --> 00:19:13,600
就是剛才那個

308
00:19:13,633 --> 00:19:18,900
這個我大概沒時間介紹了，

309
00:19:18,900 --> 00:19:22,666
我就簡單說明一下

310
00:19:24,366 --> 00:19:26,833
用 UIView 顯示 PIP，

311
00:19:26,833 --> 00:19:32,600
並且讓 PIP 在切換到背景時自動啟動，

312
00:19:32,633 --> 00:19:34,666
把這部分用最精簡的程式碼

313
00:19:34,700 --> 00:19:38,533
我記得大概用 200 還 300 行左右寫出來了

314
00:19:38,533 --> 00:19:41,833
抱歉，影片還是不能播

315
00:19:42,833 --> 00:19:48,733
等我上傳簡報後，有興趣的人再麻煩看一下

316
00:19:54,566 --> 00:19:58,066
接下來是未來想做的事

317
00:19:58,933 --> 00:20:01,833
活用 iOS26 的 SDK

318
00:20:01,900 --> 00:20:04,000
XCode26

319
00:20:04,800 --> 00:20:08,266
基本上我們是用 RC 版進行了驗證

320
00:20:08,266 --> 00:20:10,366
還剩下...

321
00:20:10,400 --> 00:20:12,433
還有21分鐘

322
00:20:17,866 --> 00:20:21,900
作為 iOS26 和 XCode26 的新功能，

323
00:20:21,900 --> 00:20:27,566
有一個可以在前景啟動的 `BGContinuedProcessingTask`，

324
00:20:27,566 --> 00:20:30,933
在 WWDC 上發表了

325
00:20:31,533 --> 00:20:35,633
這個功能和我們用 Picture In Picture 做的上傳非常相似，

326
00:20:36,300 --> 00:20:37,466
「這是不是能用啊？」

327
00:20:37,500 --> 00:20:39,500
「感覺可以喔？」

328
00:20:39,500 --> 00:20:41,233
公司裡

329
00:20:41,233 --> 00:20:43,200
有很懂 iOS 的

330
00:20:43,233 --> 00:20:44,633
人，

331
00:20:44,633 --> 00:20:47,133
他就去做了調查

332
00:20:47,133 --> 00:20:49,566
如果我也有認真看（WWDC）的話，

333
00:20:49,566 --> 00:20:50,700
或許我也會注意到，

334
00:20:50,733 --> 00:20:53,600
但我也是被提醒了才發現，

335
00:20:53,600 --> 00:20:54,233
所以就覺得

336
00:20:54,233 --> 00:20:56,933
「啊，我真是」

337
00:20:56,966 --> 00:20:59,566
「學習不足啊」，

338
00:20:59,566 --> 00:21:00,600
但還好他提醒了我，

339
00:21:00,633 --> 00:21:02,500
我們才能夠去調查

340
00:21:05,766 --> 00:21:07,966
至於它是什麼樣的東西呢？

341
00:21:08,633 --> 00:21:12,700
它是在前景透過按鈕點擊之類的動作來啟動，

342
00:21:12,733 --> 00:21:20,166
有需要的話，也會顯示在前景。

343
00:21:20,200 --> 00:21:23,433
進度會用 Live Arctivity 顯示，

344
00:21:23,433 --> 00:21:26,266
用戶也可以隨時取消，

345
00:21:26,266 --> 00:21:31,533
按下右邊的按鈕就能取消

346
00:21:33,433 --> 00:21:35,366
它的優點是，

347
00:21:35,400 --> 00:21:40,300
剛才提到的裝置鎖定時無法上傳的問題，

348
00:21:40,333 --> 00:21:42,233
這個問題能被解決，

349
00:21:42,233 --> 00:21:43,166
是個很大的優點，

350
00:21:43,200 --> 00:21:45,700
對 Mitene 來說是個非常大的優點

351
00:21:47,100 --> 00:21:48,666
缺點方面，

352
00:21:48,700 --> 00:21:52,633
我等一下會再說明，

353
00:21:52,633 --> 00:21:55,700
其實沒有什麼太大的缺點，

354
00:21:55,700 --> 00:21:57,533
就是有一些限制，

355
00:21:57,533 --> 00:22:01,333
UI 方面也或多或少會受到一些限制，

356
00:22:01,366 --> 00:22:05,366
勉強要說的話，大概就是這些吧

357
00:22:05,366 --> 00:22:08,866
好，關於 UI，

358
00:22:08,866 --> 00:22:12,866
這張投影片大概全都是影片，

359
00:22:12,866 --> 00:22:15,866
我猜是看不了了

360
00:22:15,866 --> 00:22:17,866
啊，勉強能看到一點。完成的時候，

361
00:22:17,866 --> 00:22:23,233
其實右邊會出現一個 Checkwork 表示完成。

362
00:22:32,700 --> 00:22:34,000
當它縮到狀態列時，

363
00:22:34,000 --> 00:22:38,766
會依裝置而定，但就像這樣變成藍色的。

364
00:22:38,766 --> 00:22:43,466
裝置鎖定時也是像這樣，

365
00:22:43,500 --> 00:22:46,566
會顯示 Live Activity，

366
00:22:46,566 --> 00:22:50,466
這時候一樣可以進行取消之類的動作

367
00:22:54,766 --> 00:22:57,000
可以自訂的部分，

368
00:22:57,033 --> 00:22:59,733
是標題和副標題，

369
00:22:59,733 --> 00:23:02,833
可以放入字串

370
00:23:03,066 --> 00:23:05,233
左側會自動顯示 App 的 Icon

371
00:23:05,566 --> 00:23:10,400
右側則是顯示進度

372
00:23:12,700 --> 00:23:16,666
關於進度顯示的部分，

373
00:23:16,700 --> 00:23:20,466
透過 `completedUnitedCount` 這個變數，

374
00:23:20,466 --> 00:23:23,200
和 `totalUnitedCount` 這個變數，

375
00:23:23,233 --> 00:23:30,966
去指定完成數和總數，就能做出來

376
00:23:32,866 --> 00:23:35,466
當完成數達到總數時，

377
00:23:35,466 --> 00:23:37,200
就會出現這個打勾符號，

378
00:23:37,233 --> 00:23:39,233
規格就是這樣

379
00:23:43,833 --> 00:23:45,533
還有，這是我做了才發現的，

380
00:23:45,533 --> 00:23:50,700
文字顏色和背景顏色好像沒辦法指定，

381
00:23:50,733 --> 00:23:54,933
我覺得在某些情況下可能會很難閱讀。

382
00:23:57,800 --> 00:23:59,466
這就是剛才說的，

383
00:23:59,500 --> 00:24:00,833
縮到狀態列的時候

384
00:24:00,866 --> 00:24:05,033
這個，上面是 iPhone SE3，

385
00:24:05,066 --> 00:24:12,633
SE3 的顯示；下面是 iPhone 16e 的顯示

386
00:24:14,833 --> 00:24:18,933
關於實作方法，

387
00:24:21,733 --> 00:24:23,433
背景模式的指定...

388
00:24:23,433 --> 00:24:24,666
雖然是背景任務，

389
00:24:24,700 --> 00:24:28,966
但它是不需要指定背景模式的

390
00:24:29,000 --> 00:24:31,633
一般在做背景模式時，

391
00:24:31,633 --> 00:24:36,800
不是會在 Xcode 這裡追加 Capability 然後打勾嗎？

392
00:24:36,833 --> 00:24:37,833
Xcode 好像有這個吧。

393
00:24:37,833 --> 00:24:38,833
這個就不需要了。

394
00:24:38,866 --> 00:24:41,966
是連 "Background Modes" 本身都不需要

395
00:24:42,466 --> 00:24:44,200
它就是這樣設計的

396
00:24:47,366 --> 00:24:50,166
plist 裡面需要填入 Background Task 的 ID。

397
00:24:50,200 --> 00:24:52,966
必須把這個加進去

398
00:24:52,966 --> 00:24:56,366
我想這點和其他的 Background Task 是一樣的

399
00:24:58,966 --> 00:25:03,033
程式碼大致上是像這個樣子

400
00:25:03,433 --> 00:25:04,400
現在幾分鐘了？

401
00:25:04,433 --> 00:25:05,400
14分

402
00:25:09,100 --> 00:25:10,666
我稍微解說一下

403
00:25:10,666 --> 00:25:12,500
這個 `register`

404
00:25:12,533 --> 00:25:15,433
`BGTaskScheduler.register`

405
00:25:15,433 --> 00:25:18,433
這個在其他的 background task

406
00:25:18,433 --> 00:25:22,000
要註冊處理程序時，我想也是用一樣的東西，

407
00:25:22,033 --> 00:25:23,733
執行這個之後，

408
00:25:23,733 --> 00:25:27,233
在這個 closure 裡面，會在要被處理時被呼叫，

409
00:25:27,233 --> 00:25:32,333
它會在 main thread 以外的 background thread 執行

410
00:25:32,333 --> 00:25:38,800
之後再把它 casting 成 `BGProcessingTask`，

411
00:25:38,833 --> 00:25:40,800
`expirationHandler` 這邊，

412
00:25:40,800 --> 00:25:43,700
這是在按下取消按鈕時，

413
00:25:43,700 --> 00:25:47,533
或是系統因為某些資源限制

414
00:25:47,533 --> 00:25:49,433
自動取消時也會被呼叫，

415
00:25:49,433 --> 00:25:53,266
我們要寫一個像那樣的 handler，

416
00:25:53,300 --> 00:25:58,700
決定進度的值和管理方式，

417
00:25:58,700 --> 00:26:05,433
把進度的值 +1 之類的，慢慢地 increment 上去，

418
00:26:05,433 --> 00:26:10,566
然後更新標題或副標題，

419
00:26:10,566 --> 00:26:16,166
最後是 `setTaskCompleted`

420
00:26:16,200 --> 00:26:19,500
在這裡傳入一個布林值，表示成功或失敗，

421
00:26:19,533 --> 00:26:23,233
然後就結束了

422
00:26:23,233 --> 00:26:24,733
大概是像這樣

423
00:26:24,733 --> 00:26:30,400
關於提交執行的請求，

424
00:26:30,433 --> 00:26:32,466
是像這個樣子

425
00:26:32,500 --> 00:26:34,933
建立一個 request，

426
00:26:34,933 --> 00:26:38,500
建立 request 時也可以決定標題和副標題，

427
00:26:38,500 --> 00:26:43,866
有兩種 strategy 可以指定，

428
00:26:43,900 --> 00:26:45,833
指定那個，

429
00:26:45,833 --> 00:26:51,733
如果要用 GPU 的話，就要指定說「我要用 GPU」，

430
00:26:51,733 --> 00:26:52,733
做那樣的指定，

431
00:26:52,733 --> 00:26:56,033
然後 `BGTaskScheduler.submit` 出去

432
00:26:56,066 --> 00:26:58,166
就是這樣的感覺

433
00:26:58,166 --> 00:27:03,166
關於「使用 GPU」這部分，

434
00:27:03,200 --> 00:27:04,766
像這樣子，

435
00:27:04,766 --> 00:27:10,566
必須要在 Capability 裡面指定

436
00:27:11,566 --> 00:27:15,233
然後，驗證之後發現了一些事情，

437
00:27:15,266 --> 00:27:18,533
我想跟大家分享一下

438
00:27:20,933 --> 00:27:23,400
首先是...

439
00:27:25,700 --> 00:27:29,933
這個進度的值，基本上為了讓它接近總數，

440
00:27:29,966 --> 00:27:31,333
會去做 increment，

441
00:27:31,333 --> 00:27:34,700
就是會慢慢增加它，

442
00:27:34,733 --> 00:27:37,866
如果這個值一定時間內沒有變化的話，

443
00:27:37,866 --> 00:27:40,633
background task 本身會被停止，

444
00:27:40,633 --> 00:27:44,066
我們確認到了這個現象

445
00:27:44,100 --> 00:27:47,533
從這張圖也可以看出來，

446
00:27:47,566 --> 00:27:52,600
它停止的時間，並不是固定的

447
00:27:52,633 --> 00:27:54,933
以我驗證的感覺是，

448
00:27:54,933 --> 00:27:59,466
它最少會等個 30 秒左右

449
00:28:00,533 --> 00:28:02,633
但大概過了 30 秒，

450
00:28:02,666 --> 00:28:04,733
有時 30 秒，有時 70 秒，

451
00:28:04,733 --> 00:28:06,566
像這個例子就是 70 秒，

452
00:28:06,600 --> 00:28:10,200
一旦沒有變化，系統就會自動把它停掉

453
00:28:10,233 --> 00:28:13,266
它就是這樣的行為

454
00:28:13,566 --> 00:28:18,233
有些處理程序可能是那種不知道進度的，

455
00:28:18,233 --> 00:28:20,933
「雖然不知道進度，但還在跑」的這種，

456
00:28:20,933 --> 00:28:22,633
即使是那種情況，

457
00:28:22,633 --> 00:28:24,866
如果要用 `Continued Background`...

458
00:28:24,900 --> 00:28:29,066
`Continued Processing Task`

459
00:28:29,066 --> 00:28:36,666
如果要用它的話，就必須增加進度的值，

460
00:28:36,700 --> 00:28:40,866
得下點工夫，避免被系統停掉才行

461
00:28:44,166 --> 00:28:46,333
驗證後發現的第二件事

462
00:28:47,633 --> 00:28:51,766
這個嘛，我記得其他的 background task 好像也是一樣的，

463
00:28:51,766 --> 00:28:53,700
它在模擬器上是無法運作的

464
00:28:53,733 --> 00:28:58,466
再來是這個...

465
00:28:58,500 --> 00:29:04,133
至少在 RC 版，Xcode 的 Swift Language Version

466
00:29:04,133 --> 00:29:06,866
我沒有試 4，

467
00:29:06,900 --> 00:29:08,966
5 是沒問題的，

468
00:29:08,966 --> 00:29:12,566
但如果設成 6，在 submit 的時候會 crash。

469
00:29:12,566 --> 00:29:15,200
我們確認到了這個問題

470
00:29:15,233 --> 00:29:20,366
我已經姑且回報了 bug report。

471
00:29:22,266 --> 00:29:28,900
還有，`BGContinuedProcessingTask`...

472
00:29:28,900 --> 00:29:31,966
剛才那個UI

473
00:29:31,966 --> 00:29:35,033
我們發現，一個 App 似乎只能有一個。

474
00:29:35,066 --> 00:29:41,000
就算 submit 了第二個，第二個也無法啟動，

475
00:29:41,000 --> 00:29:45,233
沒辦法同時並行兩三個，

476
00:29:45,233 --> 00:29:51,500
這個...我猜，說不定是一台裝置只能有一個，

477
00:29:51,533 --> 00:29:54,166
至於能不能跨 App，

478
00:29:54,200 --> 00:29:56,833
是一個 App 只能一個呢？

479
00:29:56,833 --> 00:29:58,833
還是一台裝置只能一個？

480
00:29:58,833 --> 00:29:59,666
也許是後者吧，

481
00:29:59,666 --> 00:30:01,533
這部分我們還沒搞清楚。

482
00:30:04,800 --> 00:30:05,800
還有這個...

483
00:30:07,400 --> 00:30:08,900
Picture In Picture 說不定

484
00:30:08,900 --> 00:30:10,833
也是一樣的，

485
00:30:10,866 --> 00:30:14,300
就是在系統本身資源受限的狀態下，

486
00:30:14,300 --> 00:30:17,700
它會很容易被中斷。

487
00:30:22,566 --> 00:30:23,966
這個嘛...

488
00:30:24,000 --> 00:30:26,000
不知道是不是只有

489
00:30:26,000 --> 00:30:28,833
我的驗證裝置才會這樣，

490
00:30:28,833 --> 00:30:30,466
但至少我用來驗證的裝置，

491
00:30:30,500 --> 00:30:32,766
升級到 iOS26...

492
00:30:32,766 --> 00:30:37,033
我有兩台裝置升級了，

493
00:30:37,066 --> 00:30:39,233
那兩台裝置，

494
00:30:39,233 --> 00:30:42,866
自從升到正式版之後，

495
00:30:42,900 --> 00:30:44,666
`BGContinuedProcessingTask`

496
00:30:44,666 --> 00:30:47,433
就完全無法啟動了

497
00:30:48,933 --> 00:30:51,666
我現在有三台 iOS26 的裝置，

498
00:30:51,700 --> 00:30:53,800
其中一台還沒升到正式版，

499
00:30:53,800 --> 00:30:55,700
剛好忘記升級了，

500
00:30:55,700 --> 00:30:57,033
所以還沒升，

501
00:30:57,033 --> 00:30:59,900
那台上面是會動的，

502
00:30:59,933 --> 00:31:01,933
但升到正式版的就動不了

503
00:31:01,933 --> 00:31:03,733
這點讓我很困擾，

504
00:31:03,733 --> 00:31:05,466
我已經在 Developer Forum

505
00:31:05,500 --> 00:31:06,700
問了很多問題。

506
00:31:07,966 --> 00:31:10,700
不過，Apple 的工程師是說

507
00:31:10,700 --> 00:31:13,600
「好像是會動的」，

508
00:31:13,633 --> 00:31:15,133
所以我把 error log 寄過去，

509
00:31:15,133 --> 00:31:19,500
請他們幫我調查了

510
00:31:23,733 --> 00:31:26,666
為了驗證而寫的程式碼，

511
00:31:26,700 --> 00:31:29,266
我也公開在 GitHub 上了

512
00:31:29,266 --> 00:31:33,500
有興趣的人之後可以看看

513
00:31:38,633 --> 00:31:41,700
關於「如果要把這功能加進 Mitene 的上傳」...

514
00:31:41,733 --> 00:31:45,966
我也大概試著做了一下

515
00:31:45,966 --> 00:31:49,066
還沒決定要不要真的採用，

516
00:31:49,066 --> 00:31:52,100
如果要加進 Mitene 的上傳，

517
00:31:52,133 --> 00:31:54,500
那當然，

518
00:31:54,533 --> 00:31:56,566
如果是 iOS26，

519
00:31:56,566 --> 00:31:58,733
就會想用 `BGContinuedProcessingTask`

520
00:31:58,733 --> 00:31:59,933
對吧？

521
00:31:59,933 --> 00:32:02,033
我是這麼想的

522
00:32:03,833 --> 00:32:05,700
好，因為這個影片也...

523
00:32:05,733 --> 00:32:07,833
大家可能也看不懂在幹嘛，

524
00:32:07,833 --> 00:32:11,266
總之我把「試做看看」的影片

525
00:32:11,300 --> 00:32:13,266
貼在簡報裡了

526
00:32:13,266 --> 00:32:14,366
就是這樣

527
00:32:19,633 --> 00:32:22,233
最後是總結

528
00:32:22,266 --> 00:32:26,500
我憑我的感覺做了一個比較表，

529
00:32:26,500 --> 00:32:28,666
大概是這樣

530
00:32:28,700 --> 00:32:30,900
實作的難易度，

531
00:32:30,900 --> 00:32:36,000
PIP 的實作我還是覺得有點難，

532
00:32:36,033 --> 00:32:39,500
但 `ContinuedProcessingTask` 的實作就沒那麼難，

533
00:32:39,500 --> 00:32:41,766
實作本身不難，

534
00:32:41,766 --> 00:32:44,866
鎖定時也能運作，

535
00:32:44,900 --> 00:32:46,100
這點很不錯

536
00:32:46,100 --> 00:32:50,600
UI 的自由度，因為基本上是統一的規格，

537
00:32:50,600 --> 00:32:52,700
所以沒什麼自由度可言

538
00:32:52,700 --> 00:32:56,500
但基本上鎖定時也能上傳，

539
00:32:56,533 --> 00:32:57,733
這點很棒，

540
00:32:57,733 --> 00:33:03,466
所以等 XCode26 支援了之後，想來試試看

541
00:33:03,466 --> 00:33:07,700
總結大概也是這樣

542
00:33:07,700 --> 00:33:10,166
目前是透過 Picture In Picture，

543
00:33:10,200 --> 00:33:13,633
讓 iOS App 也能做到背景上傳，

544
00:33:13,633 --> 00:33:15,000
這是一點，

545
00:33:15,000 --> 00:33:17,866
但鎖定時會停止，

546
00:33:17,900 --> 00:33:22,266
而 iOS26 的 `BGContinuedProcessingTask`

547
00:33:22,266 --> 00:33:25,866
讓我們知道，鎖定時似乎也能上傳了

548
00:33:30,000 --> 00:33:32,666
我的分享差不多到這裡結束了，

549
00:33:32,700 --> 00:33:36,133
Mitene 正在招募工程師，

550
00:33:36,133 --> 00:33:38,133
如果大家有興趣的話，

551
00:33:38,166 --> 00:33:42,700
歡迎來應徵

552
00:33:43,833 --> 00:33:47,466
感謝各位的聆聽

553
00:33:51,900 --> 00:33:53,200
謝謝您的發表

554
00:33:53,300 --> 00:33:55,433
接下來是 Q&A 時間

555
00:33:55,566 --> 00:33:58,866
有任何評論或問題的聽眾，請舉手示意

556
00:34:03,900 --> 00:34:05,666
稍後麥克風會傳過去，請您稍等

557
00:34:06,800 --> 00:34:08,966
謝謝您的分享

558
00:34:08,966 --> 00:34:10,066
內容非常有參考價值

559
00:34:10,200 --> 00:34:11,366
剛才您提到，

560
00:34:11,500 --> 00:34:15,333
如果是 iOS26 之後的版本，

561
00:34:15,333 --> 00:34:18,100
用官方的 API 應該是比較好的，

562
00:34:18,100 --> 00:34:20,900
但根據 App 實際的使用情況，

563
00:34:20,900 --> 00:34:22,966
iOS26 現在的佔比還很低，

564
00:34:23,000 --> 00:34:25,100
所以之前的版本...

565
00:34:25,100 --> 00:34:27,866
我忘記版本號了，

566
00:34:27,900 --> 00:34:30,400
在 26 以前的版本，

567
00:34:30,400 --> 00:34:33,533
我就在想是不是只能用 PIP 了，

568
00:34:33,533 --> 00:34:36,933
看了您的範例程式碼，

569
00:34:36,933 --> 00:34:38,900
我覺得好像做得出來，

570
00:34:38,900 --> 00:34:43,133
但我注意到一點，您寫了「專利申請中」，

571
00:34:43,166 --> 00:34:45,500
我就在想，如果用了那個，會不會被罵，

572
00:34:45,533 --> 00:34:51,433
想請教您，在方便透露的範圍內，專利的範圍大概是到哪裡？

573
00:34:51,433 --> 00:34:53,566
好的，謝謝您的提問。

574
00:34:53,600 --> 00:34:57,433
關於專利，這個嘛...

575
00:34:57,466 --> 00:35:02,766
該怎麼說呢，首先，申請專利的背景是，

576
00:35:02,800 --> 00:35:05,966
我在 mixi 工作，

577
00:35:05,966 --> 00:35:10,633
mixi 本來就傾向把各種功能拿去申請專利，

578
00:35:10,633 --> 00:35:12,933
公司有這樣的活動，

579
00:35:12,966 --> 00:35:14,033
作為其中的一環，

580
00:35:14,066 --> 00:35:17,666
高層...應該說部長，

581
00:35:17,666 --> 00:35:19,400
也說「這個功能是不是該去申請專利」，

582
00:35:19,433 --> 00:35:20,166
雖然是被這樣提醒

583
00:35:20,166 --> 00:35:22,066
才去做的，

584
00:35:22,100 --> 00:35:24,233
總之我們就申請了

585
00:35:24,266 --> 00:35:25,666
至於申請的內容，

586
00:35:25,666 --> 00:35:30,500
我聽說專利在提出申請後

587
00:35:30,533 --> 00:35:33,633
一年半就會公開，

588
00:35:33,666 --> 00:35:36,700
我記得我們是去年 8 月還 9 月提的，

589
00:35:36,733 --> 00:35:38,400
從那時算起一年半，

590
00:35:38,400 --> 00:35:44,566
大概明年 4 月左右應該就能看到了，

591
00:35:44,566 --> 00:35:48,366
詳細內容可能要麻煩您到時去確認，

592
00:35:48,400 --> 00:35:52,200
一方面是請您屆時去確認詳細內容，

593
00:35:52,233 --> 00:35:54,466
另一方面，由我來隨便亂講，可能也會被罵，

594
00:35:54,500 --> 00:35:58,233
所以如果您真的很在意，也許直接詢問 mixi 公司會比較好

595
00:35:58,233 --> 00:35:58,633
不好意思。

596
00:35:58,633 --> 00:36:02,333
不好意思

597
00:36:10,733 --> 00:36:11,900
謝謝您的提問

598
00:36:12,100 --> 00:36:13,933
還有其他評論或問題的聽眾嗎？

599
00:36:14,000 --> 00:36:15,233
請舉手

600
00:36:18,700 --> 00:36:22,333
我拿麥克風過去，請稍等

601
00:36:25,866 --> 00:36:28,100
一個是單純關於剛才那件事，

602
00:36:28,200 --> 00:36:30,266
專利...這裡有很多專家，

603
00:36:30,266 --> 00:36:34,300
如果在這裡細談，大概會牽扯出很多權利問題，

604
00:36:34,300 --> 00:36:36,600
（您那樣回答）真是太好了，這是我的感想。

605
00:36:36,633 --> 00:36:40,533
另外是一個單純的技術性問題

606
00:36:40,533 --> 00:36:42,700
剛才的 Picture In Picture

607
00:36:42,700 --> 00:36:45,400
是被判定為正在播放影片，

608
00:36:45,433 --> 00:36:48,933
所以您有設定了 audio category 對吧

609
00:36:48,933 --> 00:36:51,266
請問，舉例來說，如果用戶

610
00:36:51,300 --> 00:36:55,066
正在用 Apple Music 播放音樂時，

611
00:36:55,066 --> 00:37:00,233
在 audio 方面不會有衝突嗎？

612
00:37:00,266 --> 00:37:02,266
像是音樂播放被中斷之類的

613
00:37:02,300 --> 00:37:03,033
是的是的。

614
00:37:03,033 --> 00:37:04,300
沒有發生嗎？

615
00:37:04,333 --> 00:37:06,166
謝謝您的提問

616
00:37:06,166 --> 00:37:08,366
該說是個好問題嗎...

617
00:37:08,366 --> 00:37:13,466
這正是我們在發布時修正過的地方，

618
00:37:13,500 --> 00:37:16,366
確實如您所說，

619
00:37:16,366 --> 00:37:18,566
它是會衝突的

620
00:37:18,566 --> 00:37:22,966
App...我們一開始發布這個功能時，

621
00:37:23,000 --> 00:37:25,133
App 一啟動，就不管三七二十一，

622
00:37:25,133 --> 00:37:27,066
想說「因為有可能會用到 Picture In Picture」，

623
00:37:27,066 --> 00:37:29,033
就設定了剛才提到的 playback，

624
00:37:29,066 --> 00:37:31,666
但如果那麼做，就會像您說的，

625
00:37:31,666 --> 00:37:34,166
Apple Music 的音樂就會被中斷，

626
00:37:34,200 --> 00:37:37,166
所以我們改成限定在「開始上傳時」

627
00:37:37,166 --> 00:37:41,500
才去做 audio session 的設定。

628
00:37:41,533 --> 00:37:44,433
我們盡可能把（設定的）範圍縮到最小，

629
00:37:44,433 --> 00:37:49,433
雖然下工夫讓音樂不會意外被中斷，

630
00:37:49,433 --> 00:37:55,166
但確實還是存在會互相競爭的這個問題

631
00:37:56,833 --> 00:37:57,933
了解了，謝謝您

632
00:37:57,933 --> 00:37:58,566
謝謝

633
00:37:59,000 --> 00:38:01,766
感謝您的提問

634
00:38:01,866 --> 00:38:04,133
還有其他評論或問題的聽眾嗎？

635
00:38:04,166 --> 00:38:06,200
請舉手

636
00:38:13,266 --> 00:38:15,066
還有沒有其他人呢？

637
00:38:21,833 --> 00:38:23,633
時間差不多到了，

638
00:38:23,633 --> 00:38:24,966
我們的 Q&A 時間到此結束

639
00:38:25,466 --> 00:38:27,966
接下來是 1 分鐘的回饋時間

640
00:38:28,033 --> 00:38:31,733
1 分鐘的回饋時間

641
00:38:31,733 --> 00:38:37,966
請掃描螢幕上的 QR code 來提交您的回饋

642
00:38:58,033 --> 00:39:20,966
感謝您的收看

