1
00:00:08,000 --> 00:00:10,839
這一軌是 Track A。

2
00:00:10,839 --> 00:00:15,339
hash tag 是 #iOSDC #A。

3
00:00:23,079 --> 00:00:26,500
iOSDC Japan 2025
 
6
00:00:41,059 --> 00:00:45,719
iPhone上的MyNumber卡的全部

7
00:00:45,719 --> 00:00:46,380
松館大輝

8
00:00:51,500 --> 00:00:52,500
好的，請多指教。

9
00:00:52,500 --> 00:00:53,979
大家早安！

10
00:00:53,979 --> 00:00:58,119
早上就有這麼多的朋友們聚集在這裡，真的非常感謝大家。

11
00:00:58,119 --> 00:01:01,560
稍微提一下，這裡有咖啡哥的影片不小心被取消了。

12
00:01:01,560 --> 00:01:03,700
有很多不同的事要處理呢。

13
00:01:03,700 --> 00:01:04,700
就是這樣

14
00:01:04,700 --> 00:01:08,480
謝謝主辦單位給我這麼好的會議室。

15
00:01:08,480 --> 00:01:11,540
肉的話題和麵包的話題都不用了。

16
00:01:11,540 --> 00:01:13,620
請注意不要走錯軌了。

17
00:01:13,620 --> 00:01:21,439
今天我會以數位廳的身份站在這裡發言。

18
00:01:21,439 --> 00:01:26,159
我將以「iPhone上的MyNumber卡的全部」為題來進行說明。

19
00:01:26,159 --> 00:01:29,260
6月24日剛剛通過 (MyNumber卡裝在 Wallet 裡面)

20
00:01:29,260 --> 00:01:32,159
我不會問大家還是否有這個東西。

21
00:01:32,159 --> 00:01:37,140
我會好好地按照安裝步驟進行，請稍等一下喔。

22
00:01:37,140 --> 00:01:41,040
如果有安裝的話在聽的時候會比較有感覺

23
00:01:41,040 --> 00:01:42,560
當然就算沒有也一樣有趣

24
00:01:42,560 --> 00:01:45,540
更有趣的應該是iPhone和MyNumber卡和

25
00:01:45,540 --> 00:01:48,920
然後 MyNumber 卡用到的 app。

26
00:01:48,920 --> 00:01:50,540
我們正在專注於數位化的發佈。

27
00:01:50,540 --> 00:01:54,099
這個也是最近已經支援 iPhone 的 MyNumber 卡的功能。

28
00:01:54,099 --> 00:01:55,959
雖然中途也會穿插一些示範，不過

29
00:01:55,959 --> 00:01:59,700
當然，看我的示範能讓大家更瞭解內容這點是理所當然的，不過

30
00:01:59,700 --> 00:02:03,939
我覺得內容應該也能讓大家和周圍的人一起享受、一起覺得有趣

31
00:02:03,939 --> 00:02:09,439
非常希望您能利用這裡的 Wi-Fi 進行下載。

32
00:02:09,439 --> 00:02:14,599
那麼，重新自我介紹一下

33
00:02:14,599 --> 00:02:15,819
我來自數位廳，我是松館。

34
00:02:15,819 --> 00:02:18,800
在數位廳裡，我隸屬於工程師單位。

35
00:02:18,800 --> 00:02:22,000
具體來說，是在面向國民服務的「智慧型手機整合團隊」裡工作。

36
00:02:22,000 --> 00:02:24,599
我們正是負責 iPhone 上的「個人號碼卡（My Number Card）」這個專案。

37
00:02:24,599 --> 00:02:29,900
雖然嚴格來說不能細講，但這是一個我們長期投入的項目。

38
00:02:29,900 --> 00:02:32,560
在進入政府部門之前，我曾在一家名為「Newmo」的公司工作。

39
00:02:32,560 --> 00:02:36,400
那是一家從事自動駕駛與汽車相關領域的公司，

40
00:02:36,400 --> 00:02:38,259
我當時在那裡擔任軟體工程師。

41
00:02:38,259 --> 00:02:41,719
雖然一直在說「數位廳、數位廳」，

42
00:02:41,719 --> 00:02:44,039
但既然難得以數位廳的成員身份站上這個舞台，

43
00:02:44,039 --> 00:02:45,919
我也想稍微談一下關於數位廳的事情。

44
00:02:45,919 --> 00:02:49,539
數位廳是在 2021 年，正值新冠疫情的嚴峻時期成立的。

45
00:02:49,539 --> 00:02:51,520
到目前為止，已經走過第 4 年的尾聲，

46
00:02:51,520 --> 00:02:53,319
現在正式進入第 5 年。

47
00:02:53,319 --> 00:02:56,500
作為政府機構，它是一個相當特別的部門。

48
00:02:56,500 --> 00:02:59,520
不只是由原本的公務員組成，

49
00:02:59,520 --> 00:03:03,039
也包含像我這樣來自民間企業的人才共同參與，

50
00:03:03,039 --> 00:03:05,840
我認為這是一個相當少見的政府機構。

51
00:03:05,840 --> 00:03:11,319
有一段簡短的影片總結了我們四年來的努力。

52
00:03:11,319 --> 00:03:13,479
我想請您稍微看一下。

53
00:03:13,479 --> 00:03:14,819
好的，請多指教。

54
00:03:24,819 --> 00:03:29,000
雖說數位看不見，

55
00:03:29,500 --> 00:03:33,659
一轉眼你會發現，這裡一直就在你身邊。

56
00:03:37,840 --> 00:03:39,240
而且正因為是數位，

57
00:03:39,240 --> 00:03:47,840
像這樣，不用在意時間就能取得所需的證明書，

58
00:03:56,840 --> 00:04:00,740
也能用個人編號卡輕鬆付款，

60
00:04:09,740 --> 00:04:15,740
可以上適合每一個人的課程

61
00:04:20,740 --> 00:04:23,300
參加活動時能確保本人親自到場

62
00:04:30,819 --> 00:04:34,819
忙得走不開的時候，也能不用跑一趟政府機關就辦理手續

63 
00:04:40,199 --> 00:04:45,199
即使患者無法開口說話，也能查看就醫紀錄並確認用藥

64
00:04:47,199 --> 00:04:52,800
隨時隨地，在需要的時候，把所需的東西給需要的人

65
00:04:52,800 --> 00:04:56,399
為每個人提供量身訂製的支持。

66
00:04:56,399 --> 00:05:00,639
我相信可以創造一個對所有人都更友善的社會。

67
00:05:00,639 --> 00:05:04,139
進入每個人的生活中。這個資訊是可以得知的。

68
00:05:07,139 --> 00:05:08,740
數位廳

69
00:05:14,740 --> 00:05:16,519
正如剛才各位所看到的那樣

70
00:05:16,519 --> 00:05:19,199
介紹了各種不同的使用情境。

71
00:05:19,199 --> 00:05:22,459
在多數使用情境中，都會使用到 MyNumber卡。

72
00:05:22,459 --> 00:05:26,740
這張卡呢

73
00:05:26,740 --> 00:05:30,300
有些人有有些人沒有

74
00:05:30,300 --> 00:05:34,279
這是一張所有住在這個國家的人都可以申辦的卡

75
00:05:34,279 --> 00:05:39,220
這張卡片目前已經發行了約9,852萬張。

76
00:05:39,220 --> 00:05:43,819
這個數字大約是全國民的79%。

77
00:05:43,819 --> 00:05:45,819
大概這個房間裡的五個人

78
00:05:45,819 --> 00:05:48,019
如果有五個人，裡面就有四個人擁有的樣子。

79
00:05:48,019 --> 00:05:49,519
這樣的比例是這樣的

80
00:05:49,519 --> 00:05:50,500
大家當然也都有持有

81
00:05:50,500 --> 00:05:53,300
在先進國中，人口超過1億的國家

82
00:05:53,300 --> 00:05:56,240
而且發行的枚數也接近1億枚。

83
00:05:56,240 --> 00:05:59,319
我認為這在全球來說也是了不起的事情

84
00:05:59,319 --> 00:06:02,360
這張卡片

85
00:06:02,360 --> 00:06:04,420
在進入 iPhone 的 MyNumber 卡之前

86
00:06:04,420 --> 00:06:07,980
大家聊聊你們手上的那張塑膠卡片吧。

87
00:06:07,980 --> 00:06:09,620
這個表面呢。

88
00:06:09,620 --> 00:06:11,399
先看正面，上面有

89
00:06:11,399 --> 00:06:16,540
像是大頭照、姓名、住址等等的

90
00:06:16,540 --> 00:06:18,759
大家的基本資訊都有寫在上面。

91
00:06:18,759 --> 00:06:21,939
背面有記載我的個人編號。

92
00:06:21,939 --> 00:06:26,759
再從背面看一下就可以明白了。

93
00:06:26,759 --> 00:06:28,560
這個IC晶片已經附在上面。

94
00:06:28,560 --> 00:06:32,920
其實這個IC晶片會因為卡片製作的時期之類的不同，

95
00:06:32,920 --> 00:06:36,600
這裡的晶片圖樣其實會有所不同。

96
00:06:36,600 --> 00:06:39,560
所以如果您手邊也有的話，

97
00:06:39,560 --> 00:06:42,040
不妨和周圍的人拿來比較看看，或許會很有趣。

98
00:06:42,040 --> 00:06:48,740
這個IC晶片是有ISO7816這個國際標準的。

99
00:06:48,740 --> 00:06:51,759
這裡具有符合該標準的特殊結構。

100
00:06:51,759 --> 00:06:53,839
大家常用的是

101
00:06:53,839 --> 00:06:57,740
從 JPKI-AP 進入，而載入的內容

102
00:06:57,740 --> 00:07:00,300
從這裡可以取得電子憑證

103
00:07:00,300 --> 00:07:02,699
另外所謂的券面輸入輔助AP呢

104
00:07:02,699 --> 00:07:05,040
卡片上的基本資料

105
00:07:05,040 --> 00:07:07,040
以文字形式取得的東西

106
00:07:07,040 --> 00:07:09,660
請輸入為此所需的4位數PIN碼

107
00:07:09,660 --> 00:07:11,740
我想會有人這樣說。

108
00:07:11,740 --> 00:07:13,360
另外最近呢

109
00:07:13,360 --> 00:07:15,079
My Number 駕照也已經開始實施了

110
00:07:15,079 --> 00:07:18,120
也有可以寫入駕照資料的電子憑證

111
00:07:18,120 --> 00:07:22,579
在駕照的數據中，其實包含了大量的AP這樣的構想。

112
00:07:22,579 --> 00:07:28,060
接下來要談的是卡片與 iPhone 要如何進行通訊

113
00:07:28,060 --> 00:07:30,079
比方說會從卡片那邊要求「請輸入四位數的 PIN」之類的

114
00:07:30,079 --> 00:07:33,959
在被要求那類資訊之後，便會透過 NFC 進行通訊

115
00:07:33,959 --> 00:07:37,459
這張卡是採用智能卡（Smart Card）規格的。

116
00:07:37,459 --> 00:07:40,000
這是被稱為APDU的內容，在這個規格裡，這些都有相應的定義

117
00:07:40,000 --> 00:07:42,060
於是就會送出指令

118
00:07:42,060 --> 00:07:44,759
如此一來卡片會回傳

119
00:07:44,759 --> 00:07:47,899
透過解碼該回應

120
00:07:47,899 --> 00:07:49,439
就能把資料取出來

121
00:07:49,439 --> 00:07:51,879
像剛才給大家展示的那種邏輯結構呢

122
00:07:51,879 --> 00:07:54,740
就好像在終端機裡用 cd 指令移動一樣

123
00:07:54,740 --> 00:07:59,639
只要送出指令，就能不斷深入各個階層，整體就是這樣運作的

124
00:07:59,639 --> 00:08:02,800
因為需要一種稱為 APDU 的特定通訊協定

125
00:08:02,800 --> 00:08:04,459
那個地方用四位數密碼來做之類的。

126
00:08:04,459 --> 00:08:07,959
我正在嘗試用一個稍微長一點的密碼來做類似的事情。

127
00:08:07,959 --> 00:08:12,379
因為今天的重點是 iPhone

128
00:08:12,379 --> 00:08:14,839
關於實體卡的部分就先講到這裡

129
00:08:14,839 --> 00:08:18,360
那接下來就來談談要如何讓這張卡能在 iPhone 上使用

130
00:08:18,360 --> 00:08:20,879
在那之前呢，

131
00:08:20,879 --> 00:08:25,459
這是進入持續配送時認知開發的嘗試。

132
00:08:25,459 --> 00:08:28,480
在這之前有一些先行的案例，所以我想看看那些。

133
00:08:28,480 --> 00:08:32,019
所謂的這個「行動駕照」（Mobile Driver’s License）呢

134
00:08:32,019 --> 00:08:37,480
是在 iPhone 的 18013 的第5部分裡被定義的

135
00:08:37,480 --> 00:08:40,120
這就是行動版的駕照

136
00:08:40,120 --> 00:08:42,080
把駕照放進 iPhone 裡

137
00:08:42,080 --> 00:08:43,299
當然不只 iPhone

138
00:08:43,299 --> 00:08:44,259
在行動裝置上

139
00:08:44,259 --> 00:08:45,740
作為國民身分證來說，在全球

140
00:08:45,740 --> 00:08:48,779
像是在美國之類的

141
00:08:48,779 --> 00:08:51,159
在歐盟等地方

142
00:08:51,159 --> 00:08:52,700
把駕照放進行動裝置

143
00:08:52,700 --> 00:08:54,039
的趨勢正在興起

144
00:08:54,039 --> 00:08:57,399
已於 2021 年完成標準化

145
00:08:57,399 --> 00:09:00,100
簡稱為 mDL。

146
00:09:00,100 --> 00:09:05,840
這並不是單純地儲存起來就結束的意思。

147
00:09:05,840 --> 00:09:07,340
可以存入駕照

148
00:09:07,340 --> 00:09:11,779
首先，它具備可選擇性揭露屬性的功能

149
00:09:11,779 --> 00:09:17,279
例如，我只想知道對方是否年滿20歲。

150
00:09:17,279 --> 00:09:19,940
卻去讀取住址或姓名之類的資訊

151
00:09:19,940 --> 00:09:24,279
基本上是沒有必要的資訊，所以

152
00:09:24,279 --> 00:09:27,120
那類資訊就算不揭露也也可以。

153
00:09:27,120 --> 00:09:29,600
對於對方而言，從定義上說到底規定了哪些規格呢

154
00:09:29,600 --> 00:09:33,340
另外，這個 mDL 是 CBOR 這種格式。

155
00:09:33,340 --> 00:09:36,519
大家可能對這個不太熟悉吧。

156
00:09:36,519 --> 00:09:41,220
把以 CBOR 所生成的證明加密數據稱為「Course」。

157
00:09:41,220 --> 00:09:42,799
「CBOR」是什麼呢？

158
00:09:42,799 --> 00:09:45,019
這個也是一個經過正式標準化的格式

159
00:09:45,019 --> 00:09:48,039
在 RSC 8949 中有定義

160
00:09:48,039 --> 00:09:48,879
這是

161
00:09:48,879 --> 00:09:55,279
資料格式跟JSON非常相似呢。

162
00:09:55,279 --> 00:09:57,000
JSON就是大家平常使用的那樣。

163
00:09:57,000 --> 00:09:59,399
因為是以文字進行編碼，

164
00:09:59,399 --> 00:10:03,019
比起二進制，大小會變得更大一些。

165
00:10:03,019 --> 00:10:04,740
這是二進位格式，

166
00:10:04,740 --> 00:10:08,899
會把那些重複、一下子排成一長串的資料

167
00:10:08,899 --> 00:10:09,940
逐步進行編碼，所以

168
00:10:09,940 --> 00:10:12,940
因此，相較於文字形式的資料格式，

169
00:10:12,940 --> 00:10:14,419
也能縮小體積，

170
00:10:14,419 --> 00:10:16,000
通訊成本也會降低。

171
00:10:16,000 --> 00:10:18,059
在 IoT 裝置或這類行動裝置上

172
00:10:18,059 --> 00:10:20,500
是為終端裝置所設計的格式

173
00:10:20,500 --> 00:10:24,700
另外，mDL之間是有相容性的。

174
00:10:24,700 --> 00:10:27,120
像是 NFC、BLE、QR 碼

175
00:10:27,120 --> 00:10:29,759
另外也能透過網際網路的通訊

176
00:10:29,759 --> 00:10:31,740
因此可以正常使用

177
00:10:31,740 --> 00:10:33,500
可以跨平台使用

178
00:10:33,500 --> 00:10:34,779
若以精簡的方式來使用的話

179
00:10:34,779 --> 00:10:35,460
可以縮減大小

180
00:10:35,460 --> 00:10:38,600
另外，剛才也有提到過

181
00:10:38,600 --> 00:10:40,100
當然，隱私也是非常重要的。

182
00:10:40,100 --> 00:10:42,879
因為要是只要一感應就被人擅自取走資料，大家都會很不舒服。

183
00:10:42,879 --> 00:10:45,899
會確實依據使用者的同意來提供資訊。

184
00:10:45,899 --> 00:10:50,399
而且要在透過生物特徵辨識，確實確認是本人之後，

185
00:10:50,399 --> 00:10:53,419
這件事也已經規定好了，會以那樣的方式來開示資訊。
 
186
00:10:53,419 --> 00:10:57,000
因此，已經決定會在 iPhone 上支援這件事。

187
00:10:57,000 --> 00:11:02,019
就是根據這樣的規格呢，

188
00:11:02,019 --> 00:11:07,179
Apple 和 Google 已經在美國開始導入駕照，不過，


189
00:11:07,179 --> 00:11:10,879
美國的駕照並不是由聯邦政府發行的，對吧。

190
00:11:10,879 --> 00:11:12,460
是由各州發行的。

191
00:11:12,460 --> 00:11:15,899
所以 Apple 是從亞利桑那州開始的

192
00:11:15,899 --> 00:11:19,120
Google從愛荷華州開始。

193
00:11:19,120 --> 00:11:22,559
現在有 48 個州，不過

194
00:11:22,559 --> 00:11:27,360
其中有 20 個州已經導入這個 mDL，不過

195
00:11:27,360 --> 00:11:30,480
當然也有依州而定，例如有的州只能用 Apple 的錢包

196
00:11:30,480 --> 00:11:32,240
只能使用 Google 的錢包

197
00:11:32,240 --> 00:11:33,539
也有的是兩種都能用。

198
00:11:33,539 --> 00:11:35,299
或者還沒支援、所以都不能用，

199
00:11:35,299 --> 00:11:36,580
甚至有些州還有自己的錢包系統。

200
00:11:36,580 --> 00:11:38,960
總之，每個州的支援狀況都完全不一樣。


202
00:11:40,820 --> 00:11:43,559
因為駕照數位化的推進

203
00:11:43,559 --> 00:11:46,379
我們打算把那個規格擴充得更通用一些

204
00:11:46,379 --> 00:11:46,919
於是

205
00:11:46,919 --> 00:11:51,799
因此制定了 ISO 23220 這個系列

206
00:11:51,799 --> 00:11:54,399
我們將手機文件縮短稱為 mDoc。

207
00:11:57,399 --> 00:11:59,399
要把它擴充到哪些東西呢

208
00:11:59,399 --> 00:12:00,240
例如說，

209
00:12:00,240 --> 00:12:01,399
例如在這裡。

210
00:12:01,399 --> 00:12:03,840
就是學生證

211
00:12:03,840 --> 00:12:05,379
其中，護照的話

212
00:12:05,379 --> 00:12:08,419
在今年的 WWDC 上其實有一項公告

213
00:12:08,419 --> 00:12:14,120
宣布美國的護照今後將支援 mDoc。

214
00:12:14,120 --> 00:12:20,059
這件事也據說是按照 23220 這個規格來做的。

215
00:12:20,059 --> 00:12:23,120
所以給人的印象是

216
00:12:23,120 --> 00:12:24,360
另外，護照

217
00:12:24,360 --> 00:12:29,139
日本政府在 6 月 24 日讓 iPhone 也能使用個人編號卡（My Number 卡）。

218
00:12:29,139 --> 00:12:33,179
這是作為自然人 ID 的世界首創。

219
00:12:33,179 --> 00:12:37,240
目前可加入 iPhone 的有美國的駕照，和


220
00:12:37,240 --> 00:12:40,600
也就是說，除此之外就只有日本的個人編號卡能加入。

221
00:12:40,600 --> 00:12:43,320
我認為這將會是一項相當先進的嘗試

222
00:12:43,320 --> 00:12:48,179
接下來我想問手機有裝的人

223
00:12:48,179 --> 00:12:50,200
有裝的人可以舉起你的錢包卡片嗎？

224
00:12:50,200 --> 00:12:55,120
可以把這張卡舉起來給我們看看嗎

225
00:12:55,120 --> 00:12:57,179
還不是很多人。

226
00:12:57,179 --> 00:12:59,340
有喔有喔，真是不錯呢

227
00:12:59,340 --> 00:13:01,179
不錯呢，很漂亮呢。（一堆人揮手機）

228
00:13:01,179 --> 00:13:02,940
看起來像是要開始LT(閃電講)了呢。

229
00:13:02,940 --> 00:13:05,820
謝謝

230
00:13:05,820 --> 00:13:08,519
有帶著的人

231
00:13:08,519 --> 00:13:11,519
謝謝您

232
00:13:11,519 --> 00:13:13,820
我想同事會很高興的

233
00:13:13,820 --> 00:13:14,419
謝謝您。

234
00:13:14,419 --> 00:13:20,059
我們稱它為「卡面美術」

235
00:13:20,059 --> 00:13:21,919
這個設計呢

236
00:13:21,919 --> 00:13:23,139
櫻花標誌

237
00:13:23,139 --> 00:13:25,320
拿著的人把它傾斜時

238
00:13:25,320 --> 00:13:27,600
櫻花就會稍微浮現出來

239
00:13:27,600 --> 00:13:28,279
很不錯

240
00:13:28,279 --> 00:13:28,899
要做成什麼樣的好呢？

241
00:13:28,899 --> 00:13:32,820
當然是防偽對策。

242
00:13:32,820 --> 00:13:37,039
這可不只是把圖片放進去而已

243
00:13:37,039 --> 00:13:39,480
還有確實做了程式設計

244
00:13:39,480 --> 00:13:44,080
會隨著傾斜而浮現櫻花的

245
00:13:44,080 --> 00:13:47,500
設計成加入了這種視差效果

246
00:13:47,500 --> 00:13:50,259
這完全是幕後秘辛呢

247
00:13:50,259 --> 00:13:51,960
雖然我覺得他們可能會這麼說，

248
00:13:51,960 --> 00:13:53,460
你們可能會想「為什麼要放這個呢？」

249
00:13:53,460 --> 00:13:56,000
會覺得用富士山不就好了嗎

250
00:13:56,000 --> 00:13:57,100
畢竟它是象徵嘛

251
00:13:57,100 --> 00:13:58,779
就會變成這樣的話題，不過……

252
00:13:58,779 --> 00:14:03,679
富士山對我們住在關東地區的人來說是一個象徵。

253
00:14:03,679 --> 00:14:06,379
對於沖繩的人來說，感覺如何呢？

254
00:14:06,379 --> 00:14:08,659
北海道也沒有富士山嘛

255
00:14:08,659 --> 00:14:10,440
也有各種這樣的說法

256
00:14:10,440 --> 00:14:11,940
這麼一說起各種事情

257
00:14:11,940 --> 00:14:14,399
也有人會想「為什麼是櫻花呢」

258
00:14:14,399 --> 00:14:16,259
因為不管到全國哪裡都是象徵嘛

259
00:14:16,259 --> 00:14:17,960
就把它設定成櫻花

260
00:14:17,960 --> 00:14:20,519
美國的 mDL 是

261
00:14:20,519 --> 00:14:22,759
基本上會把那個州的象徵動物

262
00:14:22,759 --> 00:14:24,100
作為設計元素放進去

263
00:14:24,100 --> 00:14:26,559
而且傾斜一看時也會浮現出各種細節

264
00:14:26,559 --> 00:14:29,399
在日本的情況下，果然簡單就是最好的。

265
00:14:29,399 --> 00:14:32,820
我想果然就是那種禪的感覺吧

266
00:14:32,820 --> 00:14:33,779
就是「櫻花」那種感覺

267
00:14:33,779 --> 00:14:35,220
果然說到櫻花呢

268
00:14:35,220 --> 00:14:37,659
關於日本全國的部分，當然是和 Apple 一起討論

269
00:14:37,659 --> 00:14:41,559
也有各式各樣被否決的方案多得是

270
00:14:41,559 --> 00:14:44,620
真的也有一大堆根本不能給大家看的方案

271
00:14:44,620 --> 00:14:48,299
經過各種嘗試與摸索，最後就定案為這個。

272
00:14:48,299 --> 00:14:52,440
這個功能呢，

273
00:14:52,440 --> 00:14:55,940
現在如同我所說的，是 mDoc 卡。

274
00:14:55,940 --> 00:14:59,259
這個設計也不太好說，不過

275
00:14:59,259 --> 00:15:01,340
所謂的這個「卡片替代電子紀錄」呢

276
00:15:01,340 --> 00:15:04,120
習慣了之後，看見它的時候

277
00:15:04,120 --> 00:15:08,720
大家就會知道，這就是我剛才解釋的 mDoc。

278
00:15:08,720 --> 00:15:11,940
大家今天把它記住帶回去，今後應該會更容易讀懂各種內容。

279
00:15:11,940 --> 00:15:16,580
就是這個 mDoc，還有一開始說明的電子憑證。

280
00:15:16,580 --> 00:15:19,580
日文裡寫作「利用者用代替電子的記録」，不過

281
00:15:19,580 --> 00:15:22,879
這兩個會一起存放在 iPhone 裡

282
00:15:22,879 --> 00:15:24,659
就是這樣的套裝組合

283
00:15:24,659 --> 00:15:28,039
18013-6的部分當然也是如此。

284
00:15:28,039 --> 00:15:29,960
18013的第5部分

285
00:15:29,960 --> 00:15:31,840
還有第7部分的內容

286
00:15:31,840 --> 00:15:33,460
另外 23220 的

287
00:15:33,460 --> 00:15:35,720
是遵循 ISO 標準的

288
00:15:35,720 --> 00:15:40,820
像這樣的利用者證明用電子證明書，和

289
00:15:40,820 --> 00:15:42,220
以及證明用電子證明書之類的

290
00:15:42,220 --> 00:15:44,519
像 Google 這樣的錢包廠商

291
00:15:44,519 --> 00:15:46,679
如果符合這個規範的話

292
00:15:46,679 --> 00:15:49,120
不管這是美國的駕照也好

293
00:15:49,120 --> 00:15:51,120
或是日本的個人號碼卡也好

294
00:15:51,120 --> 00:15:53,279
或者未來可能新出現的

295
00:15:53,279 --> 00:15:55,779
某個國家的某種 ID 之類的

296
00:15:55,779 --> 00:15:59,019
應該都能以完全相同的 API 來使用才對

297
00:15:59,019 --> 00:16:02,759
多虧有這類的標準

298
00:16:02,759 --> 00:16:05,620
比如說，像剛剛已經以這種方式和 Apple 合作的各位

299
00:16:05,620 --> 00:16:06,779
我想應該已經在做了吧

300
00:16:06,779 --> 00:16:08,399
我想也會有接下來才要開始做的人，所以

301
00:16:08,399 --> 00:16:10,720
我想簡單地說明一下。

302
00:16:10,720 --> 00:16:12,759
至於發行呢

303
00:16:12,759 --> 00:16:16,139
指的是實體的個人號碼卡，也就是那張塑膠卡。

304
00:16:16,139 --> 00:16:17,840
尚未持有的人

305
00:16:17,840 --> 00:16:21,500
到您居住地的自治體機關就可以辦理發行。

306
00:16:21,500 --> 00:16:25,840
接下來要談的是這張卡的發行。

307
00:16:25,840 --> 00:16:28,740
需要這兩個。

308
00:16:28,740 --> 00:16:32,940
使用這個從 NFC 讀取電子憑證之後

309
00:16:32,940 --> 00:16:39,460
卡面部分當然是讀取卡面上記載的文字資訊

310
00:16:39,460 --> 00:16:42,620
並把它用於比對。

311
00:16:42,620 --> 00:16:46,799
此外還有自己的自拍，以及券面輸入輔助用的四位數PIN碼

312
00:16:46,799 --> 00:16:50,519
另外也會輸入簽名用密碼，並比對卡片內的照片之類的作業

313
00:16:50,519 --> 00:16:55,759
使用這兩項資訊

314
00:16:55,759 --> 00:16:57,460
所謂的 JPKI 呢

315
00:16:57,460 --> 00:17:01,419
是用於個人編號卡的 PKI

316
00:17:01,419 --> 00:17:02,720
將電子證書送到這裡

317
00:17:02,720 --> 00:17:06,000
在完成像是確認這個人是否真實存在之類的核驗之後

318
00:17:06,000 --> 00:17:07,500
這就是 JPKI 的畫面

319
00:17:07,500 --> 00:17:09,680
以及這張正面的人像照片

320
00:17:09,680 --> 00:17:11,700
則會是 IACA 的發證機關

321
00:17:11,700 --> 00:17:13,960
在這裡提出該 mDoc 的發行申請

322
00:17:13,960 --> 00:17:17,440
在那裡完成發行申請之後

323
00:17:17,440 --> 00:17:19,579
接著將其傳送到 Apple 的伺服器那邊

324
00:17:19,579 --> 00:17:24,099
在 Apple 的伺服器端會向 Wallet 配發 Pass

325
00:17:24,099 --> 00:17:26,380
流程就是如此

326
00:17:26,380 --> 00:17:31,980
從這裡開始就會在數位環境中進行

327
00:17:31,980 --> 00:17:38,819
接下來我們會考慮如何使用已發行到 iPhone 的 My Number 卡

328
00:17:38,819 --> 00:17:42,140
首先從可用性來看，我們提供的有以下這些

329
00:17:42,140 --> 00:17:44,240
最左邊的「マイナポータル」應用程式

330
00:17:44,240 --> 00:17:46,579
這本來就是發行所必需的，所以

331
00:17:46,579 --> 00:17:49,299
我想使用的人應該也很多，不過

332
00:17:49,299 --> 00:17:51,779
如果各位安裝之後想試試看的話

333
00:17:51,779 --> 00:17:53,240
也會有這樣的情況，所以請務必試試看

334
00:17:53,240 --> 00:17:54,960
把卡片感應，然後輸入4位數的PIN碼

335
00:17:54,960 --> 00:17:57,099
用NFC讀取

336
00:17:57,099 --> 00:17:58,940
每次都得這樣做

337
00:17:58,940 --> 00:18:00,920
我想大家都覺得非常麻煩吧

338
00:18:00,920 --> 00:18:03,880
現在只用Face ID就能完成

339
00:18:03,880 --> 00:18:06,359
非常順暢、無縫地

340
00:18:06,359 --> 00:18:08,319
就能登入了

341
00:18:08,319 --> 00:18:10,440
再來呢

342
00:18:10,440 --> 00:18:12,619
接著是 e-Tax 呢

343
00:18:12,619 --> 00:18:13,440
到目前為止

344
00:18:13,440 --> 00:18:15,799
都是用實體卡

345
00:18:15,799 --> 00:18:19,119
可能還感受不到太多的好處，不過

346
00:18:19,119 --> 00:18:25,779
到了3月，報稅季來臨時，我想大家就會覺得確實很方便。

347
00:18:25,779 --> 00:18:30,599
而且在便利商店也能像剛才影片裡示範的那樣使用

348
00:18:30,599 --> 00:18:34,539
在醫院也可以用，是指 My Number 健保卡，不過

349
00:18:34,539 --> 00:18:38,299
因為前陣子 iPhone 也開始支援 My Number 卡了

350
00:18:38,299 --> 00:18:42,359
雖然在醫院端可能還沒有那麼普及

351
00:18:42,359 --> 00:18:44,500
接下來會逐步普及開來

352
00:18:44,500 --> 00:18:48,519
我想在你附近平常固定就診的醫院也能使用的日子應該不會太遙遠

353
00:18:48,519 --> 00:18:54,059
關於電子憑證呢

354
00:18:54,059 --> 00:18:59,220
已整合進 iPhone 版「マイナポータル」App 的 My Number 卡功能，現在可以使用了

355
00:18:59,220 --> 00:19:02,299
有一個寫著「iPhone 的 My Number 卡」的畫面

356
00:19:02,299 --> 00:19:06,460
這裡有「使用者認證用電子憑證」和「證明用電子憑證」的選單

357
00:19:06,460 --> 00:19:08,559
把這個打開之後

358
00:19:08,559 --> 00:19:14,839
就可以看到錢包裡存放的自己的電子憑證資訊

359
00:19:14,839 --> 00:19:17,759
能看得到，就代表有提供 API

360
00:19:17,759 --> 00:19:20,599
在 My Number 卡的選單裡有這樣的……

361
00:19:20,599 --> 00:19:22,140
是有的，不過呢

362
00:19:22,140 --> 00:19:26,279
例如，試著取得用於使用者認證的電子憑證這件事

363
00:19:26,279 --> 00:19:27,240
這麼一想的話

364
00:19:27,240 --> 00:19:28,160
這個呢

365
00:19:28,160 --> 00:19:29,599
竟然來自 Apple

366
00:19:29,599 --> 00:19:32,819
也就是說，Apple 有提供 Swift 的 API

367
00:19:32,819 --> 00:19:34,299
我們來稍微看一下取得的方法

368
00:19:34,299 --> 00:19:37,319
從 PKPassLibrary 取得 Pass 這件事

369
00:19:37,319 --> 00:19:39,299
這是很常見的流程，不過呢

370
00:19:39,299 --> 00:19:40,079
就在這裡有

371
00:19:40,079 --> 00:19:42,980
接下來會展示實際的程式碼

372
00:19:42,980 --> 00:19:44,980
那種像是 My Number 卡那樣的

373
00:19:44,980 --> 00:19:48,900
用來存放高機密且安全的東西

374
00:19:48,900 --> 00:19:53,059
請把它想成具備防篡改性的強固儲存裝置

375
00:19:53,059 --> 00:19:57,200
就算把這個寫上去，也不代表大家就能取得

376
00:19:57,200 --> 00:20:01,539
因為要做這件事需要超特別的權限（Entitlement）

377
00:20:01,539 --> 00:20:02,960
這裡寫著「Secure Element」呢

378
00:20:02,960 --> 00:20:04,779
所謂的 Secure Element，簡單來說就是

379
00:20:04,779 --> 00:20:06,299
這個各位是做不到的，不過

380
00:20:06,299 --> 00:20:09,700
也就是說，做這樣的事就能取得

381
00:20:09,700 --> 00:20:12,000
看這邊的話呢

382
00:20:12,000 --> 00:20:13,900
這裡寫著 JPKIPassContents 呢

383
00:20:13,900 --> 00:20:16,259
有個叫 JPKI 的類別

384
00:20:16,259 --> 00:20:18,279
竟然存在於 Apple 的文件中

385
00:20:18,279 --> 00:20:21,500
這已經是專門給日本的個人號碼卡用的類別了

386
00:20:21,500 --> 00:20:23,720
要把 Pass 放進去

387
00:20:23,720 --> 00:20:25,380
用那個就能取到

388
00:20:25,380 --> 00:20:26,619
這只是單純的炫耀

389
00:20:26,619 --> 00:20:28,059
不好意思，指的是「利用者證明用」的

390
00:20:28,059 --> 00:20:29,779
是一個把各種東西都包含進去的內容

391
00:20:29,779 --> 00:20:32,799
在這個 Identity 物件上

392
00:20:32,799 --> 00:20:35,200
呼叫 Certificate 方法的話

393
00:20:35,200 --> 00:20:36,880
就可以取得憑證

394
00:20:36,880 --> 00:20:40,059
這裡傳入的是認證的方式

395
00:20:40,059 --> 00:20:44,960
如果是用於利用者證明的話，就能以生物辨識來替代 4 位數 PIN 碼

396
00:20:44,960 --> 00:20:47,140
因此把它傳入並進行初始化之後呢

397
00:20:47,140 --> 00:20:49,859
就會得到一個稱為使用者身分識別（User Identity）的物件

398
00:20:49,859 --> 00:20:53,900
他們為日本提供了功能非常豐富的 API

399
00:20:53,900 --> 00:20:56,160
同樣地呢

400
00:20:56,160 --> 00:20:57,859
不只是取得憑證而已

401
00:20:57,859 --> 00:20:59,319
也能進行簽署

402
00:20:59,319 --> 00:21:02,279
也可以對資料進行簽署

403
00:21:02,279 --> 00:21:05,319
這個其實也算是幕後花絮啦

404
00:21:05,319 --> 00:21:09,319
其實還有一點是可以用一次生物辨識來替代的

405
00:21:09,920 --> 00:21:12,160
已經被定義並做成了 API

406
00:21:12,160 --> 00:21:16,299
有點微妙地想要一次由多人進行簽署的

407
00:21:16,299 --> 00:21:18,640
我們這邊也有這樣的使用情境

408
00:21:18,640 --> 00:21:22,019
於是我們就提出了「這個 API 沒辦法因應」的回饋

409
00:21:22,019 --> 00:21:25,720
結果對方就做了相應的支援

410
00:21:25,720 --> 00:21:28,759
這個也已經確實寫進文件裡了

411
00:21:28,759 --> 00:21:32,799
一次只能對單一筆目標資料進行簽章

412
00:21:32,799 --> 00:21:35,460
而且說明文件也都有好好放進去了

413
00:21:35,460 --> 00:21:37,779
這個在 Apple Developer 上

414
00:21:37,779 --> 00:21:40,240
用 JPKIPassContents 查一下的話

415
00:21:40,240 --> 00:21:43,339
剛剛提到的只為我們而製作的

416
00:21:43,339 --> 00:21:46,460
My Number 專用類別的說明文件可以看到

417
00:21:46,460 --> 00:21:48,759
這也只是單純的自誇啦，不過

418
00:21:48,759 --> 00:21:50,619
因為我有幫忙做過審閱

419
00:21:50,619 --> 00:21:54,160
如果能請各位看看就好了，我是這麼想的

420
00:21:54,160 --> 00:21:56,200
這真的是在炫耀，對不起

421
00:21:56,200 --> 00:21:59,039
這個不好意思

422
00:21:59,039 --> 00:21:59,720
正如我剛才所說

423
00:21:59,720 --> 00:22:02,640
只要大家把剛才的程式碼寫出來的話

424
00:22:02,640 --> 00:22:04,119
完全不是能夠取出的東西

425
00:22:04,119 --> 00:22:06,059
要是那麼輕易就被取出來也會很困擾，所以

426
00:22:06,059 --> 00:22:09,920
這個如果不向 Apple 發出網路請求的話

427
00:22:09,920 --> 00:22:11,660
就無法做到，是這樣的設計

429
00:22:16,160 --> 00:22:18,940
這就是我先前提到的 My Number 卡面對面確認應用程式

430
00:22:18,940 --> 00:22:23,519
這原本是用來檢查實體卡片的真偽性

431
00:22:23,519 --> 00:22:25,420
總之，就是把IC晶片裡的資訊與

432
00:22:25,420 --> 00:22:28,660
卡面上記載的資訊，能夠用肉眼確實地

433
00:22:28,660 --> 00:22:32,160
對照比對並確認是相符的

434
00:22:32,160 --> 00:22:35,019
覺得哪裡可疑的人就請看一下

435
00:22:35,019 --> 00:22:37,599
接下來是下一個案例

436
00:22:37,599 --> 00:22:40,720
一開始也不是只是看了新聞就採取對策，

437
00:22:40,720 --> 00:22:43,859
而是實際上發生了My Number卡（個人號卡）卡面被偽造的事件，

438
00:22:43,859 --> 00:22:45,940
這幾年也陸陸續續在發生，

439
00:22:45,940 --> 00:22:48,140
這就是為了此類對策而製作的應用程式，

440
00:22:48,140 --> 00:22:51,079
在這裡用iPhone把這張My Number卡…

441
00:22:51,079 --> 00:22:53,440
由於已搭載了當面讀取功能

442
00:22:53,440 --> 00:22:56,099
這部分我想透過一個簡單的示範給大家看看

445
00:23:02,519 --> 00:23:03,519
有畫面了嗎？好的 

446
00:23:03,519 --> 00:23:10,339
這裡是當面確認應用程式的畫面

447
00:23:10,339 --> 00:23:12,259
這個我們稱為讀取器

448
00:23:12,259 --> 00:23:13,559
另外還有一個

449
00:23:13,559 --> 00:23:16,019
這邊還有一台

450
00:23:16,019 --> 00:23:18,019
這裡有個人編號卡的

451
00:23:18,019 --> 00:23:24,779
想在這個讀取器這邊確認的內容

452
00:23:24,779 --> 00:23:25,740
有幾項

453
00:23:25,740 --> 00:23:29,400
我想大家對我的個人資料應該沒那麼有興趣，所以

454
00:23:29,400 --> 00:23:34,640
今天想確認我是否已滿20歲

455
00:23:34,640 --> 00:23:37,579
雖然說看了就知道啦，不過

456
00:23:37,579 --> 00:23:41,440
最近被叫帥哥

457
00:23:41,440 --> 00:23:43,799
用這兩支 iPhone

458
00:23:43,799 --> 00:23:47,819
在這裡按下確認就會跳出這樣的畫面

459
00:23:47,819 --> 00:23:49,500
會顯示「請在這裡感應」

460
00:23:49,500 --> 00:23:52,039
確實是從 My Number 卡面對面確認 App…

461
00:23:52,039 --> 00:23:53,799
這裡會出現「必須」的提示

462
00:23:53,799 --> 00:23:56,619
就照這裡寫的那樣拿去感應對吧

463
00:23:56,619 --> 00:23:58,619
拿去感應的話

464
00:23:58,619 --> 00:24:01,779
這個支架

465
00:24:01,779 --> 00:24:03,900
因為規定不能用紙來判斷

466
00:24:03,900 --> 00:24:07,900
為什麼這個要用密碼

467
00:24:07,900 --> 00:24:08,440
居然被允許啊

468
00:24:08,440 --> 00:24:10,619
不好意思，我先輸入一下密碼喔

469
00:24:10,619 --> 00:24:12,680
做示範的時候會有這種情況嘛

470
00:24:12,680 --> 00:24:13,279
像這種的

471
00:24:13,279 --> 00:24:23,539
在這裡

472
00:24:23,539 --> 00:24:26,319
會出現「可以提供給這個應用程式嗎」的提示

473
00:24:26,319 --> 00:24:29,680
如果這樣做的話

474
00:24:29,680 --> 00:24:32,240
在另一台裝置上會顯示自己的臉部照片，

475
00:24:32,240 --> 00:24:36,039
以及「我已滿20歲」這項資訊會顯示出來，就是這樣。

476
00:24:36,039 --> 00:24:38,160
不錯吧

477
00:24:38,160 --> 00:24:45,559
這個就如同一開始所說的

478
00:24:45,559 --> 00:24:47,920
因為會被要求用 Face ID 來做

479
00:24:47,920 --> 00:24:49,700
用 Face ID 認證之後

480
00:24:49,700 --> 00:24:51,619
另外在休息時間稍微……

481
00:24:51,619 --> 00:24:53,640
就說「喂，來確認一下年紀吧」

482
00:24:53,640 --> 00:24:55,859
像這樣操作 iPhone 的話

483
00:24:55,859 --> 00:24:57,079
我覺得也可以

484
00:24:57,079 --> 00:24:57,599
你看

485
00:24:57,599 --> 00:25:02,460
我想根據不同的情境，想提供的資訊也會不同，所以

486
00:25:02,460 --> 00:25:04,500
只限 20 歲以上

487
00:25:04,500 --> 00:25:05,700
只要傳達完就好吧，之類的

488
00:25:05,700 --> 00:25:07,319
那種時候就寫「20 歲以上」

489
00:25:07,319 --> 00:25:09,099
大家也都辦得到

490
00:25:09,099 --> 00:25:11,599
在場次進行中悄悄做也沒關係

491
00:25:11,599 --> 00:25:12,119
像地址等等

492
00:25:12,119 --> 00:25:14,140
真正進行身分驗證所需的資訊

493
00:25:14,140 --> 00:25:17,119
可以選擇性公開的功能

494
00:25:17,119 --> 00:25:18,180
已內建

495
00:25:18,180 --> 00:25:23,420
關於這背後的機制呢

496
00:25:23,420 --> 00:25:26,359
我們會再用圖來說明

497
00:25:26,359 --> 00:25:28,579
當然是使用 mDoc 來進行的

498
00:25:28,579 --> 00:25:31,799
也可以實際對外公開

499
00:25:31,799 --> 00:25:35,720
另外也會向持有者請求 mDoc（例如姓名等）

500
00:25:35,720 --> 00:25:41,859
就是把這兩支 iPhone 靠在一起感應

501
00:25:41,859 --> 00:25:44,119
只要一感應，就會透過 NFC 進行連線。

502
00:25:44,119 --> 00:25:47,759
此時會建立藍牙連線，

503
00:25:47,759 --> 00:25:50,259
接著就算把它拿開也沒問題，

504
00:25:50,259 --> 00:25:53,220
在裝置座上，放著讀取端與持有者端的

505
00:25:53,220 --> 00:25:54,519
兩支 iPhone，

506
00:25:54,519 --> 00:25:56,440
由讀取端那邊核准之後，

507
00:25:56,440 --> 00:26:00,680
該資訊會透過 BLE 傳送，

508
00:26:00,680 --> 00:26:02,279
確認為 20 歲以上。

509
00:26:02,279 --> 00:26:03,839
也可以顯示姓名，不過

510
00:26:03,839 --> 00:26:07,160
系統是設計成可以像這樣出示資訊的。

511
00:26:07,160 --> 00:26:08,960
這個功能本身呢

512
00:26:08,960 --> 00:26:10,299
剛才還擺出一副得意臉

513
00:26:10,299 --> 00:26:12,740
這個我剛才說需要特殊的權限，不過

514
00:26:12,740 --> 00:26:15,740
在完成關於是否可提供 mDoc 的認證之後，

515
00:26:15,740 --> 00:26:17,279
接著用 Face ID 來

516
00:26:17,279 --> 00:26:20,559
這個 Proximity Reader 的身分顯示

517
00:26:20,559 --> 00:26:22,859
就是這段文字。雖然不一定要直接輸入也可以

518
00:26:22,859 --> 00:26:26,400
在 Xcode 的 Capabilities 裡有個 Display 的項目，因此

519
00:26:26,400 --> 00:26:28,380
把那個項目加上去之後

520
00:26:28,380 --> 00:26:34,039
大家也就能做出像剛才那樣的面對面確認好友應用，大致上就是這種感覺。

521
00:26:34,039 --> 00:26:38,220
這不是什麼特別的功能，而是一般可使用的授權機制

522
00:26:38,220 --> 00:26:42,819
現在只是用來顯示而已，所以資料並沒有傳送到應用程式

523
00:26:42,819 --> 00:26:45,180
因此，昨天在某個環節也有提到過

524
00:26:45,180 --> 00:26:47,039
就算截圖當然也不會被拍到

525
00:26:47,039 --> 00:26:51,019
也無法將那些資料保存下來

526
00:26:51,019 --> 00:26:52,400
身分確認的使用情境

527
00:26:52,400 --> 00:26:57,220
我聽說昨天也有提到犯收法《洗錢防製法》的內容

528
00:26:57,220 --> 00:27:04,039
若是想用於僅供出示、且需要高速處理的情況

529
00:27:04,039 --> 00:27:08,180
就不是用顯示，而是會使用名為資料傳輸 API 的東西

530
00:27:08,180 --> 00:27:10,259
這部分就，真的很抱歉

531
00:27:10,259 --> 00:27:12,579
又需要一些比較特別的娛樂，

532
00:27:12,579 --> 00:27:16,440
不過這個比剛才的 JPKI 話題還要再輕鬆一些，

533
00:27:16,440 --> 00:27:18,480
我們也有妥善準備好表單，

534
00:27:18,480 --> 00:27:21,519
像犯收法之類的有資料保存要件，

535
00:27:21,519 --> 00:27:25,000
因此會確實把那些資料附上，

536
00:27:25,000 --> 00:27:26,160
請放心。

537
00:27:26,160 --> 00:27:29,680
我剛才稍微提到了一下犯收法，

538
00:27:29,680 --> 00:27:30,640
所謂的犯收法呢

539
00:27:30,640 --> 00:27:31,720
抱歉

540
00:27:31,720 --> 00:27:33,539
對於不懂的人，真的很抱歉的感覺

541
00:27:33,539 --> 00:27:35,220
所謂的 EKYC(客戶身份確認義務)

542
00:27:35,220 --> 00:27:39,059
想要在線上進行身分驗證的時候

543
00:27:39,059 --> 00:27:42,339
只要從那邊提出申請就可以

544
00:27:42,339 --> 00:27:44,759
只要用途正當的話

545
00:27:44,759 --> 00:27:46,519
應該會被要求提供身分證件吧

546
00:27:46,519 --> 00:27:47,000
抱歉

547
00:27:47,000 --> 00:27:49,680
那個好像還不支援在 iPhone 上使用個人編號卡

548
00:27:49,680 --> 00:27:51,900
選擇「個人編號卡」的話

549
00:27:51,900 --> 00:27:54,779
會要你用照片這樣拍之類的

550
00:27:54,779 --> 00:27:56,460
還會要你確認厚度之類的，不是嗎

551
00:27:56,460 --> 00:27:58,500
那也算是其中一種方法啦

552
00:27:58,500 --> 00:28:00,200
這次在法律方面也稍微

553
00:28:00,200 --> 00:28:02,059
雖說是法律，聽起來好像很大條

554
00:28:02,059 --> 00:28:04,359
我想大家當然都買了 iPhone

555
00:28:04,359 --> 00:28:06,519
在把 iPhone 拿去做舊機折抵之類的時候

556
00:28:06,519 --> 00:28:08,519
關於是否同意進行身分確認的

557
00:28:08,519 --> 00:28:10,400
都會密密麻麻地列了一大堆

558
00:28:10,400 --> 00:28:11,740
我們把那部分稍微做了修正

559
00:28:11,740 --> 00:28:14,460
也有寫明可以用這個 mDoc 來做身分確認

560
00:28:14,460 --> 00:28:19,319
如果按照我接下來要說明的方法來做身分確認的話

561
00:28:19,319 --> 00:28:23,680
可以製作符合犯收法規範的身分驗證

562
00:28:23,680 --> 00:28:26,380
有一個犯收法的施行規則

563
00:28:26,380 --> 00:28:28,579
關於施行規則，是以什麼手段

564
00:28:28,579 --> 00:28:29,339
是這樣規定的

565
00:28:29,339 --> 00:28:33,619
不好意思，剛剛話說到一半

566
00:28:33,619 --> 00:28:35,599
用這些資料進行移轉的話

567
00:28:35,599 --> 00:28:40,559
當然也能拍剛才的臉部照片，不過

568
00:28:40,559 --> 00:28:43,680
此外，年齡也有三種模式 

569
00:28:43,680 --> 00:28:46,759
因為會先直接取出出生年月日

570
00:28:46,759 --> 00:28:50,559
相關的人請之後稍微查查看

571
00:28:50,559 --> 00:28:54,579
那邊的認證等級也可以調整。

572
00:28:54,579 --> 00:28:57,539
另外還有像姓名、地址、性別等等。

573
00:28:57,539 --> 00:28:58,400
還有 My Number。

574
00:28:58,400 --> 00:29:00,920
至於 My Number，我不確定各位是否會去蒐集。

575
00:29:00,920 --> 00:29:03,299
不過 My Number 的要求會更嚴格一些。

576
00:29:03,299 --> 00:29:04,940
可以取得這類屬性。

577
00:29:04,940 --> 00:29:07,500
大致就是這樣。

578
00:29:07,500 --> 00:29:10,119
有一種是全部取得的模式，也有一種只取得實際年齡的模式。

579
00:29:10,119 --> 00:29:12,559
就像剛剛展示的那樣，只判斷是否為20歲以上之類的。

580
00:29:12,559 --> 00:29:13,640
那我們就快速進行吧。

581
00:29:13,640 --> 00:29:15,259
關於 API 的用法呢

582
00:29:15,259 --> 00:29:17,119
這很簡單

583
00:29:17,119 --> 00:29:19,500
指定屬性

584
00:29:19,500 --> 00:29:21,720
指定屬性後建立 Request 物件

585
00:29:21,720 --> 00:29:23,660
在 Reader 物件上

586
00:29:23,660 --> 00:29:25,720
呼叫名為 prepare 的方法之後

587
00:29:25,720 --> 00:29:27,680
在 Reader 裡，可與其搭配使用的 Session 會

588
00:29:27,680 --> 00:29:28,519
被注入進來，所以

589
00:29:28,519 --> 00:29:29,420
針對這個

590
00:29:29,420 --> 00:29:32,220
糟了，該不會只剩下10分鐘吧

591
00:29:32,220 --> 00:29:34,700
稍微順暢一點

592
00:29:34,700 --> 00:29:36,480
在資料的情況下

593
00:29:36,480 --> 00:29:38,599
雖然介面幾乎相同

594
00:29:38,599 --> 00:29:39,660
常見的錯誤是

595
00:29:39,660 --> 00:29:44,640
是否要將傳遞給請求的屬性保留一段時間

596
00:29:44,640 --> 00:29:45,839
有像這樣的介面

597
00:29:45,839 --> 00:29:49,619
這個基本上我覺得不用保留

598
00:29:49,619 --> 00:29:52,539
如果傳遞帶有需要保留這類要件的請求

599
00:29:52,539 --> 00:29:53,720
就會顯示此畫面

600
00:29:53,720 --> 00:29:55,740
用起來非常簡單呢

601
00:29:55,740 --> 00:29:59,700
因為從 iOS 26 開始回應的型別竟然變成了 protocol

602
00:29:59,700 --> 00:30:02,480
可以寫得更短一點，我很開心

603
00:30:02,480 --> 00:30:03,559
就只是這樣而已

604
00:30:03,559 --> 00:30:05,980
不過這方面的共通化其實

605
00:30:05,980 --> 00:30:10,880
是依據剛才提到的23220的國際標準

606
00:30:10,880 --> 00:30:12,880
應該說是仿照它吧

607
00:30:12,880 --> 00:30:14,559
我覺得有的話保留就好

608
00:30:14,559 --> 00:30:18,099
從 iOS 26 開始

609
00:30:18,099 --> 00:30:20,819
也在進行共通化，以便能夠以相同方式使用

610
00:30:20,819 --> 00:30:22,000
我的理解是這樣

611
00:30:22,000 --> 00:30:26,299
剛才在呼叫 Prepare 的時候之所以不需要的是

612
00:30:26,299 --> 00:30:29,259
雖然我們有取得 token

613
00:30:29,259 --> 00:30:32,000
這個我簡單說明一下它的機制是怎麼運作的

614
00:30:32,000 --> 00:30:34,259
是數位廳的伺服器，另外還有

615
00:30:34,259 --> 00:30:36,779
因為有 Apple Business 的共通機制在運作

616
00:30:36,779 --> 00:30:40,859
我們會以護照或其他身分證明文件來簽發

617
00:30:40,859 --> 00:30:44,160
這把公開金鑰我們稱為 ABR，不過

618
00:30:44,160 --> 00:30:45,819
一旦註冊到 ABR 那邊之後

619
00:30:45,819 --> 00:30:50,599
就會由數位廳的伺服器簽發 ID 權杖

620
00:30:50,599 --> 00:30:56,700
把這個權杖透過 Prepare 送出之後

621
00:30:56,700 --> 00:30:58,140
有個名為「レジスタル」的東西

622
00:30:58,140 --> 00:31:02,220
在數位伺服器上產生一組公私鑰對

623
00:31:02,220 --> 00:31:05,119
這麼做就能用了，基本上就是這個意思

624
00:31:05,119 --> 00:31:07,240
如果要說為什麼要這樣做的話

625
00:31:07,240 --> 00:31:11,079
現在這個應用屬於在 ABR 註冊的品牌

626
00:31:11,079 --> 00:31:12,980
所謂「品牌」是另一個概念

627
00:31:12,980 --> 00:31:15,720
和那個品牌確實有正確綁定起來了對吧，還有

628
00:31:15,720 --> 00:31:17,920
另外就是所謂的證明（Attestation）

629
00:31:17,920 --> 00:31:20,740
只要正確送出，ABR 那邊就會

630
00:31:20,740 --> 00:31:23,859
會使用公開金鑰來驗證該權杖

631
00:31:23,859 --> 00:31:25,519
這樣取得 Session 之後

632
00:31:25,519 --> 00:31:31,240
在倒數第二個的 prepare 方法中

633
00:31:31,240 --> 00:31:33,839
就可以傳入 token 字串

634
00:31:33,839 --> 00:31:37,220
這裡回傳的型別

635
00:31:37,220 --> 00:31:40,339
基本上是有型別的

636
00:31:40,339 --> 00:31:43,200
用來確認是不是允許發出請求的應用程式

637
00:31:43,200 --> 00:31:45,099
也就是說是在做這樣的確認

638
00:31:45,099 --> 00:31:48,440
住所的話會以名為 PostalAddress 的型別回傳

639
00:31:48,440 --> 00:31:50,460
年齡當然希望是以 int 回傳

640
00:31:50,460 --> 00:31:51,519
比方說希望以 int 回傳之類的

641
00:31:51,519 --> 00:31:54,460
會以那種很方便的方式幫我們處理

642
00:31:54,460 --> 00:31:56,059
其實不僅如此

643
00:31:56,059 --> 00:31:59,460
關於 mDoc 是否確實具有真實性

644
00:31:59,460 --> 00:32:01,220
其實也有在做確認

645
00:32:01,220 --> 00:32:04,059
如果是姓名的話

646
00:32:04,059 --> 00:32:06,539
會以 PersonNameComponents 這種形式

647
00:32:06,539 --> 00:32:07,380
回傳過來

648
00:32:07,380 --> 00:32:10,200
對這一點的驗證其實也

649
00:32:10,200 --> 00:32:11,859
由 Apple 那邊幫我們做

650
00:32:11,859 --> 00:32:14,259
所以我們可以不必擔心就能使用

651
00:32:14,259 --> 00:32:16,359
總之，什麼都不用想

652
00:32:16,359 --> 00:32:19,740
用資料請求就行了，不過呢

653
00:32:19,740 --> 00:32:21,500
只有一件小事呢

654
00:32:21,500 --> 00:32:23,180
有個遺憾的消息

655
00:32:23,180 --> 00:32:24,279
關於這個地址的

656
00:32:24,279 --> 00:32:26,119
在 mDoc 裡面

657
00:32:26,119 --> 00:32:27,759
Mobile Security Object

658
00:32:27,759 --> 00:32:29,720
有個簡稱為 MSO 的物件

659
00:32:29,720 --> 00:32:31,859
不是有日本地址的字串嗎

660
00:32:31,859 --> 00:32:33,539
把它分成都道府縣啊、市町村啊

661
00:32:33,539 --> 00:32:35,859
其實那種事

662
00:32:35,859 --> 00:32:37,880
很困難這件事，在座的各位

663
00:32:37,880 --> 00:32:39,859
我想應該都能理解。

664
00:32:39,859 --> 00:32:40,380
這個

665
00:32:40,380 --> 00:32:43,420
當然是依照美國的地址格式

666
00:32:43,420 --> 00:32:45,180
一開始就是這樣做的，所以

667
00:32:45,180 --> 00:32:47,259
因此才會這樣。

668
00:32:47,259 --> 00:32:48,700
各位，關於地址的

669
00:32:48,700 --> 00:32:51,299
有做過把地址拆解嗎？

670
00:32:51,299 --> 00:32:52,880
問說能不能拆解。

671
00:32:52,880 --> 00:32:54,680
雖然有點不明白，不過就先試試看的那種感覺

672
00:32:54,680 --> 00:32:57,059
是這麼說的，但結果沒能做到

673
00:32:57,059 --> 00:33:02,019
所以這個就變成 nil 了

674
00:33:02,019 --> 00:33:04,119
這裡有稍微做了，抱歉

675
00:33:04,119 --> 00:33:05,460
就變成 nil 了

676
00:33:05,460 --> 00:33:09,519
這個的話題也算是超級幕後秘辛，不過

677
00:33:09,519 --> 00:33:12,059
對負責的工程師說：「你真的做得到嗎？」

678
00:33:12,059 --> 00:33:13,940
連日本的地址那部分也

679
00:33:13,940 --> 00:33:20,240
作為在那種情況下可用的 API 的話

680
00:33:20,240 --> 00:33:22,619
有個做法是去取得 M6 的原始資料

681
00:33:22,619 --> 00:33:24,220
這個叫做原始資料請求。

682
00:33:24,220 --> 00:33:27,000
用這個的話就能取得，不過……

683
00:33:27,000 --> 00:33:29,660
正如剛才所說，除了地址以外都能取得。

684
00:33:29,660 --> 00:33:30,640
明天比較好。

685
00:33:30,640 --> 00:33:33,599
這個壞掉了呢。

686
00:33:33,599 --> 00:33:35,500
也就是說，最後就會變成「需要我」這麼一回事。

687
00:33:35,500 --> 00:33:36,059
不行。

688
00:33:36,059 --> 00:33:37,799
所謂使用原始資料就是……

689
00:33:37,799 --> 00:33:40,119
像剛才說的那種 MSO 的驗證之類的也……

690
00:33:40,119 --> 00:33:41,700
必須由我們自己來做。

691
00:33:41,700 --> 00:33:43,460
大概在這個會場裡

692
00:33:43,460 --> 00:33:45,900
我想在座應該沒有曾經做過那件事的人

693
00:33:45,900 --> 00:33:48,079
大概還沒有吧

694
00:33:48,079 --> 00:33:50,220
這很不容易

695
00:33:50,220 --> 00:33:51,559
有點麻煩

696
00:33:51,559 --> 00:33:53,299
因為除了地址之外都能取得

697
00:33:53,299 --> 00:33:56,440
大部分情況只要做資料請求就可以，不過

698
00:33:56,440 --> 00:33:57,440
就得用原始資料

699
00:33:57,440 --> 00:34:00,900
只要連上名為 Hotme 的地方就能動手試用

700
00:34:00,900 --> 00:34:02,660
這個會顯示出來嗎

701
00:34:02,660 --> 00:34:04,839
我來稍微試試看。

702
00:34:04,839 --> 00:34:07,480
像這樣。

703
00:34:07,480 --> 00:34:10,119
把這個

704
00:34:10,119 --> 00:34:11,000
這樣嗎

705
00:34:11,000 --> 00:34:15,739
我就簡單示範一下差異，不過…

706
00:34:15,739 --> 00:34:17,539
這個叫做 CBOAR 的格式呢

707
00:34:17,539 --> 00:34:18,500
有一個 Playground。

708
00:34:18,500 --> 00:34:19,340
CBOAR.

709
00:34:19,340 --> 00:34:23,280
這個，把 mDoc 的範例資料…

710
00:34:23,280 --> 00:34:24,440
正在傾印，不過…

711
00:34:24,440 --> 00:34:29,059
就像左邊那樣，滿滿地列著一大堆字串。

712
00:34:29,059 --> 00:34:31,260
這些一口氣排開的字串呢

713
00:34:31,260 --> 00:34:34,039
是什麼樣的

714
00:34:34,039 --> 00:34:35,260
像是 int 之類的

715
00:34:35,260 --> 00:34:38,820
很難呢

716
00:34:38,820 --> 00:34:42,860
包含這個值的項目

717
00:34:42,860 --> 00:34:44,659
因為會沒完沒了地重複下去

718
00:34:44,659 --> 00:34:46,619
所以就從前面開始按順序解析下去。

719
00:34:46,619 --> 00:34:48,440
當然也沒有解析器，所以

720
00:34:48,440 --> 00:34:50,099
就得自己動手寫。

721
00:34:50,099 --> 00:34:51,360
還要寫解析器的喔

722
00:34:51,360 --> 00:34:54,840
這樣一來，就會出現像右邊那樣的結構

723
00:34:54,840 --> 00:34:56,840
其中包含的鍵和值

724
00:34:56,840 --> 00:34:59,320
有表示像字串之類的型別

725
00:34:59,320 --> 00:35:02,699
以及表示值長度的欄位

726
00:35:02,699 --> 00:35:04,360
實際去解析的時候

727
00:35:04,360 --> 00:35:07,360
就能把想要的東西取出來，基本上就是做這樣的事

728
00:35:07,360 --> 00:35:09,340
要做這個真的很辛苦

729
00:35:09,340 --> 00:35:11,739
我自己也寫過，真的挺辛苦的

730
00:35:11,739 --> 00:35:13,219
但還是會努力去做嘛

731
00:35:13,219 --> 00:35:15,760
只要努力就做得到，不過

732
00:35:15,760 --> 00:35:19,579
請大家把那種辛苦忘掉

733
00:35:19,579 --> 00:35:20,440
會這樣出現，不過

734
00:35:20,440 --> 00:35:22,480
這個看了也不太懂，對吧

735
00:35:22,480 --> 00:35:24,380
因為這個看不懂，所以

736
00:35:24,380 --> 00:35:28,219
本來想做到可以說「我們準備了這個」，但

737
00:35:28,219 --> 00:35:29,739
因為還沒準備好，

738
00:35:29,739 --> 00:35:31,639
大概就是「請去做」的感覺呢

739
00:35:31,639 --> 00:35:33,900
等準備好了之後，應該會有些什麼

740
00:35:33,900 --> 00:35:36,199
總之，ID Verifier 就

741
00:35:36,199 --> 00:35:38,780
我剛才談到，像這樣做很有趣。

742
00:35:38,780 --> 00:35:40,739
至於細節呢

743
00:35:40,739 --> 00:35:45,380
我在想這樣可能不太妥當。

744
00:35:45,380 --> 00:35:48,460
如果真的要用到這類東西的話

745
00:35:48,460 --> 00:35:49,579
如果您能看一下這裡的內容

746
00:35:49,579 --> 00:35:52,400
例如該如何提出 Entitlement 請求

747
00:35:52,400 --> 00:35:55,599
以及在實機或模擬器上進行測試的方法之類的內容

748
00:35:55,599 --> 00:35:56,659
都彙整在這裡

749
00:35:56,659 --> 00:35:59,599
此外還有可用的 API，所以

750
00:35:59,599 --> 00:36:02,619
因為時間有點不夠了，所以我就大致介紹一下

751
00:36:02,619 --> 00:36:08,800
因為有寫在 Apple Developer 的網站上

752
00:36:08,800 --> 00:36:10,440
可使用的 Verify with Wallet

753
00:36:10,440 --> 00:36:13,480
此外，在今年的 WWDC 上有宣布

754
00:36:13,480 --> 00:36:17,320
可以從網頁瀏覽器提出 M-Lock 的請求

755
00:36:17,320 --> 00:36:20,559
有三個 API，稱為 Web Credential API，不過

756
00:36:20,559 --> 00:36:24,480
Web Credential API 還沒有釋出

757
00:36:24,480 --> 00:36:26,420
主要有三種類型

758
00:36:26,420 --> 00:36:28,840
除了剛才介紹的 Verifier API 之外

759
00:36:28,840 --> 00:36:32,360
在應用程式內的身分驗證即使沒有 iPhone 也能

760
00:36:32,360 --> 00:36:37,320
有一個能從網頁瀏覽器向 iPhone 發出 mDoc 請求的功能

761
00:36:37,320 --> 00:36:38,860
這也是已經被標準化的事情

762
00:36:38,860 --> 00:36:42,019
這是 18013 的第 7 部分，不過呢

763
00:36:42,019 --> 00:36:44,019
因為那裡是這麼定義的

764
00:36:44,019 --> 00:36:46,820
因為瀏覽器要支援，不支援就做不到

765
00:36:46,820 --> 00:36:48,420
細節不便多談，不過呢

766
00:36:48,420 --> 00:36:50,920
如果這能實現，能做些什麼呢

767
00:36:50,920 --> 00:36:52,679
剛才是用兩支 iPhone 示範的，不過

768
00:36:52,679 --> 00:36:55,039
因此可以看出各種情況

769
00:36:55,039 --> 00:36:57,579
有興趣的人可以去看看

770
00:36:57,579 --> 00:36:58,500
本場次……

771
00:36:58,500 --> 00:37:02,840
我們正在名為「Verify Identity Documents on the Web」的場次進行。

772
00:37:02,840 --> 00:37:04,639
竟然只剩 4 分鐘。

773
00:37:04,639 --> 00:37:06,579
接下來會更趕著講。

774
00:37:06,579 --> 00:37:08,420
關於 Verify with Wallet 的部分

775
00:37:08,420 --> 00:37:10,239
我也這麼想過，不過

776
00:37:10,239 --> 00:37:13,480
看來要讓瀏覽器支援起來相當不容易。

777
00:37:13,480 --> 00:37:16,619
像那種挖東挖西做出來的示範那樣

778
00:37:16,619 --> 00:37:18,340
不會只是給大家看一下就結束。

779
00:37:18,340 --> 00:37:20,840
為了在應用內處理受法規管制的商品，

780
00:37:20,840 --> 00:37:23,400
需要特別的權限（Entitlement）。

781
00:37:23,400 --> 00:37:24,900
這份資料是

782
00:37:24,900 --> 00:37:29,960
是用稱為 HPKE 的方式加密的

783
00:37:29,960 --> 00:37:30,920
我簡單說一下

784
00:37:30,920 --> 00:37:34,619
這是一個可以在應用程式內進行本人驗證的 API

785
00:37:34,619 --> 00:37:36,380
這個完全是現在看到的

786
00:37:36,380 --> 00:37:40,780
關於授權的部分我就簡單帶過

787
00:37:40,780 --> 00:37:43,840
指定文件類型與欄位之後

788
00:37:43,840 --> 00:37:44,920
就可以了，另外

789
00:37:44,920 --> 00:37:47,420
還需要另一個授權

790
00:37:47,420 --> 00:37:48,780
叫做 Merchant ID 的

791
00:37:48,780 --> 00:37:51,980
與 Apple Pay

792
00:37:51,980 --> 00:37:54,360
因為是以高強度加密的關係

793
00:37:54,360 --> 00:37:57,119
其實連 Apple 也無法解密這件事

794
00:37:57,119 --> 00:37:58,260
也被當成一項賣點

795
00:37:58,260 --> 00:38:02,400
流程是使用 PassKit 的 API

796
00:38:02,400 --> 00:38:03,900
取得使用者的同意

797
00:38:03,900 --> 00:38:05,000
取得 HPK

798
00:38:05,000 --> 00:38:06,679
然後把它送到自己的伺服器

799
00:38:06,679 --> 00:38:07,900
在自家端生成後送到伺服器

800
00:38:07,900 --> 00:38:10,639
並在那裡進行解密

801
00:38:10,639 --> 00:38:12,659
關於 API 呢

802
00:38:12,659 --> 00:38:14,019
剛才給大家看的那個 ID 呢

803
00:38:14,019 --> 00:38:17,400
就把它想成是使用錢包所需的字串就好

804
00:38:17,400 --> 00:38:19,619
那個就是必要的

805
00:38:19,619 --> 00:38:21,679
這是個古早的 API

806
00:38:21,679 --> 00:38:24,219
因為大概從還是星星的時代就存在了

807
00:38:24,219 --> 00:38:28,699
語法給人的感覺有點老舊

808
00:38:28,699 --> 00:38:31,179
細節就先略過

809
00:38:31,179 --> 00:38:33,219
呼叫之後就會出現這樣的東西

810
00:38:33,219 --> 00:38:35,500
這樣就可以用 Face ID 來認證了

811
00:38:35,500 --> 00:38:38,300
雖然已經變得極為接近了，不過

812
00:38:38,300 --> 00:38:40,440
所謂的 Verify with Wallet 是指

813
00:38:40,440 --> 00:38:41,760
所謂 PathKit 的 API 是

814
00:38:41,760 --> 00:38:43,780
採用了 Yango 的混合式

815
00:38:43,780 --> 00:38:46,039
也就是說相當強固就是了

816
00:38:46,039 --> 00:38:48,039
因為要解密這個非常困難

817
00:38:48,039 --> 00:38:50,760
其實由數位廳這邊提供了函式庫

818
00:38:50,760 --> 00:38:52,340
基本上這張卡

819
00:38:52,340 --> 00:38:55,199
對於申請表示想要使用臨時記錄的人

820
00:38:55,199 --> 00:38:57,219
會提供一個驗證用的程式

821
00:38:57,219 --> 00:38:59,099
一旦取得 mDoc 之後

822
00:38:59,099 --> 00:39:00,780
HPK 的話

823
00:39:00,780 --> 00:39:03,440
所謂的公開化語言與

824
00:39:03,440 --> 00:39:05,519
共通化語言都已取得的 HPK

825
00:39:05,519 --> 00:39:08,280
使用這個程式

826
00:39:08,280 --> 00:39:10,539
來進行解密

827
00:39:10,539 --> 00:39:12,659
如此一來，所得到的就是

828
00:39:12,659 --> 00:39:15,960
在開頭所說明的 CBOR 形式

829
00:39:15,960 --> 00:39:17,519
若往內部深入看的話

830
00:39:17,519 --> 00:39:19,059
會在名為 element 的這個部分

831
00:39:19,059 --> 00:39:21,920
這個驗證程式是以在伺服器上使用為

832
00:39:21,920 --> 00:39:23,460
前提所設想的。

833
00:39:23,460 --> 00:39:25,900
並讓那台伺服器來託管，

834
00:39:25,900 --> 00:39:27,519
就是這樣的使用情境。

835
00:39:27,519 --> 00:39:31,940
這個就是所謂的 Verify with Wallet。

836
00:39:31,940 --> 00:39:33,099
也有工作階段（session），

837
00:39:33,099 --> 00:39:36,739
而且同樣在 Apple Developer 上也有提供，

838
00:39:36,739 --> 00:39:37,500
對於要使用的人來說，

839
00:39:37,500 --> 00:39:39,260
大概在應用程式內想要使用的話，

840
00:39:39,260 --> 00:39:41,139
相對來說，我想這邊這個使用情境會更常見。

841
00:39:41,139 --> 00:39:44,019
以識別子與鍵值的形式

842
00:39:44,019 --> 00:39:44,760
有包含在裡面

843
00:39:44,760 --> 00:39:48,119
也有提到可以取得資料

844
00:39:48,119 --> 00:39:50,039
我想應該能夠和負責人取得聯繫，所以

845
00:39:50,039 --> 00:39:52,659
我覺得在那邊詢問詳細會比較好

846
00:39:52,659 --> 00:39:57,360
接下來的部分我就匆匆簡單帶過

847
00:39:57,360 --> 00:39:58,900
好像正好是昨天吧

848
00:39:58,900 --> 00:39:59,980
是昨天還是前天呢

849
00:39:59,980 --> 00:40:00,880
應該是前天吧

850
00:40:00,880 --> 00:40:02,019
總之呢

851
00:40:02,019 --> 00:40:03,420
因為在 Android 上看起來也一樣，所以

852
00:40:03,420 --> 00:40:04,940
請務必查一下

853
00:40:04,940 --> 00:40:06,300
如果想用的話

854
00:40:06,300 --> 00:40:07,699
這個也需要向 Apple 申請，所以

855
00:40:07,699 --> 00:40:09,900
也請向 Apple 申請

856
00:40:09,900 --> 00:40:12,800
以前是用在像「マイナポータル」登入之類的，不過呢

857
00:40:12,800 --> 00:40:17,059
透過支援 mDoc，現在已經能做到和我剛才說的差不多的事情

858
00:40:17,059 --> 00:40:19,119
這個預定在 2026 年

859
00:40:19,119 --> 00:40:21,500
「マイナ保険証」也已經開始推行了，

860
00:40:21,500 --> 00:40:25,039
希望將來在駕照方面也許也會有些什麼

861
00:40:25,039 --> 00:40:27,360
我們宣布將支援 mDoc

862
00:40:27,360 --> 00:40:31,639
其實在 Android 上，已經可以率先使用電子憑證

863
00:40:31,639 --> 00:40:32,900
大概是這樣的情況

864
00:40:32,900 --> 00:40:35,500
要做這件事其實花了不少時間

865
00:40:35,500 --> 00:40:39,639
跟大家說「花了很多時間、很辛苦」這樣的話

866
00:40:39,639 --> 00:40:41,920
並不是想說這個

867
00:40:41,920 --> 00:40:44,480
在大家手邊

868
00:40:44,480 --> 00:40:46,159
而且已經能夠實際使用

869
00:40:46,159 --> 00:40:46,940
大家會進行開發，但

870
00:40:46,940 --> 00:40:50,519
也會讓各種整合不斷推進之類的

871
00:40:50,519 --> 00:40:51,800
我想會變得像樣

872
00:40:51,800 --> 00:40:53,840
像這樣

873
00:40:53,840 --> 00:40:55,420
現在其實還沒有那麼多使用案例

874
00:40:55,420 --> 00:40:57,179
只用這個 mDoc

875
00:40:57,179 --> 00:40:58,860
那種想用它做點什麼的使用案例

876
00:40:58,860 --> 00:41:01,519
接下來得去發明出來

877
00:41:01,519 --> 00:41:02,820
現在就是這樣的情況

878
00:41:02,820 --> 00:41:05,539
那種先進的東西

879
00:41:05,539 --> 00:41:07,179
因為我們已經把它推出來了

880
00:41:07,179 --> 00:41:08,500
接下來就請各位來使用了

881
00:41:08,500 --> 00:41:11,519
身為公司，如果聽了剛才的介紹覺得想試用看看，

882
00:41:11,519 --> 00:41:12,659
真的希望各位務必用用看。

883
00:41:12,659 --> 00:41:17,440
「正因為這是先進的嘗試，所以我們正在不斷推進」這件事，

884
00:41:17,440 --> 00:41:20,440
能在這樣的場合傳達給大家，我真的很高興，

885
00:41:20,440 --> 00:41:23,940
也希望各位務必試用看看，然後把感想啊、

886
00:41:23,940 --> 00:41:26,239
或者「也希望你們在這方面著手」之類的意見，

887
00:41:26,239 --> 00:41:27,840
如果能進行那樣的討論，

888
00:41:27,840 --> 00:41:30,360
我想日本的數位化就能更往前推進，

889
00:41:30,360 --> 00:41:34,000
因此也很希望各位務必使用看看，

890
00:41:34,000 --> 00:41:37,500
讓日本的數位化能夠像這樣一點一點。
非常希望能與各位一起推動在日本的實踐。

891
00:41:37,500 --> 00:41:39,079
那麼，我的發表到此結束。

892
00:41:47,079 --> 00:41:51,579
發表結束了。
那麼，我們進入 Q&A 環節。

900
00:41:52,579 --> 00:41:55,579
有問題的人請舉手。

901
00:41:57,579 --> 00:41:58,579
我來把麥克風拿過去。

896
00:42:01,099 --> 00:42:03,099
今天也滿席呢，謝謝大家。

851
00:42:03,039 --> 00:42:05,199
非常感謝。

852
00:42:05,199 --> 00:42:07,739
你的發表真的非常有趣。

853
00:42:07,739 --> 00:42:10,659
像是那些特別的權限啊，

854
00:42:10,659 --> 00:42:15,139
或者是為日本專門設計的類別審查之類的，

855
00:42:15,139 --> 00:42:17,739
感覺你們是用一些特別帳號

856
00:42:17,739 --> 00:42:21,699
在和 Apple 直接往來吧？我這樣想啦。

857
00:42:21,699 --> 00:42:25,920
比如說，在 App 審查流程上是不是有什麼特別的地方，

858
00:42:25,920 --> 00:42:28,420
或者在 App Store Connect 裡面，

859
00:42:28,420 --> 00:42:32,500
是不是有一般開發者看不到的特別選單之類的？

860
00:42:32,500 --> 00:42:35,559
如果方便的話，可以跟我們分享一下嗎？

861
00:42:35,559 --> 00:42:39,860
雖然要是說「不能講」好像也有點那個（笑）

862
00:42:39,860 --> 00:42:43,239
但關於權限這部分，其實一旦被賦予之後，

863
00:42:43,239 --> 00:42:44,500
使用起來就都一樣啦。

864
00:42:44,500 --> 00:42:48,159
也就是說，在證書簽署階段

865
00:42:48,159 --> 00:42:49,639
就會進行驗證或發送確認，

866
00:42:49,639 --> 00:42:52,280
然後在建置的時候也會再檢查。

867
00:42:52,280 --> 00:42:53,760
所以基本上，只要在 provisioning profile 裡

868
00:42:53,760 --> 00:42:55,400
有那個權限就可以了。

869
00:42:55,400 --> 00:42:58,039
其實這個權限的整體機制

870
00:42:58,039 --> 00:43:00,480
和其他權限完全一樣。

871
00:43:00,480 --> 00:43:01,840
所以要說是不是有特別帳號什麼的，

872
00:43:01,840 --> 00:43:03,059
其實完全沒有那回事啦。

873
00:43:03,059 --> 00:43:05,900
當然，在上線前我們會用測試資料啊，

874
00:43:05,900 --> 00:43:06,980
這類的事情的時候，

875
00:43:06,980 --> 00:43:08,260
就會牽涉到很多話題，

876
00:43:08,260 --> 00:43:09,980
也會延伸到未來的討論。

877
00:43:09,980 --> 00:43:11,940
至於審查的部分呢，

878
00:43:11,940 --> 00:43:13,139
其實審查團隊那邊

879
00:43:13,139 --> 00:43:16,119
也不會事先知道這些內容，

880
00:43:16,119 --> 00:43:19,400
所以他們有時候審的功能對他們來說也是第一次看到。

881
00:43:19,400 --> 00:43:22,099
這種情況大家應該也都有遇過吧，

882
00:43:22,099 --> 00:43:24,500
會附上影片說明，

883
00:43:24,500 --> 00:43:26,539
或者寫一些補充解釋，

884
00:43:26,539 --> 00:43:29,340
讓審查能順利通過，就是這樣的流程。

885
00:43:29,340 --> 00:43:34,619
也不是說因為我們是政府機構，就能拿到特別的權限什麼的。

886
00:43:34,619 --> 00:43:35,440
完全不是這樣。

887
00:43:35,440 --> 00:43:37,159
而且就像剛剛提到的，

888
00:43:37,159 --> 00:43:39,519
像「我的數位身份證」（マイナンバー）這類的東西，

889
00:43:39,519 --> 00:43:41,460
它是寫進法律裡的。

890
00:43:41,460 --> 00:43:43,780
所以就算 Apple 說「可以用喔」，

891
00:43:43,780 --> 00:43:45,980
我們這邊也不一定能馬上說「好」。

892
00:43:45,980 --> 00:43:48,039
那部分接下來要怎麼處理，

893
00:43:48,039 --> 00:43:49,519
其實還有很多要討論的。

894
00:43:49,519 --> 00:43:50,780
雖然有這種限制，

895
00:43:50,780 --> 00:43:52,440
但除了那種法規相關的之外，

896
00:43:52,440 --> 00:43:54,199
只要符合 Apple 的標準，

897
00:43:54,199 --> 00:43:56,260
也符合我們自己的標準，就都可以用。

898
00:43:56,260 --> 00:43:57,420
謝謝。

899
00:43:57,420 --> 00:44:00,539
非常感謝。

900
00:44:00,539 --> 00:44:02,880
還有沒有其他評論或問題的？

901
00:44:02,880 --> 00:44:03,900
請舉手發問。

902
00:44:03,900 --> 00:44:09,159
喂喂——

903
00:44:09,159 --> 00:44:12,679
關於 Wallet 裡那個 My Number（我的數位身份證）那段，

904
00:44:12,679 --> 00:44:15,500
你剛剛說動起來會有閃閃發亮的特效，

905
00:44:15,500 --> 00:44:17,420
是說那是直接寫在程式裡的嗎？

906
00:44:17,420 --> 00:44:19,800
Wallet 這個 App 本身是

907
00:44:19,800 --> 00:44:21,539
Apple 提供的應用程式吧？

908
00:44:21,539 --> 00:44:23,719
那是不是數位廳（Digital Agency）的工程師

909
00:44:23,719 --> 00:44:25,719
只做了那個特效，

910
00:44:25,719 --> 00:44:28,039
然後變成某個程式碼或函式庫，

911
00:44:28,039 --> 00:44:29,300
再交給 Apple，

912
00:44:29,300 --> 00:44:31,219
然後 Apple 把它整合到 Wallet App 裡

913
00:44:31,219 --> 00:44:34,440
一起發布，是這樣的流程嗎？

914
00:44:34,440 --> 00:44:35,199
這個啊，

915
00:44:35,199 --> 00:44:37,300
是 Wallet 團隊的工程師幫忙做的。

916
00:44:37,300 --> 00:44:39,039
所以是完全由 Apple 製作的？

917
00:44:39,039 --> 00:44:39,619
完全沒錯。

918
00:44:39,619 --> 00:44:42,199
我們只是先對齊好設計風格，

919
00:44:42,199 --> 00:44:43,880
之後就全部交給他們處理了。

920
00:44:43,880 --> 00:44:44,099
原來如此。

921
00:44:44,099 --> 00:44:49,500
非常感謝。

922
00:44:49,500 --> 00:44:52,760
時間上看起來這應該是最後一個問題了。

923
00:44:52,760 --> 00:44:54,440
還有沒有其他評論或問題？

924
00:44:54,440 --> 00:44:55,539
請舉手發問。

925
00:44:55,539 --> 00:45:00,619
非常感謝你分享這麼寶貴的內容。

926
00:45:00,619 --> 00:45:06,199
像民間公司也有製作報稅用的 App 吧？

927
00:45:06,199 --> 00:45:09,900
那些想報稅的使用者，

928
00:45:09,900 --> 00:45:11,880
在檔案上要簽章時，

929
00:45:11,880 --> 00:45:16,179
就會用 My Number 卡或 JPKI 相關的函式庫來進行電子簽章。

930
00:45:16,179 --> 00:45:20,500
如果想在 iPhone 的 My Number 上實現這種功能，

931
00:45:20,500 --> 00:45:23,619
那剛剛提到的 Signature Method（簽章方法）

932
00:45:23,619 --> 00:45:24,840
是不是就是那個？

933
00:45:24,840 --> 00:45:27,960
我想確認一下我的理解對不對，

934
00:45:27,960 --> 00:45:32,400
另外我聽說那個功能需要特別的權限，

935
00:45:32,400 --> 00:45:39,000
所以雖然技術上可行，但民間企業是不是其實沒辦法用？

936
00:45:39,000 --> 00:45:43,320
我感覺好像目前還不能用那樣的功能。

937
00:45:43,320 --> 00:45:45,719
那這部分未來會開放使用嗎？

938
00:45:45,719 --> 00:45:49,760
如果現在可以談的話，想請你說明一下。

939
00:45:49,760 --> 00:45:53,159
這個目前還沒有百分之百定案，

940
00:45:53,159 --> 00:45:55,000
應該說還在討論中。

941
00:45:55,000 --> 00:45:57,519
現在的做法是透過「我的入口」App（マイナポータル），

942
00:45:57,519 --> 00:46:00,480
在那個 App 裡面先取出憑證，

943
00:46:00,480 --> 00:46:01,500
然後進行簽章，

944
00:46:01,500 --> 00:46:04,840
最後再回傳給原本的應用程式。

945
00:46:04,840 --> 00:46:07,179
只要能做到這樣，

946
00:46:07,179 --> 00:46:09,639
大家其實就不需要自己去處理

947
00:46:09,639 --> 00:46:11,199
那些 JPKI 的內容了。

948
00:46:11,199 --> 00:46:13,820
只要透過「我的入口」App 來操作就可以，

949
00:46:13,820 --> 00:46:15,199
這樣就足夠了。

950
00:46:15,199 --> 00:46:18,179
不好意思，謝謝說明。

951
00:46:18,179 --> 00:46:22,139
那時間也差不多了，

952
00:46:22,139 --> 00:46:24,300
Q&A 到這邊結束。

953
00:46:24,300 --> 00:46:27,139
接下來是一分鐘的回饋時間。

954
00:46:27,139 --> 00:46:32,400
一分鐘的回饋時間。

955
00:46:32,400 --> 00:46:35,480
請掃描螢幕上的 QR Code，

956
00:46:35,480 --> 00:46:37,500
送出你的回饋意見。

957
00:46:37,500 --> 00:46:44,260
我們會把這些回饋意見整理起來，

958
00:46:44,260 --> 00:46:46,900
也分享給講者本人。

959
00:46:46,900 --> 00:46:49,920
當然，你也可以寫對我的感想（笑），

960
00:46:49,920 --> 00:46:54,239
如果有想傳達給講者的訊息，請務必寫上去。

961
00:46:54,239 --> 00:46:55,300
那我會很開心的。

962
00:47:19,920 --> 00:47:49,900
感謝大家的觀看。

963
00:47:49,920 --> 00:47:51,920
松田先生，非常感謝。

964
00:47:51,920 --> 00:47:52,920
謝謝。

965
00:47:52,920 --> 00:48:01,139
接下來其實這邊馬上有 TVer 公司的贊助場次。

966
00:48:01,139 --> 00:48:03,440
我自己也有幫 TVer 一點忙，想去看一下，

967
00:48:03,440 --> 00:48:05,019
不好意思啦。

968
00:48:05,019 --> 00:48:08,519
等那場結束後我會回來一直在這裡，

969
00:48:08,519 --> 00:48:11,559
大家有問題可以再過來問我。

970
00:48:11,559 --> 00:48:11,920
謝謝大家。
