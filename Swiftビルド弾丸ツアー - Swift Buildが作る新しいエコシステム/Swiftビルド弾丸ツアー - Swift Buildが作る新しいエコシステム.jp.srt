1
00:00:00,000 --> 00:00:06,080
スイフトビルド弾丸ツアー スイフトビルドが作る新しいエコシステム

2
00:00:06,080 --> 00:00:09,339
ギギネット

3
00:00:09,339 --> 00:00:22,219
皆さんこんにちは 
本日スイフトビルドツアーのガイドを務めます
ギギネットです

4
00:00:22,219 --> 00:00:28,739
普段はLINEのビルドシステムや
開発基盤を改善しています

5
00:00:29,739 --> 00:00:32,880
今日はSwift Build 弾丸ツアーというタイトルで

6
00:00:32,880 --> 00:00:35,600
Swiftのビルドシステムを見ていきましょう

7
00:00:35,600 --> 00:00:41,399
今日は有明でこんなに大きい箱で話すということで
非常に緊張していますが

8
00:00:41,399 --> 00:00:44,719
こんなにビルドに興味がある人が多い
と思いませんでした

9
00:00:44,719 --> 00:00:46,600
よろしくお願いします

10
00:00:46,600 --> 00:00:51,579
日々アプリ開発をしたり

11
00:00:51,579 --> 00:00:53,740
Swiftでプロダクトを作ったり

12
00:00:53,740 --> 00:00:57,240
ビルドシステムに触れる機会は多いと思います

13
00:00:58,460 --> 00:01:07,239
皆さんの日頃の開発の中では Xcodeのビルドボタンを押すと
シミュレーターが立ち上がってアプリが起動します

14
00:01:07,239 --> 00:01:08,760
とっても簡単ですね

15
00:01:08,760 --> 00:01:18,400
また同様にSwiftパッケージをCLIで作成
してビルドすることもあるかもしれません

16
00:01:18,400 --> 00:01:26,319
これもSwift Buildというコマンドを実行
すると こうやってパッケージがビルドされて実行できます

17
00:01:26,319 --> 00:01:27,760
とっても便利ですね

18
00:01:28,459 --> 00:01:33,420
しかしこの2つのビルドシステムについて

19
00:01:33,420 --> 00:01:37,900
日常的に様々な疑問が思い浮かぶかなと思います

20
00:01:37,900 --> 00:01:41,379
例えばXcodeプロジェクトと

21
00:01:41,379 --> 00:01:46,040
パッケージswiftの2つの定義があるのは何なんだろうとか

22
00:01:46,040 --> 00:01:49,780
Xcodeプロジェクトのビルドには

23
00:01:49,780 --> 00:01:52,799
Xcodeビルドを使うのに

24
00:01:52,799 --> 00:01:54,519
なんでSwiftパッケージは

25
00:01:54,519 --> 00:01:56,939
Swiftビルドでビルドするのかなとか

26
00:01:56,939 --> 00:02:03,400
Swift Buildのコマンドで
iOSのアプリって作れないのとか

27
00:02:03,400 --> 00:02:09,819
逆にXcode Buildのコマンドで
パッケージって作れないのとか

28
00:02:09,819 --> 00:02:14,500
結構こういう疑問を持つことが多いでしょう

29
00:02:14,500 --> 00:02:17,919
そしてビルドツールってのもいっぱいあって

30
00:02:17,919 --> 00:02:20,639
複数耳にしたことがあるでしょう

31
00:02:20,639 --> 00:02:27,139
普段おなじみのXcodeと
そのCLIツールのxcodebuild

32
00:02:27,139 --> 00:02:30,939
Swift Package Manager

33
00:02:30,939 --> 00:02:33,500
そしてswiftc

34
00:02:33,500 --> 00:02:37,120
これはSwiftコンパイラーのことでしょうか

35
00:02:37,120 --> 00:02:40,919
「わいわい swiftc」というイベントも聞いたことがありますね

36
00:02:40,919 --> 00:02:44,520
そしてclangやld

37
00:02:44,520 --> 00:02:48,979
そしてllbuildといったプロダクトもあります

38
00:02:48,979 --> 00:02:57,460
聞いたことがあるけれど それぞれの責務について
説明できる方は少ないでしょう

39
00:02:57,460 --> 00:03:05,840
そればかりか 
Appleは今年の2月にSwift Buildという
オープンソースを公開しました

40
00:03:05,840 --> 00:03:09,659
このビルドシステムは何なんでしょうか

41
00:03:09,659 --> 00:03:14,900
ただでさえいろいろあるのに 
今度はSwift Buildというやつが増えました

42
00:03:14,900 --> 00:03:16,599
もう訳がわからないですね

43
00:03:18,979 --> 00:03:24,719
このようにSwiftのエコシステムは年々複雑化していて

44
00:03:24,719 --> 00:03:27,979
これらがどのように絡み合って動作しているのか

45
00:03:27,979 --> 00:03:30,259
把握するのは容易ではありません

46
00:03:30,259 --> 00:03:36,379
今回のトークではオープンソースSwiftの
各プロダクトを中心に

47
00:03:36,379 --> 00:03:40,860
この複雑化域なエコシステムが
どのように動作しているのかを

48
00:03:40,860 --> 00:03:42,360
詳しく見てみましょう

49
00:03:42,360 --> 00:03:49,400
ここで競技のビルドについておさらいしてみましょう

50
00:03:49,400 --> 00:03:54,240
Swiftのソースコードを実行ファイルにするまでに

51
00:03:54,240 --> 00:03:56,639
どのような処理がなされているのでしょうか

52
00:03:56,639 --> 00:04:00,280
swiftcコマンドを実行すると

53
00:04:00,280 --> 00:04:03,639
このように実行ファイルがビルドされます

54
00:04:03,639 --> 00:04:08,599
さて 実際のプロジェクトは

55
00:04:08,599 --> 00:04:12,819
今のサンプルのようなシンプルな構成ではなく

56
00:04:12,819 --> 00:04:16,139
複数のSwiftファイルから構成されています

57
00:04:16,139 --> 00:04:20,959
そしてそれぞれのファイルは
依存関係を持っていたりします

58
00:04:20,959 --> 00:04:28,160
またiOSアプリの場合はiOS SDKを
参照する必要もあるでしょう

59
00:04:28,160 --> 00:04:32,079
これを解決する作業がリンクです

60
00:04:32,079 --> 00:04:36,259
まずそれぞれのソースをコンパイルして

61
00:04:36,259 --> 00:04:38,540
オブジェクトファイルを作成します

62
00:04:38,540 --> 00:04:42,459
最終的にそれぞれのオブジェクトをリンクして

63
00:04:42,459 --> 00:04:46,160
実行ファイルを作成するという流れになっています

64
00:04:46,160 --> 00:04:52,620
このコンパイルとリンクをあえて分けて実行すると

65
00:04:52,620 --> 00:04:53,860
このようになります

66
00:04:53,860 --> 00:04:58,800
swiftcやCのコンパイラーであるclangで

67
00:04:58,800 --> 00:05:02,120
ソースコードをオブジェクトファイルにコンパイルして

68
00:05:02,120 --> 00:05:07,600
リンカーであるldを使ってリンクして実行ファイルを作る

69
00:05:07,600 --> 00:05:12,459
この一連の操作が競技のビルドであるといえます

70
00:05:12,459 --> 00:05:24,040
余談ですがこのswiftcが内部でどう動作していくのって
見ていくのも面白いんですけれども

71
00:05:24,040 --> 00:05:29,459
今回のトークはビルドフロー全体の概要をテーマにしているので

72
00:05:29,459 --> 00:05:33,920
あえてコンパイラーの内部については説明しません

73
00:05:33,920 --> 00:05:37,920
ただ「わいわい swiftc」に来たことがある人は

74
00:05:37,920 --> 00:05:40,620
このような図を見たことがあるかもしれません

75
00:05:40,620 --> 00:05:43,920
非常に複雑なんですけど

76
00:05:43,920 --> 00:05:46,079
様々なパイプラインを通して

77
00:05:46,079 --> 00:05:49,300
ソースコードが最終的にオブジェクトファイルに

78
00:05:49,300 --> 00:05:53,079
変換されると思ってください

79
00:05:53,079 --> 00:05:58,100
さてビルドの基本が分かったので

80
00:05:58,100 --> 00:06:02,339
Xcodeに戻ってもう一度ビルドボタンを押しましょう

81
00:06:02,339 --> 00:06:07,240
このときアプリが起動するためには何が起きているのでしょうか

82
00:06:07,240 --> 00:06:12,100
これはXcode上のビルドログです

83
00:06:12,100 --> 00:06:14,720
このログを見てみると

84
00:06:14,720 --> 00:06:19,540
Swiftのコードからオブジェクトファイルを作って

85
00:06:19,540 --> 00:06:23,720
リンクしてアプリのバイナリが作られています

86
00:06:23,720 --> 00:06:28,980
ただこれは全体のビルドシステムの中の一部で

87
00:06:28,980 --> 00:06:34,019
よく見てみると他にも様々な処理が行われています

88
00:06:34,019 --> 00:06:38,600
例えばアプリバンドルを作成するですとか

89
00:06:38,600 --> 00:06:43,379
画像などを持っている場合はアセットカタログをコンパイルする

90
00:06:43,379 --> 00:06:48,959
最終的にできたアプリケーションをコードサインするといった

91
00:06:48,959 --> 00:06:53,019
多数のステップで構成されていることが分かります

92
00:06:53,019 --> 00:06:59,300
このように実際のアプリケーションのプロジェクトは

93
00:06:59,300 --> 00:07:02,240
多数のビルドステップから構成されています

94
00:07:02,240 --> 00:07:06,139
これらはコンパイラーの実行のみならず

95
00:07:06,139 --> 00:07:11,180
外部ツールの呼び出しなど複雑な依存関係に基づいています

96
00:07:11,180 --> 00:07:15,040
この多数の操作をスケジューリングして

97
00:07:15,040 --> 00:07:18,240
効率よく実行していく仕組みが必要です

98
00:07:18,240 --> 00:07:25,040
これらの問題を解決するのがビルドシステムという考え方です

99
00:07:25,040 --> 00:07:28,180
一般的なビルドシステムは

100
00:07:28,180 --> 00:07:29,759
べき等性の担保

101
00:07:29,759 --> 00:07:34,240
すなわち何回実行しても結果が同じになるように

102
00:07:34,240 --> 00:07:36,899
コマンドを実行する必要があります

103
00:07:36,899 --> 00:07:40,620
またすでに生成した成果物は

104
00:07:40,620 --> 00:07:43,339
再度ビルドせずに使えますといった

105
00:07:43,339 --> 00:07:46,019
キャッシュの機構を備えている必要もあります

106
00:07:46,019 --> 00:07:50,339
有名なビルドシステムはいろいろありますが

107
00:07:50,339 --> 00:07:56,000
Swiftのビルドではllbuildという
ビルドシステムが使われています

108
00:07:56,000 --> 00:08:00,779
実際にllbuildの動作例を見てみましょう

109
00:08:00,779 --> 00:08:05,699
先ほどのビルドログにあったように

110
00:08:05,699 --> 00:08:10,879
アプリを構築するのに必要なステップを列挙してみます

111
00:08:10,879 --> 00:08:17,939
このそれぞれのタスクには入力と出力を定義することができます

112
00:08:17,939 --> 00:08:22,959
例えばコンパイルであればソースコードを入力にして

113
00:08:22,959 --> 00:08:26,560
オブジェクトファイルを出力するといった具合です

114
00:08:26,560 --> 00:08:31,720
すべてのタスクに入出力を定義してみましょう

115
00:08:31,720 --> 00:08:39,399
ここまで定義すると 
それぞれのタスク間に依存関係があるのがわかります

116
00:08:39,399 --> 00:08:47,779
例えばリンクの処理は
オブジェクトファイルのコンパイルが全部終わるまで
リンクすることができません

117
00:08:47,779 --> 00:08:56,039
一方でソースやアセットのコンパイルというのは
並行して進めることができます

118
00:08:56,039 --> 00:09:02,220
ビルドシステムはこの入出力から依存関係を判断して

119
00:09:02,220 --> 00:09:08,720
効率的に実行できるように実行順序を計画します

120
00:09:08,720 --> 00:09:16,720
このように入力と出力を元にソートされた実行計画が
ビルドグラフと呼ばれます

121
00:09:16,720 --> 00:09:20,960
これがビルドシステムの基本的な考え方です

122
00:09:20,960 --> 00:09:27,460
実際にXcodeのビルドログを見てみると

123
00:09:27,460 --> 00:09:31,620
ソースのコンパイルといった並列化可能な処理は

124
00:09:31,620 --> 00:09:34,899
こうやって並列実行されていることがわかります

125
00:09:34,899 --> 00:09:42,899
llbuildはこのようなビルドタスクの定義を

126
00:09:42,899 --> 00:09:46,460
ビルドマニフェストという形式で受け取って

127
00:09:46,460 --> 00:09:48,960
それをスケジューリングして実行します

128
00:09:48,960 --> 00:09:52,860
XcodeやSwiftパッケージマネージャーなど

129
00:09:52,860 --> 00:09:54,840
上位のビルドシステムは

130
00:09:54,840 --> 00:09:59,659
ビルドマニフェストを生成してllbuildに与えます

131
00:09:59,659 --> 00:10:03,299
あとはllbuildがそれに基づいて

132
00:10:03,299 --> 00:10:06,179
各ステップをスケジューリングして実行します

133
00:10:06,179 --> 00:10:13,159
実際にSwift PMが生成したビルドマニフェストを
見てみましょう

134
00:10:13,159 --> 00:10:17,340
巨大なYAMLなので何が書いているか読めないと
思うんですけど

135
00:10:17,340 --> 00:10:22,919
拡大してみるとそれぞれのノードが
定義されています

136
00:10:22,919 --> 00:10:27,240
ここには実行するコマンドと入力値

137
00:10:27,240 --> 00:10:30,120
そして期待する出力が書かれています

138
00:10:31,419 --> 00:10:35,220
Swiftのソースコードを入力にとって

139
00:10:35,220 --> 00:10:37,980
swiftcコマンドを実行して

140
00:10:37,980 --> 00:10:41,840
オブジェクトファイルの出力を期待しています

141
00:10:41,840 --> 00:10:46,379
llbuildはこのノードを大量に受け取って

142
00:10:46,379 --> 00:10:50,139
これを元にビルドグラフを
組み立てて実行しています

143
00:10:50,139 --> 00:10:55,519
ここまでの流れをおさらいすると

144
00:10:55,519 --> 00:10:58,379
大量のコマンドを実行するために

145
00:10:58,379 --> 00:11:01,720
llbuildのマニフェストが
必要ということが分かりました

146
00:11:01,720 --> 00:11:04,799
ここでやっと登場するのが

147
00:11:04,799 --> 00:11:08,159
XcodeやSwiftパッケージマネージャーのような

148
00:11:08,159 --> 00:11:10,059
おなじみのビルドシステムです

149
00:11:10,059 --> 00:11:13,519
これらはビルドマニフェストを作成して

150
00:11:13,519 --> 00:11:18,940
llbuildに様々なタスクを
実行させるという役割を担っています

151
00:11:18,940 --> 00:11:22,620
XcodeやSwift PMは

152
00:11:22,620 --> 00:11:26,080
Xcodeプロジェクトやパッケージを読み込んで

153
00:11:26,080 --> 00:11:30,620
そこからllbuildのビルドマニフェストを構築しています

154
00:11:30,620 --> 00:11:34,440
これらの流れを踏まえて

155
00:11:34,440 --> 00:11:39,580
現在これがどういう状況に
なっているのかと見てみると

156
00:11:39,580 --> 00:11:42,379
実はこういうような構造になっています

157
00:11:42,379 --> 00:11:48,740
実はこの図のように 
これまでのビルドシステムっていうのは

158
00:11:48,740 --> 00:11:52,100
XcodeとSwift PMで

159
00:11:52,100 --> 00:11:58,320
それぞれ別の仕組みでllbuildの
マニフェストを作成していました

160
00:11:58,320 --> 00:12:03,580
この構造を見ると冒頭に挙げたような疑問が

161
00:12:03,580 --> 00:12:06,399
なぜ起きているのかのが理解できると思います

162
00:12:06,399 --> 00:12:11,580
パッケージマニフェストとXコードプロジェクトの
互換性はなくて

163
00:12:11,580 --> 00:12:15,100
ビルドのパスが全然違っています

164
00:12:15,100 --> 00:12:18,059
そのためSwiftビルドコマンドで

165
00:12:18,059 --> 00:12:20,840
iOSアプリを作ったりができなかったんですね

166
00:12:20,840 --> 00:12:27,259
この構造はマニフェストの生成の部分が
二重に管理されていて

167
00:12:27,259 --> 00:12:29,659
無駄が多いことが分かると思います

168
00:12:29,659 --> 00:12:35,600
そしてこれらのビルドシステムには
機能差があります

169
00:12:35,600 --> 00:12:39,440
例えばフレームワークの生成といった

170
00:12:39,440 --> 00:12:44,580
Appleプラットフォーム特有のプロセスは
Xcode側にしかありませんし

171
00:12:44,580 --> 00:12:47,679
反対にLinuxにビルドしたり

172
00:12:47,679 --> 00:12:51,340
マクロやパッケージプラグインといった機能は

173
00:12:51,340 --> 00:12:54,019
Swift PM側にしか提供されていません

174
00:12:54,019 --> 00:13:01,799
ここで登場したのが今回のテーマとなるSwift Buildです

175
00:13:01,799 --> 00:13:06,480
今回公開されたSwift Buildは

176
00:13:06,480 --> 00:13:11,740
これまでXcodeが内部的に用いていたビルドシステムを

177
00:13:11,740 --> 00:13:13,480
オープンソース化したものです

178
00:13:13,480 --> 00:13:19,779
Xcode 16.3からもSwift BuildがXcodeに
同梱されるようになりました

179
00:13:19,779 --> 00:13:24,139
そしてSwift Package Manager側にも

180
00:13:24,139 --> 00:13:27,919
Swift Buildを使うモードが提供され始めました

181
00:13:27,919 --> 00:13:33,220
これはSwift 6.2から
Swift Buildモードというものが

182
00:13:33,220 --> 00:13:34,500
使えるようになっています

183
00:13:34,500 --> 00:13:40,820
このSwift PMを用いてビルドするときに

184
00:13:40,820 --> 00:13:46,039
従来のビルドシステムはネイティブビルドシステム
と呼ばれているんですけれども

185
00:13:46,039 --> 00:13:51,279
ビルドシステム引数にSwift Buildを渡すことで

186
00:13:51,279 --> 00:13:54,700
この新しいビルドシステムを試すことができます

187
00:13:54,700 --> 00:13:58,600
このビルドシステムはどういうことを
しているかというと

188
00:13:58,600 --> 00:14:04,179
この図でいうとこのようなパスが
誕生したということですね

189
00:14:04,179 --> 00:14:09,399
Swift PMからもXcodeと同様のビルドシステムで

190
00:14:09,399 --> 00:14:10,779
ビルドできるようになって

191
00:14:10,779 --> 00:14:14,840
ここのSwift Buildの部分が
オープンソース化されたというのが

192
00:14:14,840 --> 00:14:17,620
最近あった大きな変更です

193
00:14:17,620 --> 00:14:25,460
このSwift Buildの構造はメリットが多いことが分かると思います

194
00:14:25,460 --> 00:14:31,320
これについてSwift Forumsで議論が進んでいるんですけども

195
00:14:31,320 --> 00:14:36,200
Swift Build移行の狙いとして以下の点が紹介されています

196
00:14:36,200 --> 00:14:40,779
まずはビルド体験の統一です

197
00:14:40,779 --> 00:14:46,559
繰り返している通りXcodeとSwift PMの
ビルドには差があります

198
00:14:46,559 --> 00:14:51,480
この機能差異はllbuildのフロントエンドとして

199
00:14:51,480 --> 00:14:56,320
別の実装がされていたというのは
今まで見てもらった通りです

200
00:14:56,320 --> 00:15:01,379
この体験の統一が目的の一つとして挙げられています

201
00:15:01,379 --> 00:15:06,100
またLinuxなどアプリ以外のプラットフォームに

202
00:15:06,100 --> 00:15:07,799
Swiftをビルドするときに

203
00:15:07,799 --> 00:15:11,299
同一の体験を提供することも目的としています

204
00:15:11,299 --> 00:15:17,279
2点目はSwiftパッケージのマニフェスト表現を

205
00:15:17,279 --> 00:15:20,419
拡張する計画があることに触れられています

206
00:15:20,419 --> 00:15:24,220
例えば現状Swiftパッケージでは表現できない

207
00:15:24,220 --> 00:15:25,919
ビルド設定をサポートしたり

208
00:15:25,919 --> 00:15:30,679
アプリ対応といったビルド機能の拡張を
見越しているそうです

209
00:15:30,679 --> 00:15:35,879
そしてSwift Buildに刷新されることで

210
00:15:35,879 --> 00:15:40,100
ビルド最適化の余地が広がるという点も説明されています

211
00:15:40,100 --> 00:15:43,460
ビルドスケジューリングがより賢くなって

212
00:15:43,460 --> 00:15:45,440
並列化がより進みます

213
00:15:45,440 --> 00:15:48,360
すなわちビルドが早くなるということですね

214
00:15:48,360 --> 00:15:52,919
そしてExplicitly Build Moduleという

215
00:15:52,919 --> 00:15:55,500
新しいビルドスケジューリングの仕組みが

216
00:15:55,500 --> 00:15:56,980
サポートされ始めました

217
00:15:56,980 --> 00:16:02,740
これは先にプロジェクト全体のモジュールを
ビルドする戦略で

218
00:16:02,740 --> 00:16:05,940
これによって成果物を使い回しやすくなったり

219
00:16:05,940 --> 00:16:10,279
正確性やべき等性をより向上させることができます

220
00:16:10,279 --> 00:16:16,240
ここからはSwift Buildの動作を見てみましょう

221
00:16:16,240 --> 00:16:23,940
Swift BuildはXcodeプロジェクトや
Swift Packageのビルドをするために

222
00:16:23,940 --> 00:16:29,100
PIFと呼ばれる専用のフォーマットとして
プロジェクトをロードします

223
00:16:29,100 --> 00:16:35,080
この後にプロジェクトをビルドするために
ビルドプランを生成して

224
00:16:35,080 --> 00:16:40,840
llbuildと通信して実際にビルドグラフを
実行していきます

225
00:16:40,840 --> 00:16:44,779
このPIFと呼ばれるフォーマットは

226
00:16:44,779 --> 00:16:49,159
Swiftビルドにビルドをリクエストするための
プロジェクト表現です

227
00:16:49,159 --> 00:16:53,639
Xcodeプロジェクトのような構造をJSONで表現します

228
00:16:53,639 --> 00:17:00,279
先ほどの図でいうとこのように
フロントのビルドシステムの通信に使われます

229
00:17:00,279 --> 00:17:08,119
XcodeやSwift PMにはPIFを出力する仕組みが
すでに備わっています

230
00:17:08,119 --> 00:17:11,440
dump PIFっていうコマンドがあって

231
00:17:11,440 --> 00:17:17,400
これを使ってアプリのXcodeプロジェクトをPIFに変換してみると

232
00:17:17,400 --> 00:17:21,119
このようなJSONファイルを取得することができます

233
00:17:21,119 --> 00:17:26,000
これはXcodeのターゲットの表現に酷似しています

234
00:17:26,000 --> 00:17:32,359
このPIFを使ってSwift Buildを実行してみましょう

235
00:17:32,359 --> 00:17:35,099
Swift Buildプロジェクトには

236
00:17:35,099 --> 00:17:40,119
swbuildという
コマンドラインインターフェースが付属していて

237
00:17:40,119 --> 00:17:45,200
ここにPIFを渡すことでプロジェクトを
ビルドすることができます

238
00:17:45,200 --> 00:17:48,319
これを実際にやってみると

239
00:17:48,319 --> 00:17:51,579
以下のような出力でビルドができて

240
00:17:51,579 --> 00:17:55,519
ちゃんとアプリケーションがビルドされます

241
00:17:55,519 --> 00:18:05,119
最後にSwift Buildは受け取ったPIFから

242
00:18:05,119 --> 00:18:08,500
ビルドプランを生成して実行します

243
00:18:08,500 --> 00:18:11,079
この辺の挙動については

244
00:18:11,079 --> 00:18:13,900
Swift Build内の独身に書いてあるんですけど

245
00:18:13,900 --> 00:18:16,240
詳しい挙動を知るためには

246
00:18:16,240 --> 00:18:19,420
ソースコードを読んでいくしかなさそうでした

247
00:18:19,420 --> 00:18:22,240
そしてとても難しいので

248
00:18:22,240 --> 00:18:26,279
読んでもなかなか理解するのは
ちょっと難しかったですね

249
00:18:26,279 --> 00:18:30,660
Swift Buildのソースを見てみると

250
00:18:30,660 --> 00:18:36,299
ビルドタスクとしてさまざまな操作が
提供されていることが分かります

251
00:18:36,299 --> 00:18:41,619
最初に見てもらったXcodeの
ビルドログ中の各ステップが

252
00:18:41,619 --> 00:18:44,740
それぞれのアクションに対応していると
思ってください

253
00:18:44,740 --> 00:18:51,259
今後はそれぞれのビルドフェーズがどのような操作を
しているか知りたいときは

254
00:18:51,259 --> 00:18:56,119
オープンソースになったので細かい挙動を
簡単に見れるようになりました

255
00:18:56,119 --> 00:19:05,920
そしてビルドがタスクの計画が終わったらタスクを
実行していきます

256
00:19:05,920 --> 00:19:12,119
基本的にはSwift Buildがllbuildのマニフェストを
使って生成して

257
00:19:12,119 --> 00:19:15,200
llbuildに実行依頼します

258
00:19:15,200 --> 00:19:17,599
ただこの時Swift Buildは

259
00:19:17,599 --> 00:19:22,019
llbuild用のマニフェストを
作って終わりではなくて

260
00:19:22,019 --> 00:19:26,539
実際にはllbuildと双方向に通信して

261
00:19:26,539 --> 00:19:30,240
実行計画を立てながらタスクを実行しています

262
00:19:30,240 --> 00:19:35,900
例えば最初に説明したコンパイルとリンクの
タスクについて

263
00:19:35,900 --> 00:19:39,960
リンクに必要なオブジェクトファイルが
必要になった時点で

264
00:19:39,960 --> 00:19:42,940
llbuildがSwift Buildに問い合わせて

265
00:19:42,940 --> 00:19:46,740
後からコンパイルの計画を立てるといった仕組みです

266
00:19:46,740 --> 00:19:50,059
ここについてはドキュメントで解説されているので

267
00:19:50,059 --> 00:19:52,279
興味がある人は見てみてください

268
00:19:52,279 --> 00:19:58,319
さてSwift Buildの役割と内部の動作イメージを

269
00:19:58,319 --> 00:20:00,279
持っていただけたかなと思います

270
00:20:00,279 --> 00:20:03,359
もう一度先ほどの図に戻ると

271
00:20:03,359 --> 00:20:06,859
現在の構造はSwiftPMがオプションとして

272
00:20:06,859 --> 00:20:09,460
Swift Buildを利用できるようになったのに

273
00:20:09,460 --> 00:20:11,640
過ぎないんですけど将来的には

274
00:20:11,640 --> 00:20:14,220
もちろんこのSwift PMの

275
00:20:14,220 --> 00:20:16,119
デフォルトのビルドシステムが

276
00:20:16,119 --> 00:20:18,279
Swift Buildになっていくことが

277
00:20:18,279 --> 00:20:19,359
公表されています

278
00:20:19,359 --> 00:20:22,700
この構造は非常にシンプルになって

279
00:20:22,700 --> 00:20:24,839
XcodeとSwift PMの

280
00:20:24,839 --> 00:20:26,920
ビルドパスが統一されます

281
00:20:26,920 --> 00:20:30,859
しかしこれを実現するためには

282
00:20:30,859 --> 00:20:33,259
様々な機能が足りていません

283
00:20:33,259 --> 00:20:36,019
すでにSwift PMの

284
00:20:36,019 --> 00:20:37,660
ネイティブビルドモードが

285
00:20:37,660 --> 00:20:39,440
サポートしているいくつかの機能を

286
00:20:39,460 --> 00:20:45,880
を新しく実装していく必要があります
これが実現するとパッケージマニフェスト

287
00:20:45,880 --> 00:20:50,000
でもっと高度なビルドプロセスが
行えるようになったりクラス

288
00:20:50,000 --> 00:20:54,720
プラットフォーム対応が進んで 
いくと考えられます将来的には

289
00:20:54,720 --> 00:21:00,339
XcodeプロジェクトからLinux用のバイナリとか
Androidアプリが作れる日も

290
00:21:00,339 --> 00:21:06,859
来るかもしれません 
まとめです最初に紹介した通り

291
00:21:06,859 --> 00:21:11,259
Swiftのビルドシステムには多くのツールが
登場しましたが

292
00:21:11,259 --> 00:21:17,839
このセッションによってそれぞれのビルドツールの責務や
関連性が理解できたかなと思います

293
00:21:17,839 --> 00:21:22,500
今回はSwiftビルドとは何かを読み解くために

294
00:21:22,500 --> 00:21:25,579
ビルドシステムの全体像を説明しました

295
00:21:25,579 --> 00:21:28,299
一口でビルドといっても

296
00:21:28,299 --> 00:21:33,880
解像度によって様々なタスクが実行されていることが
分かったと思います

297
00:21:33,880 --> 00:21:40,460
そしてSwift Buildの役割や構造についても紹介しました

298
00:21:40,460 --> 00:21:46,220
これによってビルドシステムの機能差異が埋まったり

299
00:21:46,220 --> 00:21:49,640
クロスプラットフォーム対応が進んでいくことも発表されました

300
00:21:49,640 --> 00:21:53,119
今後のエコシステムの改善が期待できます

301
00:21:53,119 --> 00:21:57,380
さらにSwift Buildがオープンソース化されたことで

302
00:21:57,380 --> 00:22:01,720
従来ブラックボックスだったXcodeのビルド処理の実装を

303
00:22:01,720 --> 00:22:04,359
詳細に読むことができるようになりました

304
00:22:04,359 --> 00:22:08,259
興味のある方はぜひリポジトリを覗いてみてください

305
00:22:08,259 --> 00:22:11,440
このトークをきっかけに

306
00:22:11,440 --> 00:22:14,839
オープンソーススイフトの開発に興味を持つ人が増えて

307
00:22:14,839 --> 00:22:18,200
エコシステムへの貢献が進むことを願っています

308
00:22:18,200 --> 00:22:20,019
どうもご清聴ありがとうございました

309
00:22:20,019 --> 00:22:28,680
発表ありがとうございました

310
00:22:28,680 --> 00:22:32,220
それではQ&Aに入りたいと思います

311
00:22:32,220 --> 00:22:35,660
コメントやご質問のある方は手を挙げてお知らせください

312
00:22:35,660 --> 00:22:39,880
マイクをお持ちします

313
00:22:39,880 --> 00:22:44,880
発表ありがとうございます

314
00:22:44,880 --> 00:22:47,839
質問なんですけれども

315
00:22:47,839 --> 00:22:58,599
以前まではXCFrameworkはXcodeを
使わないと作成できなかった
という記憶があるんですけれども

316
00:22:58,599 --> 00:23:03,680
このSwift Buildが導入されてた場合

317
00:23:03,680 --> 00:23:06,599
オープンソースのSwift Buildとか

318
00:23:06,599 --> 00:23:09,599
Swift Package Managerだけで

319
00:23:09,599 --> 00:23:13,819
XCFrameworkが作れるようになるという認識で

320
00:23:13,819 --> 00:23:14,859
あってますでしょうか

321
00:23:14,859 --> 00:23:21,900
はい 具体的にXCFrameworkが作れるかっていう

322
00:23:21,900 --> 00:23:24,779
作れるようにするっていうロードマップは

323
00:23:24,779 --> 00:23:26,279
公開されてないんですけど

324
00:23:26,279 --> 00:23:30,920
原理上頑張ればできるという状態ではあると思います

325
00:23:30,920 --> 00:23:38,099
ちなみに僕がScipioというビルドツールを公開してるんですけど

326
00:23:38,099 --> 00:23:44,200
これはここのPIFの部分を書き換えて

327
00:23:44,200 --> 00:23:52,279
Swift BuildでSwiftパッケージから
XCFrameworkを作るといったことを実現してるんですけど

328
00:23:52,279 --> 00:23:58,039
もうちょっとシンプルにこれが実現できるようになる可能性が
あるかなとは考えています

329
00:23:58,039 --> 00:24:00,079
ありがとうございます

330
00:24:00,079 --> 00:24:08,140
はい 時間的に次が最後になりそうです

331
00:24:08,140 --> 00:24:11,759
コメントやご質問のある方 挙手お願いします

332
00:24:11,759 --> 00:24:15,359
お手柔らかにお願いします

333
00:24:15,359 --> 00:24:18,279
いいにゃんが詳しいことを聞くんですけど

334
00:24:19,559 --> 00:24:22,980
Swift PMがPIFを生成するフローって

335
00:24:22,980 --> 00:24:28,079
以前はSwift PMにネイティブモードとは別で

336
00:24:28,079 --> 00:24:30,279
Xcodeビルドモードっていうのがあって

337
00:24:30,279 --> 00:24:34,339
Xcodeビルドを下請けに

338
00:24:34,339 --> 00:24:37,299
SPMがビルドを起動するっていうパスがあって

339
00:24:37,299 --> 00:24:40,200
その時にPIFを投げてたと思うんですけど

340
00:24:40,200 --> 00:24:44,980
今回の話は流れが全く一緒で

341
00:24:44,980 --> 00:24:49,019
その代わり投げ先がSwiftビルドに変わってるんで

342
00:24:49,019 --> 00:24:51,960
Swift Buildっていうのはかなり

343
00:24:51,960 --> 00:24:57,680
もともとXC BuildだったものがPIFを受け取ってたのが

344
00:24:57,680 --> 00:25:01,000
本当にそのままオープンソースになって

345
00:25:01,000 --> 00:25:04,839
名前を変えて出てきたみたいなものっていう感じであってますか

346
00:25:04,839 --> 00:25:06,519
いい質問ですね

347
00:25:06,519 --> 00:25:11,579
ちょっと混乱を招くのであえて端折った部分が
言及されてたんですけど

348
00:25:11,579 --> 00:25:15,700
実はこのXcode 16.2以前の図を見ると

349
00:25:15,700 --> 00:25:17,799
ここにXC Buildって書いてるんですね

350
00:25:17,799 --> 00:25:24,099
以前はXC Buildっていう完全なブラックボックスの
仕組みが提供されていて

351
00:25:24,099 --> 00:25:29,259
Swift PMからXC Buildでビルドするっていうパスもあったんですね

352
00:25:29,259 --> 00:25:32,359
だから今おっしゃっていただいたように

353
00:25:32,359 --> 00:25:39,539
これとほぼ同じ仕組みっていうのは実は前からあったんですね

354
00:25:39,539 --> 00:25:47,480
ただ実はXC Buildモードっていうのはまだあって

355
00:25:47,480 --> 00:25:52,720
Swift BuildモードとXC Buildモードが
別々にメンテされている
という状況になっているんですね

356
00:25:52,720 --> 00:25:56,819
これらについて詳細には追い切れてないんですけど

357
00:25:56,819 --> 00:26:01,160
おそらくほぼ互換性が高い状態だと思うので

358
00:26:01,160 --> 00:26:06,359
XC Buildがそのままオープンソース化されたって考えて

359
00:26:06,359 --> 00:26:09,380
差し支えないんじゃないかなと思ってますね

360
00:26:09,380 --> 00:26:12,579
ただそこの実装が2種類用意されているのは

361
00:26:12,579 --> 00:26:15,119
ちょっとあんまり理解していないです

362
00:26:15,119 --> 00:26:16,920
ありがとうございます

363
00:26:16,920 --> 00:26:24,839
それではお時間になりましたのでQ&Aを終了させていただきます

364
00:26:24,839 --> 00:26:27,799
続けて1分間フィードバックのお時間です

365
00:26:27,799 --> 00:26:33,859
1分間フィードバックのお時間です

366
00:26:33,859 --> 00:26:38,799
スクリーンのQRコードを読み取ってフィードバックを送ってください
